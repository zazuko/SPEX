{"version":3,"file":"main-DZwUoMgb.js","sources":["../node_modules/@graphy/content.trig.write/main.js"],"sourcesContent":["\n\n\n// queueMicrotask shim\n{\n\t// not defined or not a function\n\tif('function' !== typeof queueMicrotask) {\n\t\t// create resolved promise\n\t\tlet dp_resolve = Promise.resolve();\n\n\t\t// try to redefine\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tqueueMicrotask = fk => dp_resolve.then(fk)\n\t\t\t\t.catch(e_callback => setTimeout(() => {\n\t\t\t\t\tthrow e_callback;\n\t\t\t\t}, 0));\n\t\t}\n\t\t// oh well, at least we tried\n\t\tcatch(e_define) {}\n\t}\n}\n\n\n\nconst factory = require('@graphy/core.data.factory');\nconst Writable = require('@graphy/core.class.writable');\n\n// eslint-disable-next-line no-misleading-character-class\nconst RT_PREFIXED_NAME_NAMESPACE_VALID = /^([A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}]([A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_\\-0-9\\xb7\\u{0300}-\\u{036f}\\u{203f}-\\u{2040}.]*[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_\\-0-9\\xb7\\u{0300}-\\u{036f}\\u{203f}-\\u{2040}])?)?$/u;\nconst N_MAX_STRING_BUFFER = 1 << 12;\n\nconst XC_DIRECTIVES_TYPE_SPARQL = 0b001;\nconst XC_DIRECTIVES_CASE_PASCAL = 0b010;\nconst XC_DIRECTIVES_CASE_UPPER = 0b100;\n\n\n\nclass TriG_Writer extends Writable {\n\tconstructor(gc_writer={}) {\n\t\tsuper(gc_writer);\n\n\t\tlet {\n\t\t\tprefixes: h_prefixes={},\n\t\t\tlists: gc_lists=null,\n\t\t\tdebug: b_debug=false,\n\t\t\tstyle: gc_style=null,\n\t\t} = gc_writer;\n\n\t\tObject.assign(this, {\n\t\t\t_b_debug: b_debug,\n\t\t\t_s_indent: '\\t',\n\t\t\t_b_simplify_default_graph: false,\n\t\t\t_xc_directives: 0,\n\t\t\t_s_token_prefix: '@prefix',\n\t\t});\n\n\t\tlet s_graph_keyword = '';\n\n\t\t// style config\n\t\tif(gc_style) {\n\t\t\t// 'graph' keyword\n\t\t\tlet z_graph_keyword = gc_style.graph_keyword || gc_style.graphKeyword || gc_style['graph-keyword'];\n\t\t\tif(z_graph_keyword) {\n\t\t\t\t// boolean true\n\t\t\t\tif(true === z_graph_keyword) {\n\t\t\t\t\ts_graph_keyword = 'GRAPH ';\n\t\t\t\t}\n\t\t\t\t// invalid type\n\t\t\t\telse if('string' !== typeof z_graph_keyword) {\n\t\t\t\t\tthrow new TypeError(`Invalid argument type given for 'graph' token: ${z_graph_keyword}`);\n\t\t\t\t}\n\t\t\t\t// invalid token string\n\t\t\t\telse if(!/^graph$/i.test(z_graph_keyword)) {\n\t\t\t\t\tthrow new Error(`Graph token must equal case-insensitive \"GRAPH\"; found: \"${z_graph_keyword}\"`);\n\t\t\t\t}\n\t\t\t\t// valid graph token; append space\n\t\t\t\telse {\n\t\t\t\t\ts_graph_keyword = z_graph_keyword+' ';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// default graph simplification\n\t\t\tlet w_simplify_default_graph = gc_style.simplify_default_graph || gc_style.simplifyDefaultGraph || gc_style['simplify-default-graph'];\n\t\t\tif(w_simplify_default_graph) {\n\t\t\t\tthis._b_simplify_default_graph = !!w_simplify_default_graph;\n\t\t\t}\n\n\t\t\t// indent\n\t\t\tif(gc_style.indent) {\n\t\t\t\tthis._s_indent = gc_style.indent.replace(/[^\\s]/g, '');\n\t\t\t}\n\n\t\t\t// use sparql directives\n\t\t\tlet z_directives = gc_style.directives || gc_style.directives;\n\t\t\tif(z_directives) {\n\t\t\t\tswitch(z_directives) {\n\t\t\t\t\tcase 'sparql': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL;\n\t\t\t\t\t\tthis._s_token_prefix = 'prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'Sparql': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL | XC_DIRECTIVES_CASE_PASCAL;\n\t\t\t\t\t\tthis._s_token_prefix = 'Prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'SPARQL': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL | XC_DIRECTIVES_CASE_UPPER;\n\t\t\t\t\t\tthis._s_token_prefix = 'PREFIX';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'turtle': {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'Turtle': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_CASE_PASCAL;\n\t\t\t\t\t\tthis._s_token_prefix = '@Prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'TURTLE': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_CASE_UPPER;\n\t\t\t\t\t\tthis._s_token_prefix = '@PREFIX';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tthrow new Error(`Value not understood for 'directives' option: ${z_directives}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// set graph token\n\t\tthis._s_graph_keyword = s_graph_keyword;\n\n\n\n\t\t// custom list keys\n\t\tif(gc_lists) {\n\t\t\t// serialize list object\n\t\t\tthis._serialize_list_object = function(a_list, n_nest_level) {\n\t\t\t\t// transcode list object\n\t\t\t\tlet hc2_transcoded = this._transcode_list(a_list);\n\n\t\t\t\t// serialize object\n\t\t\t\treturn this._encode_objects(hc2_transcoded, n_nest_level);\n\t\t\t};\n\t\t}\n\n\t\t// serialize initial prefix mappings\n\t\tlet s_token_prefix = this._s_token_prefix;\n\t\tlet s_prefix_eol = (this._xc_directives & XC_DIRECTIVES_TYPE_SPARQL)? '\\n': ' .\\n';\n\t\tlet s_prefixes = '';\n\t\ttry {\n\t\t\t// each user-defined prefix\n\t\t\tfor(let s_prefix_id in h_prefixes) {\n\t\t\t\t// invalid prefix id\n\t\t\t\tif(!RT_PREFIXED_NAME_NAMESPACE_VALID.test(s_prefix_id)) {\n\t\t\t\t\tthrow new Error(`Invlalid prefix id for application/trig RDF serialization format: '${s_prefix_id}'`);\n\t\t\t\t}\n\n\t\t\t\t// append to string\n\t\t\t\ts_prefixes += `${s_token_prefix} ${s_prefix_id}: ${factory.namedNode(h_prefixes[s_prefix_id]).verbose()}${s_prefix_eol}`;\n\t\t\t}\n\t\t}\n\t\t// serialization error\n\t\tcatch(e_serialize) {\n\t\t\tqueueMicrotask(() => {\n\t\t\t\tthis.emit('error', e_serialize);\n\t\t\t});\n\t\t}\n\n\t\t// push prefixes\n\t\tif(s_prefixes) this.push(s_prefixes);\n\t}\n\n\t// serialize prefixes\n\t_serialize_prefixes(h_prefixes) {\n\t\t// build prefixes string\n\t\tlet s_prefixes = (2 === this._xc_state)? '\\n\\n': '';\n\n\t\t// update state\n\t\tthis._xc_state = 0;\n\n\t\t// clone prefixes\n\t\tthis._h_prefixes = {...this._h_prefixes};\n\n\t\t// ref prefix token\n\t\tlet s_token_prefix = this._s_token_prefix;\n\n\t\t// prep eol string\n\t\tlet s_prefix_eol = (this._xc_directives & XC_DIRECTIVES_TYPE_SPARQL)? '\\n': ' .\\n';\n\n\t\t// each user-defined prefix\n\t\tfor(let s_prefix_id in h_prefixes) {\n\t\t\t// invalid prefix id\n\t\t\tif(!RT_PREFIXED_NAME_NAMESPACE_VALID.test(s_prefix_id)) {\n\t\t\t\tthrow new Error(`Invlalid prefix id for application/trig RDF serialization format: '${s_prefix_id}'`);\n\t\t\t}\n\n\t\t\t// append to string\n\t\t\ts_prefixes += `${s_token_prefix} ${s_prefix_id}: ${factory.namedNode(h_prefixes[s_prefix_id]).verbose()}${s_prefix_eol}`;\n\n\t\t\t// set prefix\n\t\t\tthis._h_prefixes[s_prefix_id] = h_prefixes[s_prefix_id];\n\t\t}\n\n\t\t// recache\n\t\tfactory.cache_prefixes(this._h_prefixes);\n\n\t\t// return prefix string\n\t\treturn s_prefixes;\n\t}\n\n\n\n\t// serialize c3 hash\n\t_serialize_c3(hc3_triples) {\n\t\tlet {\n\t\t\t_h_prefixes: h_prefixes,\n\t\t\t_s_indent: s_indent,\n\n\t\t} = this;\n\t\t// break line if non-data state\n\t\tlet s_write = 2 !== this._xc_state? '\\n': '';\n\t\t// update state\n\t\tthis._xc_state = 2;\n\n\t\t// triple delimiter\n\t\tlet s_delim_triples = '';\n\t\t// subject exit listener\n\t\tlet f_exit_subject = null;\n\t\t// each subject\n\t\tfor(let sc1_subject in hc3_triples) {\n\t\t\t// directive\n\t\t\tif('`' === sc1_subject[0]) {\n\t\t\t\tlet g_apply = this._apply_directive(sc1_subject, hc3_triples[sc1_subject]);\n\t\t\t\t// write data\n\t\t\t\tif(g_apply.write) {\n\t\t\t\t\ts_write += s_delim_triples+g_apply.write;\n\t\t\t\t\t// do not break next line\n\t\t\t\t\ts_delim_triples = '';\n\t\t\t\t}\n\t\t\t\t// save exit listener\n\t\t\t\tif(g_apply.exit) f_exit_subject = g_apply.exit;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// position before subject\n\t\t\tlet i_triples = s_write.length;\n\t\t\t// serialize subject\n\t\t\ts_write += s_delim_triples+factory.c1_node(sc1_subject, h_prefixes).terse(h_prefixes)+' ';\n\t\t\t// pair indent & terminator\n\t\t\tlet s_indent_pairs = '';\n\t\t\tlet s_term_pairs = '';\n\t\t\t// ref pairs\n\t\t\tlet hc2_pairs = hc3_triples[sc1_subject];\n\t\t\t// position before pairs\n\t\t\tlet i_pairs = s_write.length;\n\t\t\t// were objects written?\n\t\t\tlet b_empty = true;\n\t\t\t// predicate exit listener\n\t\t\tlet f_exit_predicate = null;\n\t\t\t// each predicate\n\t\t\tfor(let sc1_predicate in hc2_pairs) {\n\t\t\t\t// directive\n\t\t\t\tif('`' === sc1_predicate[0]) {\n\t\t\t\t\t// apply directive\n\t\t\t\t\tlet g_apply = this._apply_directive(sc1_predicate, hc2_pairs[sc1_predicate]);\n\t\t\t\t\t// write data\n\t\t\t\t\tif(g_apply.write) {\n\t\t\t\t\t\t// break line\n\t\t\t\t\t\ts_write += (s_indent_pairs? s_term_pairs: '\\n')+s_indent+g_apply.write;\n\t\t\t\t\t\t// pair already terminated\n\t\t\t\t\t\ts_term_pairs = '';\n\t\t\t\t\t\t// indent next pair\n\t\t\t\t\t\ts_indent_pairs = s_indent;\n\t\t\t\t\t}\n\t\t\t\t\t// save exit listener\n\t\t\t\t\tif(g_apply.exit) f_exit_predicate = g_apply.exit;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// ref objects\n\t\t\t\tlet z_objects = hc2_pairs[sc1_predicate];\n\t\t\t\t// serialize objects\n\t\t\t\tlet st_objects = this._encode_objects(z_objects);\n\t\t\t\t// no objects; skip pair\n\t\t\t\tif(!st_objects) continue;\n\t\t\t\t// not empty\n\t\t\t\tb_empty = false;\n\t\t\t\t// cannot use blank node in predicate position\n\t\t\t\tif('_' === sc1_predicate[0] && ':' === sc1_predicate[1]) {\n\t\t\t\t\tthrow new Error(`Cannot use blank node in predicate position of c3 hash; subject:'${sc1_subject}', predicate:'${sc1_predicate}'`);\n\t\t\t\t}\n\t\t\t\t// create predicate\n\t\t\t\tlet kt_predicate = factory.c1_named_node(sc1_predicate, h_prefixes);\n\t\t\t\t// tersify rdf:type\n\t\t\t\tlet st_predicate = kt_predicate.isRdfTypeAlias? 'a': kt_predicate.terse(h_prefixes);\n\t\t\t\t// serialize predicate and object(s)\n\t\t\t\ts_write += s_term_pairs+s_indent_pairs+st_predicate+' '+st_objects;\n\t\t\t\t// update state\n\t\t\t\tthis._xc_state = 2;\n\t\t\t\t\t// // string buffer became too large\n\t\t\t\t\t// if(s_write.length >= N_MAX_STRING_BUFFER) {\n\t\t\t\t\t// \tdebugger;\n\t\t\t\t\t// }\n\t\t\t\t// terminate next pair\n\t\t\t\ts_term_pairs = ' ;\\n';\n\t\t\t\t// indent next pair\n\t\t\t\ts_indent_pairs = s_indent;\n\t\t\t\t// call exit predicate listener\n\t\t\t\tif(f_exit_predicate) f_exit_predicate();\n\t\t\t}\n\t\t\t// empty triples; cut out\n\t\t\tif(b_empty) {\n\t\t\t\ts_write = s_write.slice(0, i_triples)+s_write.slice(i_pairs);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// delimit triple(s)\n\t\t\ts_delim_triples = '\\n';\n\t\t\t// close triple\n\t\t\ts_write += `${s_term_pairs? ' ': s_indent_pairs}.\\n`; //\n\t\t\t// call exit subject listener\n\t\t\tif(f_exit_subject) f_exit_subject();\n\t\t}\n\n\t\ts_write += '\\n';\n\t\treturn s_write;\n\t}\n\n\n\t// serialize c4 hash\n\t_serialize_c4(hc4_quads) {\n\t\tlet {\n\t\t\t_h_prefixes: h_prefixes,\n\t\t\t_s_indent: s_indent,\n\n\t\t} = this;\n\t\t// break line if non-data state\n\t\tlet s_write = 2 !== this._xc_state? '\\n': '';\n\t\t// update state\n\t\tthis._xc_state = 2;\n\t\t// force default graph brace\n\t\tlet b_simplify_default_graph = this._b_simplify_default_graph;\n\n\t\t// graph token\n\t\tlet s_graph_keyword = this._s_graph_keyword;\n\n\t\t// graph exit listener\n\t\tlet f_exit_graph = null;\n\n\t\t// each graph\n\t\tfor(let sc1_graph in hc4_quads) {\n\t\t\t// directive\n\t\t\tif('`' === sc1_graph[0]) {\n\t\t\t\tlet g_apply = this._apply_directive(sc1_graph, hc4_quads[sc1_graph]);\n\n\t\t\t\t// write data\n\t\t\t\tif(g_apply.write) s_write += g_apply.write;\n\n\t\t\t\t// save exit listener\n\t\t\t\tif(g_apply.exit) f_exit_graph = g_apply.exit;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// serialize open graph\n\t\t\tlet st_graph = factory.c1_node(sc1_graph, h_prefixes).terse(h_prefixes);\n\n\t\t\ts_write += st_graph\n\t\t\t\t? s_graph_keyword+st_graph+' {\\n'\n\t\t\t\t: (b_simplify_default_graph? '': s_graph_keyword+'{\\n');\n\n\t\t\t// simplify default graph implies no indent\n\t\t\tlet s_indent_root = (!st_graph && b_simplify_default_graph)? '': s_indent;\n\n\t\t\t// update state\n\t\t\tthis._xc_state = 2;\n\n\t\t\t// ref triples\n\t\t\tlet hc3_triples = hc4_quads[sc1_graph];\n\n\t\t\t// triple delimiter\n\t\t\tlet s_delim_triples = '';\n\t\t\t// subject exit listener\n\t\t\tlet f_exit_subject = null;\n\t\t\t// each subject\n\t\t\tfor(let sc1_subject in hc3_triples) {\n\t\t\t\t// directive\n\t\t\t\tif('`' === sc1_subject[0]) {\n\t\t\t\t\tlet g_apply = this._apply_directive(sc1_subject, hc3_triples[sc1_subject]);\n\t\t\t\t\t// write data\n\t\t\t\t\tif(g_apply.write) {\n\t\t\t\t\t\ts_write += s_delim_triples+s_indent_root+g_apply.write;\n\t\t\t\t\t\t// do not break next line\n\t\t\t\t\t\ts_delim_triples = '';\n\t\t\t\t\t}\n\t\t\t\t\t// save exit listener\n\t\t\t\t\tif(g_apply.exit) f_exit_subject = g_apply.exit;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// position before subject\n\t\t\t\tlet i_triples = s_write.length;\n\t\t\t\t// serialize subject\n\t\t\t\ts_write += s_delim_triples+s_indent_root+factory.c1_node(sc1_subject, h_prefixes).terse(h_prefixes)+' ';\n\t\t\t\t// pair indent & terminator\n\t\t\t\tlet s_indent_pairs = '';\n\t\t\t\tlet s_term_pairs = '';\n\t\t\t\t// ref pairs\n\t\t\t\tlet hc2_pairs = hc3_triples[sc1_subject];\n\t\t\t\t// position before pairs\n\t\t\t\tlet i_pairs = s_write.length;\n\t\t\t\t// were objects written?\n\t\t\t\tlet b_empty = true;\n\t\t\t\t// predicate exit listener\n\t\t\t\tlet f_exit_predicate = null;\n\t\t\t\t// each predicate\n\t\t\t\tfor(let sc1_predicate in hc2_pairs) {\n\t\t\t\t\t// directive\n\t\t\t\t\tif('`' === sc1_predicate[0]) {\n\t\t\t\t\t\t// apply directive\n\t\t\t\t\t\tlet g_apply = this._apply_directive(sc1_predicate, hc2_pairs[sc1_predicate]);\n\t\t\t\t\t\t// write data\n\t\t\t\t\t\tif(g_apply.write) {\n\t\t\t\t\t\t\t// break line\n\t\t\t\t\t\t\ts_write += (s_indent_pairs? s_term_pairs: '\\n')+s_indent+s_indent_root+g_apply.write;\n\t\t\t\t\t\t\t// pair already terminated\n\t\t\t\t\t\t\ts_term_pairs = '';\n\t\t\t\t\t\t\t// indent next pair\n\t\t\t\t\t\t\ts_indent_pairs = s_indent+s_indent_root;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// save exit listener\n\t\t\t\t\t\tif(g_apply.exit) f_exit_predicate = g_apply.exit;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// ref objects\n\t\t\t\t\tlet z_objects = hc2_pairs[sc1_predicate];\n\t\t\t\t\t// serialize objects\n\t\t\t\t\tlet st_objects = this._encode_objects(z_objects);\n\t\t\t\t\t// no objects; skip pair\n\t\t\t\t\tif(!st_objects) continue;\n\t\t\t\t\t// not empty\n\t\t\t\t\tb_empty = false;\n\t\t\t\t\t// cannot use blank node in predicate position\n\t\t\t\t\tif('_' === sc1_predicate[0] && ':' === sc1_predicate[1]) {\n\t\t\t\t\t\tthrow new Error(`Cannot use blank node in predicate position of c4 hash; graph:'${sc1_graph}', subject:'${sc1_subject}', predicate:'${sc1_predicate}'`);\n\t\t\t\t\t}\n\t\t\t\t\t// create predicate\n\t\t\t\t\tlet kt_predicate = factory.c1_named_node(sc1_predicate, h_prefixes);\n\t\t\t\t\t// tersify rdf:type\n\t\t\t\t\tlet st_predicate = kt_predicate.isRdfTypeAlias? 'a': kt_predicate.terse(h_prefixes);\n\t\t\t\t\t// serialize predicate and object(s)\n\t\t\t\t\ts_write += s_term_pairs+s_indent_pairs+st_predicate+' '+st_objects;\n\t\t\t\t\t// update state\n\t\t\t\t\tthis._xc_state = 2;\n\t\t\t\t\t// // string buffer became too large\n\t\t\t\t\t// if(s_write.length >= N_MAX_STRING_BUFFER) {\n\t\t\t\t\t// \tdebugger;\n\t\t\t\t\t// }\n\t\t\t\t\t// terminate next pair\n\t\t\t\t\ts_term_pairs = ' ;\\n';\n\t\t\t\t\t// indent next pair\n\t\t\t\t\ts_indent_pairs = s_indent+s_indent_root;\n\t\t\t\t\t// call exit predicate listener\n\t\t\t\t\tif(f_exit_predicate) f_exit_predicate();\n\t\t\t\t}\n\t\t\t\t// empty triples; cut out\n\t\t\t\tif(b_empty) {\n\t\t\t\t\ts_write = s_write.slice(0, i_triples)+s_write.slice(i_pairs);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// delimit triple(s)\n\t\t\t\ts_delim_triples = '\\n';\n\t\t\t\t// close triple\n\t\t\t\ts_write += `${s_term_pairs? ' ': s_indent_pairs}.\\n`; // \\n\n\t\t\t\t// call exit subject listener\n\t\t\t\tif(f_exit_subject) f_exit_subject();\n\t\t\t}\n\t\t\t// close graph\n\t\t\ts_write += ((st_graph || !b_simplify_default_graph)? '}\\n': '')+'\\n';\n\n\t\t\t// call exit graph listener\n\t\t\tif(f_exit_graph) f_exit_graph();\n\t\t}\n\t\treturn s_write;\n\t}\n\n\t// write objects\n\t_encode_objects(z_objects, n_nest_level=1) {\n\t\tlet {\n\t\t\t_h_prefixes: h_prefixes,\n\t\t\t_s_indent: s_indent,\n\t\t\t_hm_coercions: hm_coercions,\n\t\t} = this;\n\n\t\t// deduce object value type\n\t\tswitch(typeof z_objects) {\n\t\t\t// concise-term string\n\t\t\tcase 'string': return factory.c1(z_objects, h_prefixes).terse(h_prefixes);\n\n\t\t\t// numeric type\n\t\t\tcase 'number': return factory.number(z_objects).terse(h_prefixes);\n\n\t\t\t// boolean type\n\t\t\tcase 'boolean': return factory.boolean(z_objects).terse(h_prefixes);\n\n\t\t\t// object\n\t\t\tcase 'object': {\n\t\t\t\t// null; reject\n\t\t\t\tif(null === z_objects) throw new Error('Refusing to serialize null value given as an object of quad');\n\n\t\t\t\t// array, list of objects\n\t\t\t\tif(Array.isArray(z_objects) || z_objects instanceof Set) {\n\t\t\t\t\tlet s_write = '';\n\n\t\t\t\t\t// object terminator\n\t\t\t\t\tlet s_term_object = '';\n\n\t\t\t\t\t// each object\n\t\t\t\t\tfor(let z_item of z_objects) {\n\t\t\t\t\t\t// item is an array; serialize list\n\t\t\t\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\t\t\t\ts_write += s_term_object + this._serialize_list_object(z_item, n_nest_level);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// non-array\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// recurse on item\n\t\t\t\t\t\t\ts_write += s_term_object + this._encode_objects(z_item, n_nest_level);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// terminate next object\n\t\t\t\t\t\ts_term_object = ', ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn s_write;\n\t\t\t\t}\n\t\t\t\t// plain object, blank node\n\t\t\t\telse if(Object === z_objects.constructor) {\n\t\t\t\t\t// open blank node block\n\t\t\t\t\tlet s_write = '[';\n\n\t\t\t\t\t// whether the block is empty\n\t\t\t\t\tlet b_empty = true;\n\n\t\t\t\t\t// object exit listener\n\t\t\t\t\tlet f_exit_object = null;\n\n\t\t\t\t\t// each pair\n\t\t\t\t\tfor(let sc1_predicate in z_objects) {\n\t\t\t\t\t\t// block is not empty\n\t\t\t\t\t\tb_empty = false;\n\n\t\t\t\t\t\t// terminate previous pair\n\t\t\t\t\t\ts_write += '\\n'+s_indent.repeat(2+n_nest_level);\n\n\t\t\t\t\t\t// directive; serialize it\n\t\t\t\t\t\tif('`' === sc1_predicate[0]) {\n\t\t\t\t\t\t\tlet g_apply = this._apply_directive(sc1_predicate, z_objects[sc1_predicate]);\n\n\t\t\t\t\t\t\t// write data\n\t\t\t\t\t\t\tif(g_apply.write) s_write += g_apply.write;\n\n\t\t\t\t\t\t\t// save exit listener\n\t\t\t\t\t\t\tif(g_apply.exit) f_exit_object = g_apply.exit;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// write predicate and object(s)\n\t\t\t\t\t\ts_write += factory.c1(sc1_predicate, h_prefixes).terse(h_prefixes) + ' '\n\t\t\t\t\t\t\t+ this._encode_objects(z_objects[sc1_predicate], n_nest_level+1) +' ;';\n\t\t\t\t\t}\n\n\t\t\t\t\t// close blank node block\n\t\t\t\t\ts_write += (b_empty? '': '\\n'+s_indent.repeat(1+n_nest_level))+']';\n\n\t\t\t\t\t// call exit object listener\n\t\t\t\t\tif(f_exit_object) f_exit_object();\n\n\t\t\t\t\t// serialize current predicate to blank node\n\t\t\t\t\treturn s_write;\n\t\t\t\t}\n\t\t\t\t// coercable instance\n\t\t\t\telse if(hm_coercions.has(z_objects.constructor)) {\n\t\t\t\t\t// convert javascript object to term object\n\t\t\t\t\tlet kt_converted = hm_coercions.get(z_objects.constructor).apply(this, [z_objects, n_nest_level]);\n\n\t\t\t\t\t// serialize\n\t\t\t\t\treturn kt_converted.terse(h_prefixes);\n\t\t\t\t}\n\t\t\t\t// graphy term\n\t\t\t\telse if(z_objects.isGraphyTerm) {\n\t\t\t\t\treturn z_objects.terse(h_prefixes);\n\t\t\t\t}\n\t\t\t\t// RDFJS term\n\t\t\t\telse if(z_objects.termType) {\n\t\t\t\t\treturn factory.from.term(z_objects).terse(h_prefixes);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// fallthrough: other\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`Bad type for RDF object: [${typeof z_objects}] ${z_objects? z_objects.constructor: z_objects}`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// serialize collection object\n\t_serialize_collection_object(a_collection, n_nest_level) {\n\t\tlet s_indent = this._s_indent;\n\n\t\t// open collection block\n\t\tlet s_write = '(';\n\n\t\t// each item\n\t\tfor(let z_item of a_collection) {\n\t\t\tlet s_objects = '';\n\n\t\t\t// item is array; serialize as sub-collection\n\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\ts_objects = this._serialize_collection_object(z_item, n_nest_level+1);\n\t\t\t}\n\t\t\t// non-array item\n\t\t\telse {\n\t\t\t\ts_objects = this._encode_objects(z_item, n_nest_level+1);\n\t\t\t}\n\n\t\t\t// serialize collection\n\t\t\ts_write += '\\n'+s_indent.repeat(2+n_nest_level)+s_objects;\n\t\t}\n\n\t\t// break line if anything was written (including comments)\n\t\tif(a_collection.length) s_write += '\\n'+s_indent.repeat(1+n_nest_level);\n\n\t\t// close collection block\n\t\ts_write += ')';\n\n\t\treturn s_write;\n\t}\n\n\t// rdfjs quad\n\t_serialize_quad(g_quad) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet kq_quad = factory.from.quad(g_quad);\n\n\t\tlet st_graph = kq_quad.graph.terse(h_prefixes);\n\n\t\t// serialize quad\n\t\tthis._s_push += (2 !== this._xc_state? '\\n': '')\n\t\t\t\t\t\t\t+this._s_graph_keyword+(st_graph? st_graph+' ': '')+'{\\n\\t'\n\t\t\t\t\t\t+kq_quad.subject.terse(h_prefixes)+' '\n\t\t\t+kq_quad.predicate.terse(h_prefixes)+' '\n\t\t\t+kq_quad.object.terse(h_prefixes)+' .\\n'\n\t\t\t\t\t\t\t+'}\\n\\n';\n\n\n\t\t// update state\n\t\tthis._xc_state = 2;\n\t}\n}\n\nObject.assign(TriG_Writer.prototype, {\n\tanonymous_blank_nodes: true,\n\t_serialize_c3r: TriG_Writer.prototype._serialize_c3,\n\t_serialize_c4r: TriG_Writer.prototype._serialize_c4,\n\t_serialize_comment: Writable.prototype._serialize_hash_comment,\n\t_serialize_list_object: TriG_Writer.prototype._serialize_collection_object,\n});\n\nmodule.exports = function(gc_writer) {\n\treturn new TriG_Writer(gc_writer);\n};\n"],"names":["dp_resolve","fk","e_callback","factory","require$$0","Writable","require$$1","RT_PREFIXED_NAME_NAMESPACE_VALID","XC_DIRECTIVES_TYPE_SPARQL","XC_DIRECTIVES_CASE_PASCAL","XC_DIRECTIVES_CASE_UPPER","TriG_Writer","gc_writer","h_prefixes","gc_lists","b_debug","gc_style","s_graph_keyword","z_graph_keyword","w_simplify_default_graph","z_directives","a_list","n_nest_level","hc2_transcoded","s_token_prefix","s_prefix_eol","s_prefixes","s_prefix_id","e_serialize","hc3_triples","s_indent","s_write","s_delim_triples","f_exit_subject","sc1_subject","g_apply","i_triples","s_indent_pairs","s_term_pairs","hc2_pairs","i_pairs","b_empty","f_exit_predicate","sc1_predicate","z_objects","st_objects","kt_predicate","st_predicate","hc4_quads","b_simplify_default_graph","f_exit_graph","sc1_graph","st_graph","s_indent_root","hm_coercions","s_term_object","z_item","f_exit_object","a_collection","s_objects","g_quad","kq_quad","main"],"mappings":"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","x_google_ignoreList":[0]}