{"version":3,"file":"main-DzboNW0Y.js","sources":["../node_modules/@graphy/core.class.writable/main.js"],"sourcesContent":["\n\n\nconst factory = require('@graphy/core.data.factory');\nconst Scribable = require('@graphy/core.class.scribable');\n\nconst R_DIRECTIVE_CONTENTS = /^`\\[[^\\]]+\\](.*)$/;\n\nconst HM_COERCIONS_DEFAULT = new Map([\n\t[Date, dt => factory.dateTime(dt)],\n\t[Number, x => factory.number(x)],\n]);\n\nclass Writable extends Scribable {\n\tconstructor(gc_writable={}) {\n\t\tsuper(gc_writable);\n\n\t\tlet {\n\t\t\tlists: gc_lists=null,\n\t\t} = gc_writable;\n\n\t\t// start with default coercions map\n\t\tlet hm_coercions = HM_COERCIONS_DEFAULT;\n\n\t\t// user is overriding coercions\n\t\tif(gc_writable.coercions) {\n\t\t\t// copy default map\n\t\t\thm_coercions = new Map(hm_coercions);\n\n\t\t\t// add each entry from user-defined map\n\t\t\tfor(let [dc_type, f_transform] of gc_writable.coercions) {\n\t\t\t\thm_coercions.set(dc_type, f_transform);\n\t\t\t}\n\t\t}\n\n\t\t// lists\n\t\tlet g_lists = {\n\t\t\tfirst: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#first',\n\t\t\trest: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#rest',\n\t\t\tnil: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',\n\t\t};\n\n\t\t// custom transcoder\n\t\tif(gc_lists) {\n\t\t\tlet {\n\t\t\t\tfirst: sc1_first=null,\n\t\t\t\trest: sc1_rest=null,\n\t\t\t\tnil: sc1_nil=null,\n\t\t\t} = gc_lists;\n\n\t\t\tif(sc1_first) g_lists.first = sc1_first;\n\t\t\tif(sc1_rest) g_lists.rest = sc1_rest;\n\t\t\tif(sc1_nil) g_lists.nil = sc1_nil;\n\t\t}\n\n\t\tObject.assign(this, {\n\t\t\t_xc_state: 0,\n\t\t\t_hm_coercions: hm_coercions,\n\t\t\t_g_lists: g_lists,\n\t\t});\n\t}\n\n\t// serialize comment\n\t_serialize_comment(s_comment, g_directive) {\n\t\tlet s_write = '';\n\n\t\t// non-data state\n\t\tif(2 !== this._xc_state) {\n\t\t\t// break line\n\t\t\ts_write += '\\n';\n\n\t\t\t// update state\n\t\t\tthis._xc_state = 2;\n\t\t}\n\n\t\t// comment width\n\t\tif(g_directive && g_directive.width) {\n\t\t\tlet n_width = g_directive.width;\n\n\t\t\tlet a_lines = [];\n\n\t\t\twhile(s_comment.length > n_width) {\n\t\t\t\tlet s_line = s_comment.slice(0, n_width+1);\n\n\t\t\t\tlet m_line = /^(.*[^\\s])\\s+/.exec(s_line);\n\n\t\t\t\tif(m_line) {\n\t\t\t\t\tlet s_push = m_line[1];\n\t\t\t\t\ta_lines.push(s_push);\n\t\t\t\t\ts_comment = s_comment.slice(s_push.length).replace(/^\\s+/, '');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta_lines.push(s_comment.slice(0, n_width));\n\t\t\t\t\ts_comment = s_comment.slice(n_width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ts_comment = a_lines.join('\\n');\n\t\t}\n\n\t\treturn s_write+(super._serialize_comment(s_comment) || '');\n\t}\n\n\n\t// transcode list into concise-pairs hash\n\t_transcode_list(a_list, g_lists=this._g_lists) {\n\t\t// empty list\n\t\tif(!a_list.length) {\n\t\t\treturn g_lists.nil;\n\t\t}\n\t\t// non-empty list\n\t\telse {\n\t\t\tlet z_item = a_list[0];\n\t\t\tlet w_first = z_item;\n\n\t\t\t// item is nested list; transcode\n\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\tw_first = this._transcode_list(z_item, g_lists);  // eslint-disable-line no-invalid-this\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// first item\n\t\t\t\t[g_lists.first]: w_first,\n\n\t\t\t\t// rest of items\n\t\t\t\t[g_lists.rest]: 1 === a_list.length\n\t\t\t\t\t? g_lists.nil\n\t\t\t\t\t: this._transcode_list(a_list.slice(1), g_lists),  // eslint-disable-line no-invalid-this\n\t\t\t};\n\t\t}\n\t}\n\n\t// serialize a writable data event directive\n\t_apply_directive(sc1_directive, w_value) {\n\t\t// directive contents\n\t\tlet m_directive = R_DIRECTIVE_CONTENTS.exec(sc1_directive);\n\t\tif(!m_directive) {\n\t\t\tthrow new Error(`Invalid writable data event directive string: \"${sc1_directive}\"`);\n\t\t}\n\n\t\t// parse as JSON\n\t\tlet g_directive;\n\t\ttry {\n\t\t\tg_directive = JSON.parse(m_directive[1]);\n\t\t}\n\t\tcatch(e_parse) {\n\t\t\tthrow new Error(`Unable to parse JSON in writable data event directive: \"${m_directive[1]}\"`);\n\t\t}\n\n\t\t// directive type\n\t\tlet s_type = g_directive.type;\n\n\t\t// deduce directive type\n\t\tswitch(s_type) {\n\t\t\t// comment\n\t\t\tcase 'comment': {\n\t\t\t\t// serializer supports commenting; serialize comment\n\t\t\t\tif(this._serialize_comment) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twrite: this._serialize_comment(w_value+'', g_directive),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// newlines\n\t\t\tcase 'newlines': {\n\t\t\t\t// serializer supports newlines; serialize newlines\n\t\t\t\tif(this._serialize_newlines) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twrite: this._serialize_newlines(w_value),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// config\n\t\t\tcase 'config': {\n\t\t\t\tswitch(g_directive.value) {\n\t\t\t\t\t// list config\n\t\t\t\t\tcase 'lists': {\n\t\t\t\t\t\t// ref stack of list serializers\n\t\t\t\t\t\tlet a_list_serializers = this._a_list_serializers;\n\n\t\t\t\t\t\t// push current method to stack\n\t\t\t\t\t\ta_list_serializers.push(this._serialize_list_object);\n\n\t\t\t\t\t\t// inherit unspecified keys from parent\n\t\t\t\t\t\tlet g_list_default = this._g_lists;\n\n\t\t\t\t\t\t// build list config\n\t\t\t\t\t\tlet g_lists = {\n\t\t\t\t\t\t\tfirst: w_value.first || g_list_default.first,\n\t\t\t\t\t\t\trest: w_value.rest || g_list_default.rest,\n\t\t\t\t\t\t\tnil: w_value.nil || g_list_default.nil,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// redefine list object serialization\n\t\t\t\t\t\tthis._serialize_list_object = function(a_list, n_nest_level) {\n\t\t\t\t\t\t\t// transcode list object\n\t\t\t\t\t\t\tlet hc2_transcoded = this._transcode_list(a_list, g_lists);\n\n\t\t\t\t\t\t\t// serialize object\n\t\t\t\t\t\t\treturn this._encode_objects(hc2_transcoded, n_nest_level);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// return local directive instructions\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\texit: () => {\n\t\t\t\t\t\t\t\tthis._serialize_list_object = a_list_serializers.pop();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// no such key\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tthrow new Error(`No such config key '${g_directive.value}'`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// other\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`Invalid writable data event directive type: '${s_type}'`);\n\t\t\t}\n\t\t}\n\n\t\t// nothing\n\t\treturn {};\n\t}\n\n\t// if not overriden by subclass, serialize quads in default graph\n\t_serialize_c4(hc4_quads) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet a_unions = [];\n\t\tlet s_write = '';\n\n\t\t// each graph in quads hash\n\t\tfor(let sv1_graph in hc4_quads) {\n\t\t\t// non-default graph; union from dataset\n\t\t\tif('*' !== sv1_graph) a_unions.push(sv1_graph);\n\n\t\t\t// add all quads from graph\n\t\t\ts_write += this._serialize_c3(hc4_quads[sv1_graph]);\n\t\t}\n\n\t\t// a union was performed\n\t\tif(a_unions.length) {\n\t\t\t// warn about implicit union\n\t\t\tlet s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => factory.c1(sc1, h_prefixes).verbose()).join(', ')}`;\n\n\t\t\t// emit warning, wasn't listened to; force thru warn/stderr channel\n\t\t\tif(!this.emit('warning', s_warning)) {\n\t\t\t\tconsole.warn(s_warning);\n\t\t\t}\n\t\t}\n\n\t\treturn s_write;\n\t}\n}\n\nmodule.exports = Writable;\n"],"names":["factory","require$$0","Scribable","require$$1","R_DIRECTIVE_CONTENTS","HM_COERCIONS_DEFAULT","dt","x","Writable","gc_writable","gc_lists","hm_coercions","dc_type","f_transform","g_lists","sc1_first","sc1_rest","sc1_nil","s_comment","g_directive","s_write","n_width","a_lines","s_line","m_line","s_push","a_list","z_item","w_first","sc1_directive","w_value","m_directive","s_type","a_list_serializers","g_list_default","n_nest_level","hc2_transcoded","hc4_quads","h_prefixes","a_unions","sv1_graph","s_warning","sc1","main"],"mappings":"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","x_google_ignoreList":[0]}