{"version":3,"file":"main-BAKK71B2.js","sources":["../node_modules/@graphy/core.class.scribable/main.js"],"sourcesContent":["\n\n\n// queueMicrotask shim\n{\n\t// not defined or not a function\n\tif('function' !== typeof queueMicrotask) {\n\t\t// create resolved promise\n\t\tlet dp_resolve = Promise.resolve();\n\n\t\t// try to redefine\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tqueueMicrotask = fk => dp_resolve.then(fk)\n\t\t\t\t.catch(e_callback => setTimeout(() => {\n\t\t\t\t\tthrow e_callback;\n\t\t\t\t}, 0));\n\t\t}\n\t\t// oh well, at least we tried\n\t\tcatch(e_define) {}\n\t}\n}\n\n\nconst factory = require('@graphy/core.data.factory');\nconst stream = require('@graphy/core.iso.stream');\n\n\n// max string buffer size\nconst N_DEFAULT_MAX_BUFFER = 1 << 15;  // 32 KiB\n\n\nclass Scribable extends stream.Transform {\n\t// flush buffer\n\tstatic _flush_buffer(k_self) {\n\t\t// no buffer; exit\n\t\tif(!k_self._s_push) return;\n\n\t\t// push buffer to stream\n\t\tk_self.push(k_self._s_push);\n\n\t\t// reset buffer\n\t\tk_self._s_push = '';\n\t}\n\n\tconstructor(gc_scribable={}) {\n\t\tsuper({\n\t\t\twritableObjectMode: true,\n\t\t\treadableObjectMode: false,\n\t\t});\n\n\t\tlet {\n\t\t\tprefixes: h_prefixes={},\n\t\t} = gc_scribable;\n\n\t\t// internal buffer\n\t\tthis._s_push = '';\n\n\t\t// max buffer length\n\t\tthis._n_max_buffer = gc_scribable.max_buffer || gc_scribable.maxBuffer || N_DEFAULT_MAX_BUFFER;\n\n\t\t// prefixes\n\t\tthis._h_prefixes = factory.cache_prefixes(h_prefixes || {});\n\n\t\t// on new source(s)\n\t\tthis.on('pipe', (ds_src) => {\n\t\t\t// listen for prefix events\n\t\t\tds_src.on('prefix', (s_prefix_id, p_iri) => {\n\t\t\t\tthis.write({\n\t\t\t\t\ttype: 'prefixes',\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\t[s_prefix_id]: p_iri,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// listen for comment events\n\t\t\tds_src.on('comment', (s_comment) => {\n\t\t\t\tthis.write({\n\t\t\t\t\ttype: 'comment',\n\t\t\t\t\tvalue: s_comment,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// bind event listeners\n\t\tif(gc_scribable.close) this.once('close', gc_scribable.close);\n\t\tif(gc_scribable.drain) this.on('drain', gc_scribable.drain);\n\t\tif(gc_scribable.error) this.on('error', gc_scribable.error);\n\t\tif(gc_scribable.finish) this.once('finish', gc_scribable.finish);\n\t\tif(gc_scribable.data) this.on('data', gc_scribable.data);\n\t\tif(gc_scribable.end) this.once('end', gc_scribable.end);\n\t\tif(gc_scribable.warning) this.on('warning', gc_scribable.warning);\n\t}\n\n\t_serialize_hash_comment(s_comment) {\n\t\treturn '# '+s_comment.replace(/\\n/g, '\\n# ')+'\\n';\n\t}\n\n\t_serialize_newlines(n_newlines=1) {\n\t\treturn '\\n'.repeat(n_newlines);\n\t}\n\n\t_serialize_c4r(hc4r_quads) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet a_unions = [];\n\t\tlet s_write = '';\n\n\t\t// each graph in quads hash\n\t\tfor(let sc1_graph in hc4r_quads) {\n\t\t\t// non-default graph; union from dataset\n\t\t\tif('*' !== sc1_graph) a_unions.push(sc1_graph);\n\n\t\t\t// add all quads from graph\n\t\t\ts_write += this._serialize_c3r(hc4r_quads[sc1_graph]);\n\t\t}\n\n\t\t// a union was performed\n\t\tif(a_unions.length) {\n\t\t\t// warn about implicit union\n\t\t\tlet s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => factory.c1(sc1, h_prefixes).verbose()).join(', ')}`;\n\n\t\t\t// emit warning, wasn't listened to; force thru warn/stderr channel\n\t\t\tif(!this.emit('warning', s_warning)) {\n\t\t\t\tconsole.warn(s_warning);\n\t\t\t}\n\t\t}\n\n\t\treturn s_write;\n\t}\n\n\n\t_serialize_c3() {\n\t\tthrow new Error(`Write event type 'c3' not supported by ${this.constructor.name}`);\n\t}\n\n\t_serialize_c4() {\n\t\tthrow new Error(`Write event type 'c4' not supported by ${this.constructor.name}`);\n\t}\n\n\n\n\t_serialize_c3r() {\n\t\tthrow new Error(`Write event type 'c3r' should have been implemented by subclass ${this.constructor.name}`);\n\t}\n\n\t_serialize_quad() {\n\t\tthrow new Error(`Write event type 'quad' should have been implemented by subclass ${this.constructor.name}`);\n\t}\n\n\n\t// ignorable events\n\t_serialize_comment() {}  // eslint-disable-line class-methods-use-this\n\n\t// update prefix mappings\n\t_update_prefixes(h_prefixes_in, b_terse=false) {\n\t\t// merge prefixes\n\t\tlet h_prefixes = {\n\t\t\t...this._h_prefixes,\n\t\t\t...h_prefixes_in,\n\t\t};\n\n\t\t// recache prefixes\n\t\tthis._h_prefixes = factory.cachePrefixes(h_prefixes || {}, b_terse);\n\t}\n\n\t// implement stream.Transform\n\t_transform(g_event, s_encoding, fke_transform) {\n\t\tlet w_write;\n\n\t\t// try to serialize input value\n\t\ttry {\n\t\t\tw_write = this.serialize(g_event);\n\t\t}\n\t\t// serialization error\n\t\tcatch(e_serialize) {\n\t\t\t// report error\n\t\t\tfke_transform(e_serialize);\n\n\t\t\t// bail on transform\n\t\t\treturn e_serialize;\n\t\t}\n\n\t\t// data to push\n\t\tif(w_write) {\n\t\t\t// flush internal buffer\n\t\t\tScribable._flush_buffer(this);\n\n\t\t\t// push data to stream\n\t\t\tthis.push(w_write);\n\t\t}\n\t\t// nothing returned from serialization\n\t\telse {\n\t\t\tlet nl_push = this._s_push.length;\n\n\t\t\t// internal buffer high water mark\n\t\t\tif(nl_push > this._n_max_buffer) {\n\t\t\t\tScribable._flush_buffer(this);\n\t\t\t}\n\t\t\t// allow buffer to build\n\t\t\telse if(nl_push) {\n\t\t\t\t// do not worry about clearing timeouts\n\t\t\t\tqueueMicrotask(() => Scribable._flush_buffer(this));\n\t\t\t}\n\t\t}\n\n\t\t// callback\n\t\tfke_transform();\n\t}\n\n\t// queue data to be pushed later\n\t_queue(s_push) {\n\t\tthis._s_push += s_push;\n\n\t\t// internal buffer high water mark\n\t\tif(this._s_push.length > this._n_max_buffer) {\n\t\t\tScribable._flush_buffer(this);\n\t\t}\n\t\telse {\n\t\t\t// do not worry about clearing timeouts\n\t\t\tqueueMicrotask(() => Scribable._flush_buffer(this));\n\t\t}\n\t}\n\n\t// route event object to serialization method\n\tserialize(g_event) {\n\t\tswitch(g_event.type) {\n\t\t\t// rdfjs quad\n\t\t\t// eslint-disable-next-line no-undefined\n\t\t\tcase undefined: return this._serialize_quad(g_event);\n\n\t\t\t// concise triple struct strict-mode\n\t\t\tcase 'c3r': return this._serialize_c3r(g_event.value);\n\n\t\t\t// concise quad struct strict-mode\n\t\t\tcase 'c4r': return this._serialize_c4r(g_event.value);\n\n\t\t\t// array of events\n\t\t\tcase 'array': {\n\t\t\t\t// string building\n\t\t\t\tlet s_write = '';\n\n\t\t\t\t// each subevent\n\t\t\t\tfor(let g_sub of g_event.value) {\n\t\t\t\t\t// build serialization string\n\t\t\t\t\tlet s_push = this.serialize(g_sub);\n\n\t\t\t\t\t// something to push\n\t\t\t\t\tif(s_push) {\n\t\t\t\t\t\ts_write += s_push;\n\t\t\t\t\t}\n\t\t\t\t\t// push was queued\n\t\t\t\t\telse if(this._s_push) {\n\t\t\t\t\t\t// concat to write\n\t\t\t\t\t\ts_write += this._s_push;\n\n\t\t\t\t\t\t// reset push\n\t\t\t\t\t\tthis._s_push = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// all done\n\t\t\t\treturn s_write;\n\t\t\t}\n\n\t\t\t// quad\n\t\t\tcase 'quad': return this._serialize_quad(g_event.value);\n\n\t\t\t// concise triple struct\n\t\t\tcase 'c3': return this._serialize_c3(g_event.value);\n\n\t\t\t// concise quad struct\n\t\t\tcase 'c4': return this._serialize_c4(g_event.value);\n\n\t\t\t// prefixes\n\t\t\tcase 'prefixes': {\n\t\t\t\treturn this._serialize_prefixes(g_event.value);\n\t\t\t}\n\n\t\t\t// comment\n\t\t\tcase 'comment': {\n\t\t\t\treturn this._serialize_comment(g_event.value);\n\t\t\t}\n\n\t\t\t// newline(s)\n\t\t\tcase 'newline':\n\t\t\tcase 'newlines': {\n\t\t\t\treturn this._serialize_newlines(g_event.value);\n\t\t\t}\n\n\t\t\t// no such event type\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`no such writable data event type for RDF stream: '${g_event.type}'`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// rinse off buffer to writable\n\trinse() {\n\t\tthis._reset();\n\t\tScribable._flush_buffer(this);\n\t}\n\n\t_flush() {\n\t\t// flush buffer\n\t\tScribable._flush_buffer(this);\n\n\t\t// eof\n\t\tthis.push(null);\n\t}\n}\n\nObject.assign(Scribable.prototype, {\n\tisGraphyWritable: true,\n\t_serialize_prefixes: Scribable.prototype._update_prefixes,\n});\n\nmodule.exports = Scribable;\n"],"names":["dp_resolve","fk","e_callback","factory","require$$0","stream","require$$1","N_DEFAULT_MAX_BUFFER","Scribable","k_self","gc_scribable","h_prefixes","ds_src","s_prefix_id","p_iri","s_comment","n_newlines","hc4r_quads","a_unions","s_write","sc1_graph","s_warning","sc1","h_prefixes_in","b_terse","g_event","s_encoding","fke_transform","w_write","e_serialize","nl_push","s_push","g_sub","main"],"mappings":"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","x_google_ignoreList":[0]}