{"version":3,"file":"js/404.d30190fb.js","mappings":"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","sources":["webpack://@zazuko/spex/./node_modules/@graphy/core.class.scribable/main.js","webpack://@zazuko/spex/./node_modules/@graphy/core.class.writable/main.js","webpack://@zazuko/spex/./node_modules/@graphy/core.iso.stream/main.js"],"sourcesContent":["\n\n\n// queueMicrotask shim\n{\n\t// not defined or not a function\n\tif('function' !== typeof queueMicrotask) {\n\t\t// create resolved promise\n\t\tlet dp_resolve = Promise.resolve();\n\n\t\t// try to redefine\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tqueueMicrotask = fk => dp_resolve.then(fk)\n\t\t\t\t.catch(e_callback => setTimeout(() => {\n\t\t\t\t\tthrow e_callback;\n\t\t\t\t}, 0));\n\t\t}\n\t\t// oh well, at least we tried\n\t\tcatch(e_define) {}\n\t}\n}\n\n\nconst factory = require('@graphy/core.data.factory');\nconst stream = require('@graphy/core.iso.stream');\n\n\n// max string buffer size\nconst N_DEFAULT_MAX_BUFFER = 1 << 15;  // 32 KiB\n\n\nclass Scribable extends stream.Transform {\n\t// flush buffer\n\tstatic _flush_buffer(k_self) {\n\t\t// no buffer; exit\n\t\tif(!k_self._s_push) return;\n\n\t\t// push buffer to stream\n\t\tk_self.push(k_self._s_push);\n\n\t\t// reset buffer\n\t\tk_self._s_push = '';\n\t}\n\n\tconstructor(gc_scribable={}) {\n\t\tsuper({\n\t\t\twritableObjectMode: true,\n\t\t\treadableObjectMode: false,\n\t\t});\n\n\t\tlet {\n\t\t\tprefixes: h_prefixes={},\n\t\t} = gc_scribable;\n\n\t\t// internal buffer\n\t\tthis._s_push = '';\n\n\t\t// max buffer length\n\t\tthis._n_max_buffer = gc_scribable.max_buffer || gc_scribable.maxBuffer || N_DEFAULT_MAX_BUFFER;\n\n\t\t// prefixes\n\t\tthis._h_prefixes = factory.cache_prefixes(h_prefixes || {});\n\n\t\t// on new source(s)\n\t\tthis.on('pipe', (ds_src) => {\n\t\t\t// listen for prefix events\n\t\t\tds_src.on('prefix', (s_prefix_id, p_iri) => {\n\t\t\t\tthis.write({\n\t\t\t\t\ttype: 'prefixes',\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\t[s_prefix_id]: p_iri,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// listen for comment events\n\t\t\tds_src.on('comment', (s_comment) => {\n\t\t\t\tthis.write({\n\t\t\t\t\ttype: 'comment',\n\t\t\t\t\tvalue: s_comment,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// bind event listeners\n\t\tif(gc_scribable.close) this.once('close', gc_scribable.close);\n\t\tif(gc_scribable.drain) this.on('drain', gc_scribable.drain);\n\t\tif(gc_scribable.error) this.on('error', gc_scribable.error);\n\t\tif(gc_scribable.finish) this.once('finish', gc_scribable.finish);\n\t\tif(gc_scribable.data) this.on('data', gc_scribable.data);\n\t\tif(gc_scribable.end) this.once('end', gc_scribable.end);\n\t\tif(gc_scribable.warning) this.on('warning', gc_scribable.warning);\n\t}\n\n\t_serialize_hash_comment(s_comment) {\n\t\treturn '# '+s_comment.replace(/\\n/g, '\\n# ')+'\\n';\n\t}\n\n\t_serialize_newlines(n_newlines=1) {\n\t\treturn '\\n'.repeat(n_newlines);\n\t}\n\n\t_serialize_c4r(hc4r_quads) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet a_unions = [];\n\t\tlet s_write = '';\n\n\t\t// each graph in quads hash\n\t\tfor(let sc1_graph in hc4r_quads) {\n\t\t\t// non-default graph; union from dataset\n\t\t\tif('*' !== sc1_graph) a_unions.push(sc1_graph);\n\n\t\t\t// add all quads from graph\n\t\t\ts_write += this._serialize_c3r(hc4r_quads[sc1_graph]);\n\t\t}\n\n\t\t// a union was performed\n\t\tif(a_unions.length) {\n\t\t\t// warn about implicit union\n\t\t\tlet s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => factory.c1(sc1, h_prefixes).verbose()).join(', ')}`;\n\n\t\t\t// emit warning, wasn't listened to; force thru warn/stderr channel\n\t\t\tif(!this.emit('warning', s_warning)) {\n\t\t\t\tconsole.warn(s_warning);\n\t\t\t}\n\t\t}\n\n\t\treturn s_write;\n\t}\n\n\n\t_serialize_c3() {\n\t\tthrow new Error(`Write event type 'c3' not supported by ${this.constructor.name}`);\n\t}\n\n\t_serialize_c4() {\n\t\tthrow new Error(`Write event type 'c4' not supported by ${this.constructor.name}`);\n\t}\n\n\n\n\t_serialize_c3r() {\n\t\tthrow new Error(`Write event type 'c3r' should have been implemented by subclass ${this.constructor.name}`);\n\t}\n\n\t_serialize_quad() {\n\t\tthrow new Error(`Write event type 'quad' should have been implemented by subclass ${this.constructor.name}`);\n\t}\n\n\n\t// ignorable events\n\t_serialize_comment() {}  // eslint-disable-line class-methods-use-this\n\n\t// update prefix mappings\n\t_update_prefixes(h_prefixes_in, b_terse=false) {\n\t\t// merge prefixes\n\t\tlet h_prefixes = {\n\t\t\t...this._h_prefixes,\n\t\t\t...h_prefixes_in,\n\t\t};\n\n\t\t// recache prefixes\n\t\tthis._h_prefixes = factory.cachePrefixes(h_prefixes || {}, b_terse);\n\t}\n\n\t// implement stream.Transform\n\t_transform(g_event, s_encoding, fke_transform) {\n\t\tlet w_write;\n\n\t\t// try to serialize input value\n\t\ttry {\n\t\t\tw_write = this.serialize(g_event);\n\t\t}\n\t\t// serialization error\n\t\tcatch(e_serialize) {\n\t\t\t// report error\n\t\t\tfke_transform(e_serialize);\n\n\t\t\t// bail on transform\n\t\t\treturn e_serialize;\n\t\t}\n\n\t\t// data to push\n\t\tif(w_write) {\n\t\t\t// flush internal buffer\n\t\t\tScribable._flush_buffer(this);\n\n\t\t\t// push data to stream\n\t\t\tthis.push(w_write);\n\t\t}\n\t\t// nothing returned from serialization\n\t\telse {\n\t\t\tlet nl_push = this._s_push.length;\n\n\t\t\t// internal buffer high water mark\n\t\t\tif(nl_push > this._n_max_buffer) {\n\t\t\t\tScribable._flush_buffer(this);\n\t\t\t}\n\t\t\t// allow buffer to build\n\t\t\telse if(nl_push) {\n\t\t\t\t// do not worry about clearing timeouts\n\t\t\t\tqueueMicrotask(() => Scribable._flush_buffer(this));\n\t\t\t}\n\t\t}\n\n\t\t// callback\n\t\tfke_transform();\n\t}\n\n\t// queue data to be pushed later\n\t_queue(s_push) {\n\t\tthis._s_push += s_push;\n\n\t\t// internal buffer high water mark\n\t\tif(this._s_push.length > this._n_max_buffer) {\n\t\t\tScribable._flush_buffer(this);\n\t\t}\n\t\telse {\n\t\t\t// do not worry about clearing timeouts\n\t\t\tqueueMicrotask(() => Scribable._flush_buffer(this));\n\t\t}\n\t}\n\n\t// route event object to serialization method\n\tserialize(g_event) {\n\t\tswitch(g_event.type) {\n\t\t\t// rdfjs quad\n\t\t\t// eslint-disable-next-line no-undefined\n\t\t\tcase undefined: return this._serialize_quad(g_event);\n\n\t\t\t// concise triple struct strict-mode\n\t\t\tcase 'c3r': return this._serialize_c3r(g_event.value);\n\n\t\t\t// concise quad struct strict-mode\n\t\t\tcase 'c4r': return this._serialize_c4r(g_event.value);\n\n\t\t\t// array of events\n\t\t\tcase 'array': {\n\t\t\t\t// string building\n\t\t\t\tlet s_write = '';\n\n\t\t\t\t// each subevent\n\t\t\t\tfor(let g_sub of g_event.value) {\n\t\t\t\t\t// build serialization string\n\t\t\t\t\tlet s_push = this.serialize(g_sub);\n\n\t\t\t\t\t// something to push\n\t\t\t\t\tif(s_push) {\n\t\t\t\t\t\ts_write += s_push;\n\t\t\t\t\t}\n\t\t\t\t\t// push was queued\n\t\t\t\t\telse if(this._s_push) {\n\t\t\t\t\t\t// concat to write\n\t\t\t\t\t\ts_write += this._s_push;\n\n\t\t\t\t\t\t// reset push\n\t\t\t\t\t\tthis._s_push = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// all done\n\t\t\t\treturn s_write;\n\t\t\t}\n\n\t\t\t// quad\n\t\t\tcase 'quad': return this._serialize_quad(g_event.value);\n\n\t\t\t// concise triple struct\n\t\t\tcase 'c3': return this._serialize_c3(g_event.value);\n\n\t\t\t// concise quad struct\n\t\t\tcase 'c4': return this._serialize_c4(g_event.value);\n\n\t\t\t// prefixes\n\t\t\tcase 'prefixes': {\n\t\t\t\treturn this._serialize_prefixes(g_event.value);\n\t\t\t}\n\n\t\t\t// comment\n\t\t\tcase 'comment': {\n\t\t\t\treturn this._serialize_comment(g_event.value);\n\t\t\t}\n\n\t\t\t// newline(s)\n\t\t\tcase 'newline':\n\t\t\tcase 'newlines': {\n\t\t\t\treturn this._serialize_newlines(g_event.value);\n\t\t\t}\n\n\t\t\t// no such event type\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`no such writable data event type for RDF stream: '${g_event.type}'`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// rinse off buffer to writable\n\trinse() {\n\t\tthis._reset();\n\t\tScribable._flush_buffer(this);\n\t}\n\n\t_flush() {\n\t\t// flush buffer\n\t\tScribable._flush_buffer(this);\n\n\t\t// eof\n\t\tthis.push(null);\n\t}\n}\n\nObject.assign(Scribable.prototype, {\n\tisGraphyWritable: true,\n\t_serialize_prefixes: Scribable.prototype._update_prefixes,\n});\n\nmodule.exports = Scribable;\n","\n\n\nconst factory = require('@graphy/core.data.factory');\nconst Scribable = require('@graphy/core.class.scribable');\n\nconst R_DIRECTIVE_CONTENTS = /^`\\[[^\\]]+\\](.*)$/;\n\nconst HM_COERCIONS_DEFAULT = new Map([\n\t[Date, dt => factory.dateTime(dt)],\n\t[Number, x => factory.number(x)],\n]);\n\nclass Writable extends Scribable {\n\tconstructor(gc_writable={}) {\n\t\tsuper(gc_writable);\n\n\t\tlet {\n\t\t\tlists: gc_lists=null,\n\t\t} = gc_writable;\n\n\t\t// start with default coercions map\n\t\tlet hm_coercions = HM_COERCIONS_DEFAULT;\n\n\t\t// user is overriding coercions\n\t\tif(gc_writable.coercions) {\n\t\t\t// copy default map\n\t\t\thm_coercions = new Map(hm_coercions);\n\n\t\t\t// add each entry from user-defined map\n\t\t\tfor(let [dc_type, f_transform] of gc_writable.coercions) {\n\t\t\t\thm_coercions.set(dc_type, f_transform);\n\t\t\t}\n\t\t}\n\n\t\t// lists\n\t\tlet g_lists = {\n\t\t\tfirst: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#first',\n\t\t\trest: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#rest',\n\t\t\tnil: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',\n\t\t};\n\n\t\t// custom transcoder\n\t\tif(gc_lists) {\n\t\t\tlet {\n\t\t\t\tfirst: sc1_first=null,\n\t\t\t\trest: sc1_rest=null,\n\t\t\t\tnil: sc1_nil=null,\n\t\t\t} = gc_lists;\n\n\t\t\tif(sc1_first) g_lists.first = sc1_first;\n\t\t\tif(sc1_rest) g_lists.rest = sc1_rest;\n\t\t\tif(sc1_nil) g_lists.nil = sc1_nil;\n\t\t}\n\n\t\tObject.assign(this, {\n\t\t\t_xc_state: 0,\n\t\t\t_hm_coercions: hm_coercions,\n\t\t\t_g_lists: g_lists,\n\t\t});\n\t}\n\n\t// serialize comment\n\t_serialize_comment(s_comment, g_directive) {\n\t\tlet s_write = '';\n\n\t\t// non-data state\n\t\tif(2 !== this._xc_state) {\n\t\t\t// break line\n\t\t\ts_write += '\\n';\n\n\t\t\t// update state\n\t\t\tthis._xc_state = 2;\n\t\t}\n\n\t\t// comment width\n\t\tif(g_directive && g_directive.width) {\n\t\t\tlet n_width = g_directive.width;\n\n\t\t\tlet a_lines = [];\n\n\t\t\twhile(s_comment.length > n_width) {\n\t\t\t\tlet s_line = s_comment.slice(0, n_width+1);\n\n\t\t\t\tlet m_line = /^(.*[^\\s])\\s+/.exec(s_line);\n\n\t\t\t\tif(m_line) {\n\t\t\t\t\tlet s_push = m_line[1];\n\t\t\t\t\ta_lines.push(s_push);\n\t\t\t\t\ts_comment = s_comment.slice(s_push.length).replace(/^\\s+/, '');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta_lines.push(s_comment.slice(0, n_width));\n\t\t\t\t\ts_comment = s_comment.slice(n_width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ts_comment = a_lines.join('\\n');\n\t\t}\n\n\t\treturn s_write+(super._serialize_comment(s_comment) || '');\n\t}\n\n\n\t// transcode list into concise-pairs hash\n\t_transcode_list(a_list, g_lists=this._g_lists) {\n\t\t// empty list\n\t\tif(!a_list.length) {\n\t\t\treturn g_lists.nil;\n\t\t}\n\t\t// non-empty list\n\t\telse {\n\t\t\tlet z_item = a_list[0];\n\t\t\tlet w_first = z_item;\n\n\t\t\t// item is nested list; transcode\n\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\tw_first = this._transcode_list(z_item, g_lists);  // eslint-disable-line no-invalid-this\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// first item\n\t\t\t\t[g_lists.first]: w_first,\n\n\t\t\t\t// rest of items\n\t\t\t\t[g_lists.rest]: 1 === a_list.length\n\t\t\t\t\t? g_lists.nil\n\t\t\t\t\t: this._transcode_list(a_list.slice(1), g_lists),  // eslint-disable-line no-invalid-this\n\t\t\t};\n\t\t}\n\t}\n\n\t// serialize a writable data event directive\n\t_apply_directive(sc1_directive, w_value) {\n\t\t// directive contents\n\t\tlet m_directive = R_DIRECTIVE_CONTENTS.exec(sc1_directive);\n\t\tif(!m_directive) {\n\t\t\tthrow new Error(`Invalid writable data event directive string: \"${sc1_directive}\"`);\n\t\t}\n\n\t\t// parse as JSON\n\t\tlet g_directive;\n\t\ttry {\n\t\t\tg_directive = JSON.parse(m_directive[1]);\n\t\t}\n\t\tcatch(e_parse) {\n\t\t\tthrow new Error(`Unable to parse JSON in writable data event directive: \"${m_directive[1]}\"`);\n\t\t}\n\n\t\t// directive type\n\t\tlet s_type = g_directive.type;\n\n\t\t// deduce directive type\n\t\tswitch(s_type) {\n\t\t\t// comment\n\t\t\tcase 'comment': {\n\t\t\t\t// serializer supports commenting; serialize comment\n\t\t\t\tif(this._serialize_comment) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twrite: this._serialize_comment(w_value+'', g_directive),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// newlines\n\t\t\tcase 'newlines': {\n\t\t\t\t// serializer supports newlines; serialize newlines\n\t\t\t\tif(this._serialize_newlines) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twrite: this._serialize_newlines(w_value),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// config\n\t\t\tcase 'config': {\n\t\t\t\tswitch(g_directive.value) {\n\t\t\t\t\t// list config\n\t\t\t\t\tcase 'lists': {\n\t\t\t\t\t\t// ref stack of list serializers\n\t\t\t\t\t\tlet a_list_serializers = this._a_list_serializers;\n\n\t\t\t\t\t\t// push current method to stack\n\t\t\t\t\t\ta_list_serializers.push(this._serialize_list_object);\n\n\t\t\t\t\t\t// inherit unspecified keys from parent\n\t\t\t\t\t\tlet g_list_default = this._g_lists;\n\n\t\t\t\t\t\t// build list config\n\t\t\t\t\t\tlet g_lists = {\n\t\t\t\t\t\t\tfirst: w_value.first || g_list_default.first,\n\t\t\t\t\t\t\trest: w_value.rest || g_list_default.rest,\n\t\t\t\t\t\t\tnil: w_value.nil || g_list_default.nil,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// redefine list object serialization\n\t\t\t\t\t\tthis._serialize_list_object = function(a_list, n_nest_level) {\n\t\t\t\t\t\t\t// transcode list object\n\t\t\t\t\t\t\tlet hc2_transcoded = this._transcode_list(a_list, g_lists);\n\n\t\t\t\t\t\t\t// serialize object\n\t\t\t\t\t\t\treturn this._encode_objects(hc2_transcoded, n_nest_level);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// return local directive instructions\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\texit: () => {\n\t\t\t\t\t\t\t\tthis._serialize_list_object = a_list_serializers.pop();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// no such key\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tthrow new Error(`No such config key '${g_directive.value}'`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// other\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`Invalid writable data event directive type: '${s_type}'`);\n\t\t\t}\n\t\t}\n\n\t\t// nothing\n\t\treturn {};\n\t}\n\n\t// if not overriden by subclass, serialize quads in default graph\n\t_serialize_c4(hc4_quads) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet a_unions = [];\n\t\tlet s_write = '';\n\n\t\t// each graph in quads hash\n\t\tfor(let sv1_graph in hc4_quads) {\n\t\t\t// non-default graph; union from dataset\n\t\t\tif('*' !== sv1_graph) a_unions.push(sv1_graph);\n\n\t\t\t// add all quads from graph\n\t\t\ts_write += this._serialize_c3(hc4_quads[sv1_graph]);\n\t\t}\n\n\t\t// a union was performed\n\t\tif(a_unions.length) {\n\t\t\t// warn about implicit union\n\t\t\tlet s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => factory.c1(sc1, h_prefixes).verbose()).join(', ')}`;\n\n\t\t\t// emit warning, wasn't listened to; force thru warn/stderr channel\n\t\t\tif(!this.emit('warning', s_warning)) {\n\t\t\t\tconsole.warn(s_warning);\n\t\t\t}\n\t\t}\n\n\t\treturn s_write;\n\t}\n}\n\nmodule.exports = Writable;\n","const stream = require('readable-stream');\n\n\n\nclass Readable extends stream.Readable {\n\tconstructor(gc_readable={}) {\n\t\tsuper(gc_readable);\n\n\t\t// use iterator\n\t\tif(gc_readable.iterator) {\n\t\t\tthrow new Error('readable stream iterator shortcut not yet implemented');\n\t\t}\n\t}\n\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass Writable extends stream.Writable {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\t// rdfjs impl\n\timport(ds_source) {\n\t\tds_source\n\t\t\t.on('data', w_chunk => this.write(w_chunk))\n\t\t\t.on('end', () => this.end())\n\t\t\t.on('error', e_read => this.emit('error', e_read));\n\n\t\treturn this;\n\t}\n}\n\nclass Duplex extends stream.Duplex {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass Transform extends stream.Transform {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t// rdfjs impl\n\timport(ds_source) {\n\t\tds_source\n\t\t\t.on('data', w_chunk => this.write(w_chunk))\n\t\t\t.on('end', () => this.end())\n\t\t\t.on('error', e_read => this.emit('error', e_read));\n\n\t\treturn this;\n\t}\n\n\tdemolish(e_destroy) {\n\t\t// do not allow to push\n\t\tthis.push = (z_chunk) => {\n\t\t\t// ignore eof signals from node core\n\t\t\tif(null === z_chunk) return;\n\n\t\t\t// anything else is bad\n\t\t\tthrow new Error(`[ERR_STREAM_DESTROYED]: Cannot push after stream was destroyed`);\n\t\t};\n\n\t\t// do not allow to emit 'end'\n\t\tthis.emit = function(s_event, ...a_args) {\n\t\t\tif('end' === s_event) return;\n\n\t\t\tObject.getPrototypeOf(this).emit.apply(this, [s_event, ...a_args]);\n\t\t};\n\n\t\t// an error was given, destroy the stream as well\n\t\tif(e_destroy) {\n\t\t\treturn stream.Transform.prototype.destroy.call(this, e_destroy);\n\t\t}\n\t}\n}\n\n// eslint-disable-next-line no-new-func\nconst b_is_node = (new Function(/* syntax: js */ `try {return this===global;}catch(e){return false;}`))();\n\n// deduce the runtime environment\nconst [B_BROWSER, B_BROWSERIFY] = (() => 'undefined' === typeof process\n\t? [true, false]\n\t: (process.browser\n\t\t? [true, true]\n\t\t: ('undefined' === process.versions || 'undefined' === process.versions.node\n\t\t\t? [true, false]\n\t\t\t: [false, false])))();\n\n// node.js or browserify; patch for node < v10\nif(B_BROWSERIFY || (b_is_node && (+(/^v(\\d+)/.exec(process.version)[1])) < 10)) {\n\t// override destroy methods\n\tTransform.prototype.destroy = Duplex.prototype.destroy = function(e_destroy, fke_destroy) {\n\t\tthis._readableState.destroyed = true;\n\t\tthis._writableState.destroyed = true;\n\n\t\tlet f_emit_close = () => {\n\t\t\tif(!this._writableState.emitClose) return;\n\t\t\tif(!this._readableState.emitClose) return;\n\t\t\tthis.emit('close');\n\t\t};\n\n\t\tthis._destroy(e_destroy || null, (e_destroy_re) => {\n\t\t\tif(!fke_destroy && e_destroy_re) {\n\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\tthis.emit('error', e_destroy_re);\n\t\t\t\t\tf_emit_close();\n\t\t\t\t});\n\t\t\t\tthis._writableState.errorEmitted = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocess.nextTick(f_emit_close);\n\t\t\t\tif(fke_destroy) fke_destroy(e_destroy_re);\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t};\n\n\t// override default _destroy implementations\n\tTransform.prototype._destroy = Duplex.prototype._destroy = (e_destroy, fke_destroy) => fke_destroy(e_destroy);\n}\n\nclass QuadsToOther extends Transform {\n\tconstructor(gc_transform={}) {\n\t\tsuper({\n\t\t\t...gc_transform,\n\t\t\twritableObjectMode: true,\n\t\t\treadableObjectMode: true,\n\t\t});\n\n\t\tthis._as_inputs = new Set();\n\n\t\t// forward prefix and comment events\n\t\tthis.on('pipe', (ds_src) => {\n\t\t\tthis._as_inputs.add(ds_src);\n\n\t\t\tds_src\n\t\t\t\t.on('prefix', (...a_args) => {\n\t\t\t\t\tthis.emit('prefix', ...a_args);\n\t\t\t\t})\n\t\t\t\t.on('comment', (...a_args) => {\n\t\t\t\t\tthis.emit('comment', ...a_args);\n\t\t\t\t});\n\t\t});\n\n\t\tthis.on('unpipe', (ds_src) => {\n\t\t\tthis._as_inputs.delete(ds_src);\n\t\t});\n\t}\n\n\t_destroy() {\n\t\tfor(let ds_input of this._as_inputs) {\n\t\t\tds_input.destroy();\n\t\t}\n\t}\n}\n\nclass Quads_To_JSON_Transform extends QuadsToOther {\n\t// serializse json\n\t_transform(g_quad, s_encoding, fk_transform) {\n\t\tfk_transform(null, JSON.stringify(g_quad.isolate())+'\\n');\n\t}\n}\n\nclass Quads_To_Writable extends QuadsToOther {\n\t_transform(g_quad, s_encoding, fk_transform) {\n\t\tfk_transform(null, {\n\t\t\ttype: 'quad',\n\t\t\tvalue: g_quad,\n\t\t});\n\t}\n}\n\nTransform.QuadsToOther = QuadsToOther;\n\nmodule.exports = {\n\t...stream,\n\tReadable,\n\tWritable,\n\tDuplex,\n\tTransform,\n\n\tQuadsToOther,\n\n\t// create a transform from quad objects into JSON strings for trivial serialization\n\tquads_to_json() {\n\t\treturn new Quads_To_JSON_Transform();\n\t},\n\n\t// create a transform from quad objects into writable data events\n\tquads_to_writable() {\n\t\treturn new Quads_To_Writable();\n\t},\n\n\t// create a simple, single-event readable stream\n\tsource(w_push, s_encoding=null) {\n\t\t// encoding not explicit, string given; assume utf8\n\t\tif(!s_encoding && 'string' === typeof w_push) s_encoding = 'utf8';\n\n\t\t// readable\n\t\treturn new Readable({\n\t\t\tobjectMode: !s_encoding && 'string' !== typeof w_push && !Buffer.isBuffer(w_push),\n\n\t\t\tread() {\n\t\t\t\tthis.push(w_push, s_encoding);\n\t\t\t\tthis.push(null);\n\t\t\t},\n\t\t});\n\t},\n};\n"],"names":["queueMicrotask","dp_resolve","Promise","resolve","fk","then","catch","e_callback","setTimeout","e_define","factory","stream","N_DEFAULT_MAX_BUFFER","Scribable","Transform","static","k_self","_s_push","push","constructor","gc_scribable","super","writableObjectMode","readableObjectMode","prefixes","h_prefixes","this","_n_max_buffer","max_buffer","maxBuffer","_h_prefixes","cache_prefixes","on","ds_src","s_prefix_id","p_iri","write","type","value","s_comment","close","once","drain","error","finish","data","end","warning","_serialize_hash_comment","replace","_serialize_newlines","n_newlines","repeat","_serialize_c4r","hc4r_quads","a_unions","s_write","sc1_graph","_serialize_c3r","length","s_warning","map","sc1","c1","verbose","join","emit","console","warn","_serialize_c3","Error","name","_serialize_c4","_serialize_quad","_serialize_comment","_update_prefixes","h_prefixes_in","b_terse","cachePrefixes","_transform","g_event","s_encoding","fke_transform","w_write","serialize","e_serialize","_flush_buffer","nl_push","_queue","s_push","undefined","g_sub","_serialize_prefixes","rinse","_reset","_flush","Object","assign","prototype","isGraphyWritable","module","exports","R_DIRECTIVE_CONTENTS","HM_COERCIONS_DEFAULT","Map","Date","dt","dateTime","Number","x","number","Writable","gc_writable","lists","gc_lists","hm_coercions","coercions","dc_type","f_transform","set","g_lists","first","rest","nil","sc1_first","sc1_rest","sc1_nil","_xc_state","_hm_coercions","_g_lists","g_directive","width","n_width","a_lines","s_line","slice","m_line","exec","_transcode_list","a_list","z_item","w_first","Array","isArray","_apply_directive","sc1_directive","w_value","m_directive","JSON","parse","e_parse","s_type","a_list_serializers","_a_list_serializers","_serialize_list_object","g_list_default","n_nest_level","hc2_transcoded","_encode_objects","exit","pop","hc4_quads","sv1_graph","Readable","gc_readable","iterator","until","s_event","b_return_stream","fk_until","fe_until","e_stream","a_args","bucket","g_readable","_readableState","objectMode","fk_bucket","fe_bucket","a_data","pipe","w_event","s_write_encoding","fk_write","writev","a_chunks","fk_writev","s_data","setEncoding","decodeStrings","s_chunk","ab_data","Buffer","from","ab_chunk","concat","import","ds_source","w_chunk","e_read","Duplex","demolish","e_destroy","z_chunk","getPrototypeOf","apply","destroy","call","b_is_node","Function","B_BROWSER","B_BROWSERIFY","process","browser","versions","node","version","fke_destroy","destroyed","_writableState","f_emit_close","emitClose","_destroy","e_destroy_re","nextTick","errorEmitted","QuadsToOther","gc_transform","_as_inputs","Set","add","delete","ds_input","Quads_To_JSON_Transform","g_quad","fk_transform","stringify","isolate","Quads_To_Writable","quads_to_json","quads_to_writable","source","w_push","isBuffer","read"],"sourceRoot":""}