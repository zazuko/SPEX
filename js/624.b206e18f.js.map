{"version":3,"file":"js/624.b206e18f.js","mappings":"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","sources":["webpack://@zazuko/spex/./node_modules/@rdfjs/parser-jsonld/index.js","webpack://@zazuko/spex/./node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js","webpack://@zazuko/spex/./node_modules/canonicalize/lib/canonicalize.js","webpack://@zazuko/spex/./node_modules/cross-fetch/dist/browser-polyfill.js","webpack://@zazuko/spex/./node_modules/http-link-header/lib/link.js","webpack://@zazuko/spex/./node_modules/jsonld-context-parser/index.js","webpack://@zazuko/spex/./node_modules/jsonld-context-parser/lib/ContextParser.js","webpack://@zazuko/spex/./node_modules/jsonld-context-parser/lib/ErrorCoded.js","webpack://@zazuko/spex/./node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js","webpack://@zazuko/spex/./node_modules/jsonld-context-parser/lib/IDocumentLoader.js","webpack://@zazuko/spex/./node_modules/jsonld-context-parser/lib/JsonLdContext.js","webpack://@zazuko/spex/./node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js","webpack://@zazuko/spex/./node_modules/jsonld-context-parser/lib/Util.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/index.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/ContextTree.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/JsonLdParser.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/ParsingContext.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/Util.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js","webpack://@zazuko/spex/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js","webpack://@zazuko/spex/./node_modules/rdf-data-factory/index.js","webpack://@zazuko/spex/./node_modules/rdf-data-factory/lib/BlankNode.js","webpack://@zazuko/spex/./node_modules/rdf-data-factory/lib/DataFactory.js","webpack://@zazuko/spex/./node_modules/rdf-data-factory/lib/DefaultGraph.js","webpack://@zazuko/spex/./node_modules/rdf-data-factory/lib/Literal.js","webpack://@zazuko/spex/./node_modules/rdf-data-factory/lib/NamedNode.js","webpack://@zazuko/spex/./node_modules/rdf-data-factory/lib/Quad.js","webpack://@zazuko/spex/./node_modules/rdf-data-factory/lib/Variable.js","webpack://@zazuko/spex/./node_modules/relative-to-absolute-iri/index.js","webpack://@zazuko/spex/./node_modules/relative-to-absolute-iri/lib/Resolve.js"],"sourcesContent":["const Sink = require('@rdfjs/sink')\nconst ParserStream = require('./lib/ParserStream')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const rdf = require('@rdfjs/data-model')\nconst { JsonLdParser } = require('jsonld-streaming-parser')\nconst { Transform } = require('readable-stream')\n\nconst relativeIriProtocol = 'null:'\n\nfunction termCleanup (factory) {\n  return term => {\n    if (term.termType !== 'NamedNode') {\n      return null\n    }\n\n    if (!term.value.startsWith(relativeIriProtocol)) {\n      return null\n    }\n\n    // remove dummy protocol workaround for relative IRIs\n    return factory.namedNode(term.value.slice(relativeIriProtocol.length))\n  }\n}\n\nfunction quadCleanup (factory) {\n  const cleanup = termCleanup(factory)\n\n  return quad => {\n    const subject = cleanup(quad.subject)\n    const predicate = cleanup(quad.predicate)\n    const object = cleanup(quad.object)\n    const graph = cleanup(quad.graph)\n\n    if (subject || predicate || object || graph) {\n      return factory.quad(\n        subject || quad.subject,\n        predicate || quad.predicate,\n        object || quad.object,\n        graph || quad.graph\n      )\n    }\n\n    return quad\n  }\n}\n\nclass ParserStream {\n  constructor (input, { baseIRI = relativeIriProtocol, context = null, factory = rdf } = {}) {\n    const parser = new JsonLdParser({\n      baseIRI,\n      context,\n      dataFactory: factory,\n      streamingProfile: false\n    })\n\n    input.pipe(parser)\n\n    const cleanup = quadCleanup(factory)\n\n    const transform = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, cleanup(quad))\n      }\n    })\n\n    parser.on('context', context => {\n      Object.entries(context).forEach(([prefix, iri]) => {\n        transform.emit('prefix', prefix, factory.namedNode(iri))\n      })\n    })\n    parser.on('error', err => transform.destroy(err))\n    parser.pipe(transform)\n\n    return transform\n  }\n}\n\nmodule.exports = ParserStream\n","/* jshint esversion: 6 */\n/* jslint node: true */\n'use strict';\n\nmodule.exports = function serialize (object) {\n  if (object === null || typeof object !== 'object' || object.toJSON != null) {\n    return JSON.stringify(object);\n  }\n\n  if (Array.isArray(object)) {\n    return '[' + object.reduce((t, cv, ci) => {\n      const comma = ci === 0 ? '' : ',';\n      const value = cv === undefined || typeof cv === 'symbol' ? null : cv;\n      return t + comma + serialize(value);\n    }, '') + ']';\n  }\n\n  return '{' + Object.keys(object).sort().reduce((t, cv, ci) => {\n    if (object[cv] === undefined ||\n        typeof object[cv] === 'symbol') {\n      return t;\n    }\n    const comma = t.length === 0 ? '' : ',';\n    return t + comma + serialize(cv) + ':' + serialize(object[cv]);\n  }, '') + '}';\n};\n","(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(typeof self !== 'undefined' ? self : this);\n","'use strict'\n\nvar COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i\nvar WS_TRIM_PATTERN = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g\nvar WS_CHAR_PATTERN = /\\s|\\uFEFF|\\xA0/\nvar WS_FOLD_PATTERN = /\\r?\\n[\\x20\\x09]+/g\nvar DELIMITER_PATTERN = /[;,\"]/\nvar WS_DELIMITER_PATTERN = /[;,\"]|\\s/\n\n/**\n * Token character pattern\n * @type {RegExp}\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nvar TOKEN_PATTERN = /^[!#$%&'*+\\-\\.^_`|~\\da-zA-Z]+$/\n\nvar STATE = {\n  IDLE: 1 << 0,\n  URI: 1 << 1,\n  ATTR: 1 << 2,\n}\n\nfunction trim( value ) {\n  return value.replace( WS_TRIM_PATTERN, '' )\n}\n\nfunction hasWhitespace( value ) {\n  return WS_CHAR_PATTERN.test( value )\n}\n\nfunction skipWhitespace( value, offset ) {\n  while( hasWhitespace( value[offset] ) ) {\n    offset++\n  }\n  return offset\n}\n\nfunction needsQuotes( value ) {\n  return WS_DELIMITER_PATTERN.test( value ) ||\n    !TOKEN_PATTERN.test( value )\n}\n\n/**\n * Shallow compares two objects to check if their properties match.\n * @param {object} object1 First object to compare.\n * @param {object} object2 Second object to compare.\n * @returns {boolean} Do the objects have matching properties.\n */\nfunction shallowCompareObjects( object1, object2 ) {\n  return (\n    Object.keys( object1 ).length === Object.keys( object2 ).length &&\n    Object.keys( object1 ).every(\n      ( key ) => key in object2 && object1[ key ] === object2[ key ]\n    )\n  );\n}\n\nclass Link {\n\n  /**\n   * Link\n   * @constructor\n   * @param {String} [value]\n   * @returns {Link}\n   */\n  constructor( value ) {\n\n    /** @type {Array} URI references */\n    this.refs = []\n\n    if( value ) {\n      this.parse( value )\n    }\n\n  }\n\n  /**\n   * Get refs with given relation type\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  rel( value ) {\n\n    var links = []\n    var type = value.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ].rel.toLowerCase() === type ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  /**\n   * Get refs where given attribute has a given value\n   * @param {String} attr\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  get( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    var links = []\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  /** Sets a reference. */\n  set( link ) {\n    this.refs.push( link )\n    return this\n  }\n\n  /**\n   * Sets a reference if a reference with similar properties isn’t already set.\n   */\n  setUnique( link ) {\n\n    if( !this.refs.some(( ref ) => shallowCompareObjects( ref, link )) ) {\n      this.refs.push( link )\n    }\n\n    return this\n\n  }\n\n  has( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        return true\n      }\n    }\n\n    return false\n\n  }\n\n  parse( value, offset ) {\n\n    offset = offset || 0\n    value = offset ? value.slice( offset ) : value\n\n    // Trim & unfold folded lines\n    value = trim( value ).replace( WS_FOLD_PATTERN, '' )\n\n    var state = STATE.IDLE\n    var length = value.length\n    var offset = 0\n    var ref = null\n\n    while( offset < length ) {\n      if( state === STATE.IDLE ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === '<' ) {\n          if( ref != null ) {\n            ref.rel != null ?\n              this.refs.push( ...Link.expandRelations( ref ) ) :\n              this.refs.push( ref )\n          }\n          var end = value.indexOf( '>', offset )\n          if( end === -1 ) throw new Error( 'Expected end of URI delimiter at offset ' + offset )\n          ref = { uri: value.slice( offset + 1, end ) }\n          // this.refs.push( ref )\n          offset = end\n          state = STATE.URI\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n        offset++\n      } else if( state === STATE.URI ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === ';' ) {\n          state = STATE.ATTR\n          offset++\n        } else if( value[offset] === ',' ) {\n          state = STATE.IDLE\n          offset++\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n      } else if( state === STATE.ATTR ) {\n        if( value[offset] ===';' || hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        }\n        var end = value.indexOf( '=', offset )\n        if( end === -1 ) throw new Error( 'Expected attribute delimiter at offset ' + offset )\n        var attr = trim( value.slice( offset, end ) ).toLowerCase()\n        var attrValue = ''\n        offset = end + 1\n        offset = skipWhitespace( value, offset )\n        if( value[offset] === '\"' ) {\n          offset++\n          while( offset < length ) {\n            if( value[offset] === '\"' ) {\n              offset++; break\n            }\n            if( value[offset] === '\\\\' ) {\n              offset++\n            }\n            attrValue += value[offset]\n            offset++\n          }\n        } else {\n          var end = offset + 1\n          while( !DELIMITER_PATTERN.test( value[end] ) && end < length ) {\n            end++\n          }\n          attrValue = value.slice( offset, end )\n          offset = end\n        }\n        if( ref[ attr ] && Link.isSingleOccurenceAttr( attr ) ) {\n          // Ignore multiples of attributes which may only appear once\n        } else if( attr[ attr.length - 1 ] === '*' ) {\n          ref[ attr ] = Link.parseExtendedValue( attrValue )\n        } else {\n          attrValue = attr === 'type' ?\n            attrValue.toLowerCase() : attrValue\n          if( ref[ attr ] != null ) {\n            if( Array.isArray( ref[ attr ] ) ) {\n              ref[ attr ].push( attrValue )\n            } else {\n              ref[ attr ] = [ ref[ attr ], attrValue ]\n            }\n          } else {\n            ref[ attr ] = attrValue\n          }\n        }\n        switch( value[offset] ) {\n          case ',': state = STATE.IDLE; break\n          case ';': state = STATE.ATTR; break\n        }\n        offset++\n      } else {\n        throw new Error( 'Unknown parser state \"' + state + '\"' )\n      }\n    }\n\n    if( ref != null ) {\n      ref.rel != null ?\n        this.refs.push( ...Link.expandRelations( ref ) ) :\n        this.refs.push( ref )\n    }\n\n    ref = null\n\n    return this\n\n  }\n\n  toString() {\n\n    var refs = []\n    var link = ''\n    var ref = null\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      ref = this.refs[i]\n      link = Object.keys( this.refs[i] ).reduce( function( link, attr ) {\n        if( attr === 'uri' ) return link\n        return link + '; ' + Link.formatAttribute( attr, ref[ attr ] )\n      }, '<' + ref.uri + '>' )\n      refs.push( link )\n    }\n\n    return refs.join( ', ' )\n\n  }\n\n}\n\n/**\n * Determines whether an encoding can be\n * natively handled with a `Buffer`\n * @param {String} value\n * @returns {Boolean}\n */\nLink.isCompatibleEncoding = function( value ) {\n  return COMPATIBLE_ENCODING_PATTERN.test( value )\n}\n\nLink.parse = function( value, offset ) {\n  return new Link().parse( value, offset )\n}\n\nLink.isSingleOccurenceAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'media' ||\n    attr === 'title' || attr === 'title*'\n}\n\nLink.isTokenAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'anchor'\n}\n\nLink.escapeQuotes = function( value ) {\n  return value.replace( /\"/g, '\\\\\"' )\n}\n\nLink.expandRelations = function( ref ) {\n  var rels = ref.rel.split( ' ' )\n  return rels.map( function( rel ) {\n    var value = Object.assign( {}, ref )\n    value.rel = rel\n    return value\n  })\n}\n\n/**\n * Parses an extended value and attempts to decode it\n * @internal\n * @param {String} value\n * @return {Object}\n */\nLink.parseExtendedValue = function( value ) {\n  var parts = /([^']+)?(?:'([^']*)')?(.+)/.exec( value )\n  return {\n    language: parts[2].toLowerCase(),\n    encoding: Link.isCompatibleEncoding( parts[1] ) ?\n      null : parts[1].toLowerCase(),\n    value: Link.isCompatibleEncoding( parts[1] ) ?\n      decodeURIComponent( parts[3] ) : parts[3]\n  }\n}\n\n/**\n * Format a given extended attribute and it's value\n * @param {String} attr\n * @param {Object} data\n * @return {String}\n */\nLink.formatExtendedAttribute = function( attr, data ) {\n\n  var encoding = ( data.encoding || 'utf-8' ).toUpperCase()\n  var language = data.language || 'en'\n\n  var encodedValue = ''\n\n  if( Buffer.isBuffer( data.value ) && Link.isCompatibleEncoding( encoding ) ) {\n    encodedValue = data.value.toString( encoding )\n  } else if( Buffer.isBuffer( data.value ) ) {\n    encodedValue = data.value.toString( 'hex' )\n      .replace( /[0-9a-f]{2}/gi, '%$1' )\n  } else {\n    encodedValue = encodeURIComponent( data.value )\n  }\n\n  return attr + '=' + encoding + '\\'' +\n    language + '\\'' + encodedValue\n\n}\n\n/**\n * Format a given attribute and it's value\n * @param {String} attr\n * @param {String|Object} value\n * @return {String}\n */\nLink.formatAttribute = function( attr, value ) {\n\n  if( Array.isArray( value ) ) {\n    return value.map(( item ) => {\n      return Link.formatAttribute( attr, item )\n    }).join( '; ' )\n  }\n\n  if( attr[ attr.length - 1 ] === '*' || typeof value !== 'string' ) {\n    return Link.formatExtendedAttribute( attr, value )\n  }\n\n  if( Link.isTokenAttr( attr ) ) {\n    value = needsQuotes( value ) ?\n      '\"' + Link.escapeQuotes( value ) + '\"' :\n      Link.escapeQuotes( value )\n  } else if( needsQuotes( value ) ) {\n    value = encodeURIComponent( value )\n    // We don't need to escape <SP> <,> <;> within quotes\n    value = value\n      .replace( /%20/g, ' ' )\n      .replace( /%2C/g, ',' )\n      .replace( /%3B/g, ';' )\n\n    value = '\"' + value + '\"'\n  }\n\n  return attr + '=' + value\n\n}\n\nmodule.exports = Link\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/ContextParser\"), exports);\n__exportStar(require(\"./lib/ErrorCoded\"), exports);\n__exportStar(require(\"./lib/FetchDocumentLoader\"), exports);\n__exportStar(require(\"./lib/IDocumentLoader\"), exports);\n__exportStar(require(\"./lib/JsonLdContext\"), exports);\n__exportStar(require(\"./lib/JsonLdContextNormalized\"), exports);\n__exportStar(require(\"./lib/Util\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultExpandOptions = exports.ContextParser = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst FetchDocumentLoader_1 = require(\"./FetchDocumentLoader\");\nconst JsonLdContextNormalized_1 = require(\"./JsonLdContextNormalized\");\nconst Util_1 = require(\"./Util\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Parses JSON-LD contexts.\n */\nclass ContextParser {\n    constructor(options) {\n        options = options || {};\n        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();\n        this.documentCache = {};\n        this.validateContext = !options.skipValidation;\n        this.expandContentTypeToBase = !!options.expandContentTypeToBase;\n        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;\n        this.redirectSchemaOrgHttps = 'redirectSchemaOrgHttps' in options ? !!options.redirectSchemaOrgHttps : true;\n    }\n    /**\n     * Validate the given @language value.\n     * An error will be thrown if it is invalid.\n     * @param value An @language value.\n     * @param {boolean} strictRange If the string value should be strictly checked against a regex.\n     * @param {string} errorCode The error code to emit on errors.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateLanguage(value, strictRange, errorCode) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);\n        }\n        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {\n            if (strictRange) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate the given @direction value.\n     * An error will be thrown if it is invalid.\n     * @param value An @direction value.\n     * @param {boolean} strictValues If the string value should be strictly checked against a regex.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateDirection(value, strictValues) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n        }\n        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {\n            if (strictValues) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Add an @id term for all @reverse terms.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    idifyReverseTerms(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (value['@reverse'] && !value['@id']) {\n                    if (typeof value['@reverse'] !== 'string' || Util_1.Util.isValidKeyword(value['@reverse'])) {\n                        throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value['@reverse']}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                    }\n                    value['@id'] = value['@reverse'];\n                    if (Util_1.Util.isPotentialKeyword(value['@reverse'])) {\n                        delete value['@reverse'];\n                    }\n                    else {\n                        value['@reverse'] = true;\n                    }\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Expand all prefixed terms in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded\n     *                                          via @base if @vocab is set to null.\n     */\n    expandPrefixedTerms(context, expandContentTypeToBase) {\n        const contextRaw = context.getContextRaw();\n        for (const key of Object.keys(contextRaw)) {\n            // Only expand allowed keys\n            if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {\n                // Error if we try to alias a keyword to something else.\n                const keyValue = contextRaw[key];\n                if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {\n                    if (key !== '@type' || typeof contextRaw[key] === 'object'\n                        && !(contextRaw[key]['@protected'] || contextRaw[key]['@container'] === '@set')) {\n                        throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                    }\n                }\n                // Error if we try to alias to an illegal keyword\n                if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {\n                    throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);\n                }\n                // Error if this term was marked as prefix as well\n                if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue))\n                    && keyValue['@prefix'] === true) {\n                    throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // Loop because prefixes might be nested\n                while (Util_1.Util.isPrefixValue(contextRaw[key])) {\n                    const value = contextRaw[key];\n                    let changed = false;\n                    if (typeof value === 'string') {\n                        contextRaw[key] = context.expandTerm(value, true);\n                        changed = changed || value !== contextRaw[key];\n                    }\n                    else {\n                        const id = value['@id'];\n                        const type = value['@type'];\n                        // If @id is missing, don't allow @id to be added if @prefix: true and key not being a valid IRI.\n                        const canAddIdEntry = !('@prefix' in value) || Util_1.Util.isValidIri(key);\n                        if ('@id' in value) {\n                            // Use @id value for expansion\n                            if (id !== undefined && id !== null && typeof id === 'string') {\n                                contextRaw[key]['@id'] = context.expandTerm(id, true);\n                                changed = changed || id !== contextRaw[key]['@id'];\n                            }\n                        }\n                        else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {\n                            // Add an explicit @id value based on the expanded key value\n                            const newId = context.expandTerm(key, true);\n                            if (newId !== key) {\n                                // Don't set @id if expansion failed\n                                contextRaw[key]['@id'] = newId;\n                                changed = true;\n                            }\n                        }\n                        if (type && typeof type === 'string' && type !== '@vocab'\n                            && (!value['@container'] || !value['@container']['@type'])\n                            && canAddIdEntry) {\n                            // First check @vocab, then fallback to @base\n                            contextRaw[key]['@type'] = context.expandTerm(type, true);\n                            if (expandContentTypeToBase && type === contextRaw[key]['@type']) {\n                                contextRaw[key]['@type'] = context.expandTerm(type, false);\n                            }\n                            changed = changed || type !== contextRaw[key]['@type'];\n                        }\n                    }\n                    if (!changed) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Normalize the @language entries in the given context to lowercase.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} parseOptions The parsing options.\n     */\n    normalize(context, { processingMode, normalizeLanguageTags }) {\n        // Lowercase language keys in 1.0\n        if (normalizeLanguageTags || processingMode === 1.0) {\n            for (const key of Object.keys(context)) {\n                if (key === '@language' && typeof context[key] === 'string') {\n                    context[key] = context[key].toLowerCase();\n                }\n                else {\n                    const value = context[key];\n                    if (value && typeof value === 'object') {\n                        if (typeof value['@language'] === 'string') {\n                            value['@language'] = value['@language'].toLowerCase();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert all @container strings and array values to hash-based values.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     */\n    containersToHash(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (typeof value['@container'] === 'string') {\n                    value['@container'] = { [value['@container']]: true };\n                }\n                else if (Array.isArray(value['@container'])) {\n                    const newValue = {};\n                    for (const containerValue of value['@container']) {\n                        newValue[containerValue] = true;\n                    }\n                    value['@container'] = newValue;\n                }\n            }\n        }\n    }\n    /**\n     * Normalize and apply context-levevl @protected terms onto each term separately.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {number} processingMode The processing mode.\n     */\n    applyScopedProtected(context, { processingMode }) {\n        if (processingMode && processingMode >= 1.1) {\n            if (context['@protected']) {\n                for (const key of Object.keys(context)) {\n                    if (Util_1.Util.isReservedInternalKeyword(key)) {\n                        continue;\n                    }\n                    if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {\n                        const value = context[key];\n                        if (value && typeof value === 'object') {\n                            if (!('@protected' in context[key])) {\n                                // Mark terms with object values as protected if they don't have an @protected: false annotation\n                                context[key]['@protected'] = true;\n                            }\n                        }\n                        else {\n                            // Convert string-based term values to object-based values with @protected: true\n                            context[key] = {\n                                '@id': value,\n                                '@protected': true,\n                            };\n                        }\n                    }\n                }\n                delete context['@protected'];\n            }\n        }\n    }\n    /**\n     * Check if the given context inheritance does not contain any overrides of protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.\n     * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.\n     */\n    validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions) {\n        for (const key of Object.keys(contextAfter)) {\n            if (Util_1.Util.isTermProtected(contextBefore, key)) {\n                // The entry in the context before will always be in object-mode\n                // If the new entry is in string-mode, convert it to object-mode\n                // before checking if it is identical.\n                if (typeof contextAfter[key] === 'string') {\n                    const isPrefix = Util_1.Util.isSimpleTermDefinitionPrefix(contextAfter[key], expandOptions);\n                    contextAfter[key] = { '@id': contextAfter[key] };\n                    // If the simple term def was a prefix, explicitly mark the term as a prefix in the expanded term definition,\n                    // because otherwise we loose this information due to JSON-LD interpreting prefixes differently\n                    // in simple vs expanded term definitions.\n                    if (isPrefix) {\n                        contextAfter[key]['@prefix'] = true;\n                        contextBefore[key]['@prefix'] = true; // Also on before, to make sure the next step still considers them ==\n                    }\n                }\n                // Convert term values to strings for each comparison\n                const valueBefore = canonicalizeJson(contextBefore[key]);\n                // We modify this deliberately,\n                // as we need it for the value comparison (they must be identical modulo '@protected')),\n                // and for the fact that this new value will override the first one.\n                contextAfter[key]['@protected'] = true;\n                const valueAfter = canonicalizeJson(contextAfter[key]);\n                // Error if they are not identical\n                if (valueBefore !== valueAfter) {\n                    throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Validate the entries of the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options The parse options.\n     */\n    validate(context, { processingMode }) {\n        for (const key of Object.keys(context)) {\n            // Ignore reserved internal keywords.\n            if (Util_1.Util.isReservedInternalKeyword(key)) {\n                continue;\n            }\n            // Do not allow empty term\n            if (key === '') {\n                throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n            }\n            const value = context[key];\n            const valueType = typeof value;\n            // First check if the key is a keyword\n            if (Util_1.Util.isPotentialKeyword(key)) {\n                switch (key.substr(1)) {\n                    case 'vocab':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                        }\n                        break;\n                    case 'base':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);\n                        }\n                        break;\n                    case 'language':\n                        if (value !== null) {\n                            ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);\n                        }\n                        break;\n                    case 'version':\n                        if (value !== null && valueType !== 'number') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                        }\n                        break;\n                    case 'direction':\n                        if (value !== null) {\n                            ContextParser.validateDirection(value, true);\n                        }\n                        break;\n                    case 'propagate':\n                        if (processingMode === 1.0) {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                        }\n                        if (value !== null && valueType !== 'boolean') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);\n                        }\n                        break;\n                }\n                // Don't allow keywords to be overridden\n                if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {\n                    throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util\n                        .getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                }\n                continue;\n            }\n            // Otherwise, consider the key a term\n            if (value !== null) {\n                switch (valueType) {\n                    case 'string':\n                        if (Util_1.Util.getPrefix(value, context) === key) {\n                            throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                        }\n                        if (Util_1.Util.isValidIriWeak(key)) {\n                            if (value === '@type') {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                            else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                        }\n                        break;\n                    case 'object':\n                        if (!Util_1.Util.isCompactIri(key) && !('@id' in value)\n                            && (value['@type'] === '@id' ? !context['@base'] : !context['@vocab'])) {\n                            throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                        }\n                        for (const objectKey of Object.keys(value)) {\n                            const objectValue = value[objectKey];\n                            if (!objectValue) {\n                                continue;\n                            }\n                            switch (objectKey) {\n                                case '@id':\n                                    if (Util_1.Util.isValidKeyword(objectValue)\n                                        && objectValue !== '@type' && objectValue !== '@id' && objectValue !== '@graph' && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.isValidIriWeak(key)) {\n                                        if (objectValue === '@type') {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                        else if (Util_1.Util.isValidIri(objectValue)\n                                            && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.getPrefix(objectValue, context) === key) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                            .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                                    }\n                                    break;\n                                case '@type':\n                                    if (value['@container'] === '@type' && objectValue !== '@id' && objectValue !== '@vocab') {\n                                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (objectValue !== '@id' && objectValue !== '@vocab'\n                                        && (processingMode === 1.0 || objectValue !== '@json')\n                                        && (processingMode === 1.0 || objectValue !== '@none')\n                                        && (objectValue[0] === '_' || !Util_1.Util.isValidIri(objectValue))) {\n                                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    break;\n                                case '@reverse':\n                                    if (typeof objectValue === 'string' && value['@id'] && value['@id'] !== objectValue) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':\\\n'${objectValue}' and '${value['@id']}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    if ('@nest' in value) {\n                                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    break;\n                                case '@container':\n                                    if (processingMode === 1.0) {\n                                        if (Object.keys(objectValue).length > 1\n                                            || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, \\\nmust be only one of ${Util_1.Util.CONTAINERS_1_0.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    for (const containerValue of Object.keys(objectValue)) {\n                                        if (containerValue === '@list' && value['@reverse']) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                        }\n                                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), \\\nmust be one of ${Util_1.Util.CONTAINERS.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    break;\n                                case '@language':\n                                    ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);\n                                    break;\n                                case '@direction':\n                                    ContextParser.validateDirection(objectValue, true);\n                                    break;\n                                case '@prefix':\n                                    if (objectValue !== null && typeof objectValue !== 'boolean') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);\n                                    }\n                                    if (!('@id' in value) && !Util_1.Util.isValidIri(key)) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@index':\n                                    if (processingMode === 1.0 || !value['@container'] || !value['@container']['@index']) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@nest':\n                                    if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);\n                                    }\n                            }\n                        }\n                        break;\n                    default:\n                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Apply the @base context entry to the given context under certain circumstances.\n     * @param context A context.\n     * @param options Parsing options.\n     * @param inheritFromParent If the @base value from the parent context can be inherited.\n     * @return The given context.\n     */\n    applyBaseEntry(context, options, inheritFromParent) {\n        // In some special cases, this can be a string, so ignore those.\n        if (typeof context === 'string') {\n            return context;\n        }\n        // Give priority to @base in the parent context\n        if (inheritFromParent && !('@base' in context) && options.parentContext\n            && typeof options.parentContext === 'object' && '@base' in options.parentContext) {\n            context['@base'] = options.parentContext['@base'];\n            if (options.parentContext['@__baseDocument']) {\n                context['@__baseDocument'] = true;\n            }\n        }\n        // Override the base IRI if provided.\n        if (options.baseIRI && !options.external) {\n            if (!('@base' in context)) {\n                // The context base is the document base\n                context['@base'] = options.baseIRI;\n                context['@__baseDocument'] = true;\n            }\n            else if (context['@base'] !== null && typeof context['@base'] === 'string'\n                && !Util_1.Util.isValidIri(context['@base'])) {\n                // The context base is relative to the document base\n                context['@base'] = (0, relative_to_absolute_iri_1.resolve)(context['@base'], options.parentContext && options.parentContext['@base'] || options.baseIRI);\n            }\n        }\n        return context;\n    }\n    /**\n     * Resolve relative context IRIs, or return full IRIs as-is.\n     * @param {string} contextIri A context IRI.\n     * @param {string} baseIRI A base IRI.\n     * @return {string} The normalized context IRI.\n     */\n    normalizeContextIri(contextIri, baseIRI) {\n        if (!Util_1.Util.isValidIri(contextIri)) {\n            try {\n                contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);\n            }\n            catch (_a) {\n                throw new Error(`Invalid context IRI: ${contextIri}`);\n            }\n        }\n        // TODO: Temporary workaround for fixing schema.org CORS issues (https://github.com/schemaorg/schemaorg/issues/2578#issuecomment-652324465)\n        if (this.redirectSchemaOrgHttps && contextIri.startsWith('http://schema.org')) {\n            contextIri = 'https://schema.org/';\n        }\n        return contextIri;\n    }\n    /**\n     * Parse scoped contexts in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options Parsing options.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    async parseInnerContexts(context, options) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if ('@context' in value && value['@context'] !== null && !options.ignoreScopedContexts) {\n                    // Simulate a processing based on the parent context to check if there are any (potential errors).\n                    // Honestly, I find it a bit weird to do this here, as the context may be unused,\n                    // and the final effective context may differ based on any other embedded/scoped contexts.\n                    // But hey, it's part of the spec, so we have no choice...\n                    // https://w3c.github.io/json-ld-api/#h-note-10\n                    if (this.validateContext) {\n                        try {\n                            const parentContext = Object.assign({}, context);\n                            parentContext[key] = Object.assign({}, parentContext[key]);\n                            delete parentContext[key]['@context'];\n                            await this.parse(value['@context'], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));\n                        }\n                        catch (e) {\n                            throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);\n                        }\n                    }\n                    value['@context'] = (await this.parse(value['@context'], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context })))\n                        .getContextRaw();\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Parse a JSON-LD context in any form.\n     * @param {JsonLdContext} context A context, URL to a context, or an array of contexts/URLs.\n     * @param {IParseOptions} options Optional parsing options.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the context.\n     */\n    async parse(context, options = {}) {\n        const { baseIRI, parentContext: parentContextInitial, external, processingMode = ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing, } = options;\n        let parentContext = parentContextInitial;\n        const remoteContexts = options.remoteContexts || {};\n        // Avoid remote context overflows\n        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {\n            throw new ErrorCoded_1.ErrorCoded('Detected an overflow in remote context inclusions: ' + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);\n        }\n        if (context === null || context === undefined) {\n            // Don't allow context nullification and there are protected terms\n            if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {\n                throw new ErrorCoded_1.ErrorCoded('Illegal context nullification when terms are protected', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);\n            }\n            // Context that are explicitly set to null are empty.\n            return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));\n        }\n        else if (typeof context === 'string') {\n            const contextIri = this.normalizeContextIri(context, baseIRI);\n            const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n            if (overriddenLoad) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);\n            }\n            const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));\n            this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);\n            return parsedStringContext;\n        }\n        else if (Array.isArray(context)) {\n            // As a performance consideration, first load all external contexts in parallel.\n            const contextIris = [];\n            const contexts = await Promise.all(context.map((subContext, i) => {\n                if (typeof subContext === 'string') {\n                    const contextIri = this.normalizeContextIri(subContext, baseIRI);\n                    contextIris[i] = contextIri;\n                    const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n                    if (overriddenLoad) {\n                        return overriddenLoad;\n                    }\n                    return this.load(contextIri);\n                }\n                else {\n                    return subContext;\n                }\n            }));\n            // Don't apply inheritance logic on minimal processing\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);\n            }\n            const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise\n                .then((accContext) => this.parse(contextEntry, Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }))), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));\n            // Override the base IRI if provided.\n            this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);\n            return reducedContexts;\n        }\n        else if (typeof context === 'object') {\n            if ('@context' in context) {\n                return await this.parse(context['@context'], options);\n            }\n            // Make a deep clone of the given context, to avoid modifying it.\n            context = JSON.parse(JSON.stringify(context)); // No better way in JS at the moment.\n            if (parentContext && !minimalProcessing) {\n                parentContext = JSON.parse(JSON.stringify(parentContext));\n            }\n            // We have an actual context object.\n            let newContext = {};\n            // According to the JSON-LD spec, @base must be ignored from external contexts.\n            if (external) {\n                delete context['@base'];\n            }\n            // Override the base IRI if provided.\n            this.applyBaseEntry(context, options, true);\n            // Hashify container entries\n            // Do this before protected term validation as that influences term format\n            this.containersToHash(context);\n            // Don't perform any other modifications if only minimal processing is needed.\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);\n            }\n            // In JSON-LD 1.1, load @import'ed context prior to processing.\n            let importContext = {};\n            if ('@import' in context) {\n                if (processingMode >= 1.1) {\n                    // Only accept string values\n                    if (typeof context['@import'] !== 'string') {\n                        throw new ErrorCoded_1.ErrorCoded('An @import value must be a string, but got ' + typeof context['@import'], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);\n                    }\n                    // Load context\n                    importContext = await this.loadImportContext(this.normalizeContextIri(context['@import'], baseIRI));\n                    delete context['@import'];\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded('Context importing is not supported in JSON-LD 1.0', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                }\n            }\n            // Merge different parts of the final context in order\n            newContext = Object.assign(Object.assign(Object.assign(Object.assign({}, newContext), (typeof parentContext === 'object' ? parentContext : {})), importContext), context);\n            const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);\n            // Parse inner contexts with minimal processing\n            await this.parseInnerContexts(newContext, options);\n            // In JSON-LD 1.1, @vocab can be relative to @vocab in the parent context, or a compact IRI.\n            if ((newContext && newContext['@version'] || ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1\n                && ((context['@vocab'] && typeof context['@vocab'] === 'string') || context['@vocab'] === '')) {\n                if (parentContext && '@vocab' in parentContext && context['@vocab'].indexOf(':') < 0) {\n                    newContext['@vocab'] = parentContext['@vocab'] + context['@vocab'];\n                }\n                else {\n                    if (Util_1.Util.isCompactIri(context['@vocab']) || context['@vocab'] in newContextWrapped.getContextRaw()) {\n                        // @vocab is a compact IRI or refers exactly to a prefix\n                        newContext['@vocab'] = newContextWrapped.expandTerm(context['@vocab'], true);\n                    }\n                }\n            }\n            // Handle terms (before protection checks)\n            this.idifyReverseTerms(newContext);\n            this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase);\n            // In JSON-LD 1.1, check if we are not redefining any protected keywords\n            if (!ignoreProtection && parentContext && processingMode >= 1.1) {\n                this.validateKeywordRedefinitions(parentContext, newContext, exports.defaultExpandOptions);\n            }\n            this.normalize(newContext, { processingMode, normalizeLanguageTags });\n            this.applyScopedProtected(newContext, { processingMode });\n            if (this.validateContext) {\n                this.validate(newContext, { processingMode });\n            }\n            return newContextWrapped;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);\n        }\n    }\n    /**\n     * Fetch the given URL as a raw JSON-LD context.\n     * @param url An URL.\n     * @return A promise resolving to a raw JSON-LD context.\n     */\n    async load(url) {\n        // First try to retrieve the context from cache\n        const cached = this.documentCache[url];\n        if (cached) {\n            return typeof cached === 'string' ? cached : Array.isArray(cached) ? cached.slice() : Object.assign({}, cached);\n        }\n        // If not in cache, load it\n        let document;\n        try {\n            document = await this.documentLoader.load(url);\n        }\n        catch (e) {\n            throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);\n        }\n        // Validate the context\n        if (!('@context' in document)) {\n            throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        return this.documentCache[url] = document['@context'];\n    }\n    /**\n     * Override the given context that may be loaded.\n     *\n     * This will check whether or not the url is recursively being loaded.\n     * @param url An URL.\n     * @param options Parsing options.\n     * @return An overridden context, or null.\n     *         Optionally an error can be thrown if a cyclic context is detected.\n     */\n    getOverriddenLoad(url, options) {\n        if (url in (options.remoteContexts || {})) {\n            if (options.ignoreRemoteScopedContexts) {\n                return url;\n            }\n            else {\n                throw new ErrorCoded_1.ErrorCoded('Detected a cyclic context inclusion of ' + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);\n            }\n        }\n        return null;\n    }\n    /**\n     * Load an @import'ed context.\n     * @param importContextIri The full URI of an @import value.\n     */\n    async loadImportContext(importContextIri) {\n        // Load the context\n        const importContext = await this.load(importContextIri);\n        // Require the context to be a non-array object\n        if (typeof importContext !== 'object' || Array.isArray(importContext)) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context must be a single object: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        // Error if the context contains another @import\n        if ('@import' in importContext) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context can not import another context: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n        }\n        // Containers have to be converted into hash values the same way as for the importing context\n        // Otherwise context validation will fail for container values\n        this.containersToHash(importContext);\n        return importContext;\n    }\n}\nexports.ContextParser = ContextParser;\nContextParser.DEFAULT_PROCESSING_MODE = 1.1;\nexports.defaultExpandOptions = {\n    allowPrefixForcing: true,\n    allowPrefixNonGenDelims: false,\n    allowVocabRelativeToBase: true,\n};\n//# sourceMappingURL=ContextParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_CODES = exports.ErrorCoded = void 0;\n/**\n * An error that has a certain error code.\n *\n * The error code can be any string.\n * All standardized error codes are listed in {@link ERROR_CODES}.\n */\nclass ErrorCoded extends Error {\n    /* istanbul ignore next */\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nexports.ErrorCoded = ErrorCoded;\n/**\n * All standardized JSON-LD error codes.\n * @see https://w3c.github.io/json-ld-api/#dom-jsonlderrorcode\n */\n// tslint:disable:object-literal-sort-keys\nvar ERROR_CODES;\n(function (ERROR_CODES) {\n    ERROR_CODES[\"COLLIDING_KEYWORDS\"] = \"colliding keywords\";\n    ERROR_CODES[\"CONFLICTING_INDEXES\"] = \"conflicting indexes\";\n    ERROR_CODES[\"CYCLIC_IRI_MAPPING\"] = \"cyclic IRI mapping\";\n    ERROR_CODES[\"INVALID_ID_VALUE\"] = \"invalid @id value\";\n    ERROR_CODES[\"INVALID_INDEX_VALUE\"] = \"invalid @index value\";\n    ERROR_CODES[\"INVALID_NEST_VALUE\"] = \"invalid @nest value\";\n    ERROR_CODES[\"INVALID_PREFIX_VALUE\"] = \"invalid @prefix value\";\n    ERROR_CODES[\"INVALID_PROPAGATE_VALUE\"] = \"invalid @propagate value\";\n    ERROR_CODES[\"INVALID_REVERSE_VALUE\"] = \"invalid @reverse value\";\n    ERROR_CODES[\"INVALID_IMPORT_VALUE\"] = \"invalid @import value\";\n    ERROR_CODES[\"INVALID_VERSION_VALUE\"] = \"invalid @version value\";\n    ERROR_CODES[\"INVALID_BASE_IRI\"] = \"invalid base IRI\";\n    ERROR_CODES[\"INVALID_CONTAINER_MAPPING\"] = \"invalid container mapping\";\n    ERROR_CODES[\"INVALID_CONTEXT_ENTRY\"] = \"invalid context entry\";\n    ERROR_CODES[\"INVALID_CONTEXT_NULLIFICATION\"] = \"invalid context nullification\";\n    ERROR_CODES[\"INVALID_DEFAULT_LANGUAGE\"] = \"invalid default language\";\n    ERROR_CODES[\"INVALID_INCLUDED_VALUE\"] = \"invalid @included value\";\n    ERROR_CODES[\"INVALID_IRI_MAPPING\"] = \"invalid IRI mapping\";\n    ERROR_CODES[\"INVALID_JSON_LITERAL\"] = \"invalid JSON literal\";\n    ERROR_CODES[\"INVALID_KEYWORD_ALIAS\"] = \"invalid keyword alias\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAP_VALUE\"] = \"invalid language map value\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAPPING\"] = \"invalid language mapping\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_STRING\"] = \"invalid language-tagged string\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_VALUE\"] = \"invalid language-tagged value\";\n    ERROR_CODES[\"INVALID_LOCAL_CONTEXT\"] = \"invalid local context\";\n    ERROR_CODES[\"INVALID_REMOTE_CONTEXT\"] = \"invalid remote context\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY\"] = \"invalid reverse property\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_MAP\"] = \"invalid reverse property map\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_VALUE\"] = \"invalid reverse property value\";\n    ERROR_CODES[\"INVALID_SCOPED_CONTEXT\"] = \"invalid scoped context\";\n    ERROR_CODES[\"INVALID_SCRIPT_ELEMENT\"] = \"invalid script element\";\n    ERROR_CODES[\"INVALID_SET_OR_LIST_OBJECT\"] = \"invalid set or list object\";\n    ERROR_CODES[\"INVALID_TERM_DEFINITION\"] = \"invalid term definition\";\n    ERROR_CODES[\"INVALID_TYPE_MAPPING\"] = \"invalid type mapping\";\n    ERROR_CODES[\"INVALID_TYPE_VALUE\"] = \"invalid type value\";\n    ERROR_CODES[\"INVALID_TYPED_VALUE\"] = \"invalid typed value\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT\"] = \"invalid value object\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT_VALUE\"] = \"invalid value object value\";\n    ERROR_CODES[\"INVALID_VOCAB_MAPPING\"] = \"invalid vocab mapping\";\n    ERROR_CODES[\"IRI_CONFUSED_WITH_PREFIX\"] = \"IRI confused with prefix\";\n    ERROR_CODES[\"KEYWORD_REDEFINITION\"] = \"keyword redefinition\";\n    ERROR_CODES[\"LOADING_DOCUMENT_FAILED\"] = \"loading document failed\";\n    ERROR_CODES[\"LOADING_REMOTE_CONTEXT_FAILED\"] = \"loading remote context failed\";\n    ERROR_CODES[\"MULTIPLE_CONTEXT_LINK_HEADERS\"] = \"multiple context link headers\";\n    ERROR_CODES[\"PROCESSING_MODE_CONFLICT\"] = \"processing mode conflict\";\n    ERROR_CODES[\"PROTECTED_TERM_REDEFINITION\"] = \"protected term redefinition\";\n    ERROR_CODES[\"CONTEXT_OVERFLOW\"] = \"context overflow\";\n    ERROR_CODES[\"INVALID_BASE_DIRECTION\"] = \"invalid base direction\";\n    ERROR_CODES[\"RECURSIVE_CONTEXT_INCLUSION\"] = \"recursive context inclusion\";\n    ERROR_CODES[\"INVALID_STREAMING_KEY_ORDER\"] = \"invalid streaming key order\";\n    /**\n     * JSON-LD-star\n     */\n    ERROR_CODES[\"INVALID_EMBEDDED_NODE\"] = \"invalid embedded node\";\n    ERROR_CODES[\"INVALID_ANNOTATION\"] = \"invalid annotation\";\n})(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));\n//# sourceMappingURL=ErrorCoded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchDocumentLoader = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * Loads documents via the fetch API.\n */\nclass FetchDocumentLoader {\n    constructor(fetcher) {\n        this.fetcher = fetcher;\n    }\n    async load(url) {\n        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: 'application/ld+json' }) });\n        if (response.ok && response.headers) {\n            let mediaType = response.headers.get('Content-Type');\n            if (mediaType) {\n                const colonPos = mediaType.indexOf(';');\n                if (colonPos > 0) {\n                    mediaType = mediaType.substr(0, colonPos);\n                }\n            }\n            if (mediaType === 'application/ld+json') {\n                // Return JSON-LD if proper content type was returned\n                return (await response.json());\n            }\n            else {\n                // Check for alternate link for a non-JSON-LD response\n                if (response.headers.has('Link')) {\n                    let alternateUrl;\n                    response.headers.forEach((value, key) => {\n                        if (key === 'link') {\n                            const linkHeader = (0, http_link_header_1.parse)(value);\n                            for (const link of linkHeader.get('type', 'application/ld+json')) {\n                                if (link.rel === 'alternate') {\n                                    if (alternateUrl) {\n                                        throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                                    }\n                                    alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);\n                                }\n                            }\n                        }\n                    });\n                    if (alternateUrl) {\n                        return this.load(alternateUrl);\n                    }\n                }\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        else {\n            throw new Error(response.statusText || `Status code: ${response.status}`);\n        }\n    }\n}\nexports.FetchDocumentLoader = FetchDocumentLoader;\n//# sourceMappingURL=FetchDocumentLoader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IDocumentLoader.js.map","\"use strict\";\n// tslint:disable:max-line-length\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=JsonLdContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdContextNormalized = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ContextParser_1 = require(\"./ContextParser\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst Util_1 = require(\"./Util\");\n/**\n * A class exposing operations over a normalized JSON-LD context.\n */\nclass JsonLdContextNormalized {\n    constructor(contextRaw) {\n        this.contextRaw = contextRaw;\n    }\n    /**\n     * @return The raw inner context.\n     */\n    getContextRaw() {\n        return this.contextRaw;\n    }\n    /**\n     * Expand the term or prefix of the given term if it has one,\n     * otherwise return the term as-is.\n     *\n     * This will try to expand the IRI as much as possible.\n     *\n     * Iff in vocab-mode, then other references to other terms in the context can be used,\n     * such as to `myTerm`:\n     * ```\n     * {\n     *   \"myTerm\": \"http://example.org/myLongTerm\"\n     * }\n     * ```\n     *\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,\n     *                              otherwise it is considered a regular term that is expanded based on @base.\n     * @param {IExpandOptions} options Options that define the way how expansion must be done.\n     * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.\n     * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).\n     */\n    expandTerm(term, expandVocab, options = ContextParser_1.defaultExpandOptions) {\n        const contextValue = this.contextRaw[term];\n        // Immediately return if the term was disabled in the context\n        if (contextValue === null || (contextValue && contextValue['@id'] === null)) {\n            return null;\n        }\n        // Check the @id\n        let validIriMapping = true;\n        if (contextValue && expandVocab) {\n            const value = Util_1.Util.getContextValueId(contextValue);\n            if (value && value !== term) {\n                if (typeof value !== 'string' || (!Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value))) {\n                    // Don't mark this mapping as invalid if we have an unknown keyword, but of the correct form.\n                    if (!Util_1.Util.isPotentialKeyword(value)) {\n                        validIriMapping = false;\n                    }\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        // Check if the term is prefixed\n        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);\n        const vocab = this.contextRaw['@vocab'];\n        const vocabRelative = (!!vocab || vocab === '') && vocab.indexOf(':') < 0;\n        const base = this.contextRaw['@base'];\n        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);\n        if (prefix) {\n            const contextPrefixValue = this.contextRaw[prefix];\n            const value = Util_1.Util.getContextValueId(contextPrefixValue);\n            if (value) {\n                if (typeof contextPrefixValue === 'string' || !options.allowPrefixForcing) {\n                    // If we have a simple term definition,\n                    // check the last character of the prefix to determine whether or not it is a prefix.\n                    // Validate that prefix ends with gen-delim character, unless @prefix is true\n                    if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                else {\n                    // If we have an expanded term definition, default to @prefix: false\n                    if (value[0] !== '_' && !potentialKeyword && !contextPrefixValue['@prefix'] && !(term in this.contextRaw)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                return value + term.substr(prefix.length + 1);\n            }\n        }\n        else if (expandVocab && ((vocab || vocab === '') || (options.allowVocabRelativeToBase && (base && vocabRelative)))\n            && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            if (vocabRelative) {\n                if (options.allowVocabRelativeToBase) {\n                    return ((vocab || base) ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : '') + term;\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                }\n            }\n            else {\n                return vocab + term;\n            }\n        }\n        else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            return (0, relative_to_absolute_iri_1.resolve)(term, base);\n        }\n        // Return the term as-is, unless we discovered an invalid IRI mapping for this term in the context earlier.\n        if (validIriMapping) {\n            return term;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n        }\n    }\n    /**\n     * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.\n     *\n     * This will try to compact the IRI as much as possible.\n     *\n     * @param {string} iri An IRI to compact.\n     * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,\n     *                        otherwise it is considered a regular term that is compacted based on @base.\n     * @return {string} The compacted term or the IRI as-is.\n     */\n    compactIri(iri, vocab) {\n        // Try @vocab compacting\n        if (vocab && this.contextRaw['@vocab'] && iri.startsWith(this.contextRaw['@vocab'])) {\n            return iri.substr(this.contextRaw['@vocab'].length);\n        }\n        // Try @base compacting\n        if (!vocab && this.contextRaw['@base'] && iri.startsWith(this.contextRaw['@base'])) {\n            return iri.substr(this.contextRaw['@base'].length);\n        }\n        // Loop over all terms in the context\n        // This will try to prefix as short as possible.\n        // Once a fully compacted alias is found, return immediately, as we can not go any shorter.\n        const shortestPrefixing = { prefix: '', suffix: iri };\n        for (const key in this.contextRaw) {\n            const value = this.contextRaw[key];\n            if (value && !Util_1.Util.isPotentialKeyword(key)) {\n                const contextIri = Util_1.Util.getContextValueId(value);\n                if (iri.startsWith(contextIri)) {\n                    const suffix = iri.substr(contextIri.length);\n                    if (!suffix) {\n                        if (vocab) {\n                            // Immediately return on compacted alias\n                            return key;\n                        }\n                    }\n                    else if (suffix.length < shortestPrefixing.suffix.length) {\n                        // Overwrite the shortest prefix\n                        shortestPrefixing.prefix = key;\n                        shortestPrefixing.suffix = suffix;\n                    }\n                }\n            }\n        }\n        // Return the shortest prefix\n        if (shortestPrefixing.prefix) {\n            return shortestPrefixing.prefix + ':' + shortestPrefixing.suffix;\n        }\n        return iri;\n    }\n}\nexports.JsonLdContextNormalized = JsonLdContextNormalized;\n//# sourceMappingURL=JsonLdContextNormalized.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nclass Util {\n    /**\n     * Check if the given term is a valid compact IRI.\n     * Otherwise, it may be an IRI.\n     * @param {string} term A term.\n     * @return {boolean} If it is a compact IRI.\n     */\n    static isCompactIri(term) {\n        return term.indexOf(':') > 0 && !(term && term[0] === '#');\n    }\n    /**\n     * Get the prefix from the given term.\n     * @see https://json-ld.org/spec/latest/json-ld/#compact-iris\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {string} The prefix or null.\n     */\n    static getPrefix(term, context) {\n        // Do not consider relative IRIs starting with a hash as compact IRIs\n        if (term && term[0] === '#') {\n            return null;\n        }\n        const separatorPos = term.indexOf(':');\n        if (separatorPos >= 0) {\n            // Suffix can not begin with two slashes\n            if (term.length > separatorPos + 1\n                && term.charAt(separatorPos + 1) === '/'\n                && term.charAt(separatorPos + 2) === '/') {\n                return null;\n            }\n            const prefix = term.substr(0, separatorPos);\n            // Prefix can not be an underscore (this is a blank node)\n            if (prefix === '_') {\n                return null;\n            }\n            // Prefix must match a term in the active context\n            if (context[prefix]) {\n                return prefix;\n            }\n        }\n        return null;\n    }\n    /**\n     * From a given context entry value, get the string value, or the @id field.\n     * @param contextValue A value for a term in a context.\n     * @return {string} The id value, or null.\n     */\n    static getContextValueId(contextValue) {\n        if (contextValue === null || typeof contextValue === 'string') {\n            return contextValue;\n        }\n        const id = contextValue['@id'];\n        return id ? id : null;\n    }\n    /**\n     * Check if the given simple term definition (string-based value of a context term)\n     * should be considered a prefix.\n     * @param value A simple term definition value.\n     * @param options Options that define the way how expansion must be done.\n     */\n    static isSimpleTermDefinitionPrefix(value, options) {\n        return !Util.isPotentialKeyword(value)\n            && (value[0] === '_' || options.allowPrefixNonGenDelims || Util.isPrefixIriEndingWithGenDelim(value));\n    }\n    /**\n     * Check if the given keyword is of the keyword format \"@\"1*ALPHA.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is of the keyword format.\n     */\n    static isPotentialKeyword(keyword) {\n        return typeof keyword === 'string' && Util.KEYWORD_REGEX.test(keyword);\n    }\n    /**\n     * Check if the given prefix ends with a gen-delim character.\n     * @param {string} prefixIri A prefix IRI.\n     * @return {boolean} If the given prefix IRI is valid.\n     */\n    static isPrefixIriEndingWithGenDelim(prefixIri) {\n        return Util.ENDS_WITH_GEN_DELIM.test(prefixIri);\n    }\n    /**\n     * Check if the given context value can be a prefix value.\n     * @param value A context value.\n     * @return {boolean} If it can be a prefix value.\n     */\n    static isPrefixValue(value) {\n        return value && (typeof value === 'string' || (value && typeof value === 'object'));\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return Boolean(iri && Util.IRI_REGEX.test(iri));\n    }\n    /**\n     * Check if the given IRI is valid, this includes the possibility of being a relative IRI.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIriWeak(iri) {\n        return !!iri && iri[0] !== ':' && Util.IRI_REGEX_WEAK.test(iri);\n    }\n    /**\n     * Check if the given keyword is a defined according to the JSON-LD specification.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is valid.\n     */\n    static isValidKeyword(keyword) {\n        return Util.VALID_KEYWORDS[keyword];\n    }\n    /**\n     * Check if the given term is protected in the context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {string} key A context term.\n     * @return {boolean} If the given term has an @protected flag.\n     */\n    static isTermProtected(context, key) {\n        const value = context[key];\n        return !(typeof value === 'string') && value && value['@protected'];\n    }\n    /**\n     * Check if the given context has at least one protected term.\n     * @param context A context.\n     * @return If the context has a protected term.\n     */\n    static hasProtectedTerms(context) {\n        for (const key of Object.keys(context)) {\n            if (Util.isTermProtected(context, key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check if the given key is an internal reserved keyword.\n     * @param key A context key.\n     */\n    static isReservedInternalKeyword(key) {\n        return key.startsWith('@__');\n    }\n}\nexports.Util = Util;\n// Regex for valid IRIs\nUtil.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ \"<>{}|\\\\\\[\\]`#]*(#[^#]*)?$/;\n// Weaker regex for valid IRIs, this includes relative IRIs\nUtil.IRI_REGEX_WEAK = /(?::[^:])|\\//;\n// Regex for keyword form\nUtil.KEYWORD_REGEX = /^@[a-z]+$/i;\n// Regex to see if an IRI ends with a gen-delim character (see RFC 3986)\nUtil.ENDS_WITH_GEN_DELIM = /[:/?#\\[\\]@]$/;\n// Regex for language tags\nUtil.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;\n// Regex for base directions\nUtil.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;\n// All known valid JSON-LD keywords\n// @see https://www.w3.org/TR/json-ld11/#keywords\nUtil.VALID_KEYWORDS = {\n    '@annotation': true,\n    '@base': true,\n    '@container': true,\n    '@context': true,\n    '@direction': true,\n    '@graph': true,\n    '@id': true,\n    '@import': true,\n    '@included': true,\n    '@index': true,\n    '@json': true,\n    '@language': true,\n    '@list': true,\n    '@nest': true,\n    '@none': true,\n    '@prefix': true,\n    '@propagate': true,\n    '@protected': true,\n    '@reverse': true,\n    '@set': true,\n    '@type': true,\n    '@value': true,\n    '@version': true,\n    '@vocab': true,\n};\n// Keys in the contexts that will not be expanded based on the base IRI\nUtil.EXPAND_KEYS_BLACKLIST = [\n    '@base',\n    '@vocab',\n    '@language',\n    '@version',\n    '@direction',\n];\n// Keys in the contexts that may not be aliased from\nUtil.ALIAS_DOMAIN_BLACKLIST = [\n    '@container',\n    '@graph',\n    '@id',\n    '@index',\n    '@list',\n    '@nest',\n    '@none',\n    '@prefix',\n    '@reverse',\n    '@set',\n    '@type',\n    '@value',\n    '@version',\n];\n// Keys in the contexts that may not be aliased to\nUtil.ALIAS_RANGE_BLACKLIST = [\n    '@context',\n    '@preserve',\n];\n// All valid @container values\nUtil.CONTAINERS = [\n    '@list',\n    '@set',\n    '@index',\n    '@language',\n    '@graph',\n    '@id',\n    '@type',\n];\n// All valid @container values under processing mode 1.0\nUtil.CONTAINERS_1_0 = [\n    '@list',\n    '@set',\n    '@index',\n];\n//# sourceMappingURL=Util.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/JsonLdParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdParser = void 0;\n// tslint:disable-next-line:no-var-requires\nconst Parser = require('jsonparse');\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst stream_1 = require(\"stream\");\nconst EntryHandlerArrayValue_1 = require(\"./entryhandler/EntryHandlerArrayValue\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\nconst EntryHandlerInvalidFallback_1 = require(\"./entryhandler/EntryHandlerInvalidFallback\");\nconst EntryHandlerPredicate_1 = require(\"./entryhandler/EntryHandlerPredicate\");\nconst EntryHandlerKeywordContext_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordContext\");\nconst EntryHandlerKeywordGraph_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordGraph\");\nconst EntryHandlerKeywordId_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordId\");\nconst EntryHandlerKeywordIncluded_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordIncluded\");\nconst EntryHandlerKeywordNest_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordNest\");\nconst EntryHandlerKeywordType_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordType\");\nconst EntryHandlerKeywordUnknownFallback_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordUnknownFallback\");\nconst EntryHandlerKeywordValue_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordValue\");\nconst ParsingContext_1 = require(\"./ParsingContext\");\nconst Util_1 = require(\"./Util\");\nconst http_link_header_1 = require(\"http-link-header\");\n/**\n * A stream transformer that parses JSON-LD (text) streams to an {@link RDF.Stream}.\n */\nclass JsonLdParser extends stream_1.Transform {\n    constructor(options) {\n        super({ readableObjectMode: true });\n        options = options || {};\n        this.options = options;\n        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));\n        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });\n        this.jsonParser = new Parser();\n        this.contextJobs = [];\n        this.typeJobs = [];\n        this.contextAwaitingJobs = [];\n        this.lastDepth = 0;\n        this.lastKeys = [];\n        this.lastOnValueJob = Promise.resolve();\n        this.attachJsonParserListeners();\n        this.on('end', () => {\n            if (typeof this.jsonParser.mode !== 'undefined') {\n                this.emit('error', new Error('Unclosed document'));\n            }\n        });\n    }\n    /**\n     * Construct a JsonLdParser from the given HTTP response.\n     *\n     * This will throw an error if no valid JSON response is received\n     * (application/ld+json, application/json, or something+json).\n     *\n     * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.\n     *\n     * This method is not responsible for handling redirects.\n     *\n     * @param baseIRI The URI of the received response.\n     * @param mediaType The received content type.\n     * @param headers Optional HTTP headers.\n     * @param options Optional parser options.\n     */\n    static fromHttpResponse(baseIRI, mediaType, headers, options) {\n        let context;\n        // Special cases when receiving something else than the JSON-LD media type\n        if (mediaType !== 'application/ld+json') {\n            // Only accept JSON or JSON extension types\n            if (mediaType !== 'application/json' && !mediaType.endsWith('+json')) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n            // We need exactly one JSON-LD context in the link header\n            if (headers && headers.has('Link')) {\n                headers.forEach((value, key) => {\n                    if (key === 'link') {\n                        const linkHeader = http_link_header_1.parse(value);\n                        for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {\n                            if (context) {\n                                throw new jsonld_context_parser_1.ErrorCoded('Multiple JSON-LD context link headers were found on ' + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);\n                            }\n                            context = link.uri;\n                        }\n                    }\n                });\n            }\n            if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        // Check if the streaming profile is present\n        let streamingProfile;\n        if (headers && headers.has('Content-Type')) {\n            const contentType = headers.get('Content-Type');\n            const match = /; *profile=([^\"]*)/.exec(contentType);\n            if (match && match[1] === 'http://www.w3.org/ns/json-ld#streaming') {\n                streamingProfile = true;\n            }\n        }\n        return new JsonLdParser(Object.assign({ baseIRI,\n            context,\n            streamingProfile }, options ? options : {}));\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new JsonLdParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        this.jsonParser.write(chunk);\n        this.lastOnValueJob\n            .then(() => callback(), (error) => callback(error));\n    }\n    /**\n     * Start a new job for parsing the given value.\n     *\n     * This will let the first valid {@link IEntryHandler} handle the entry.\n     *\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        let flushStacks = true;\n        // When we go up the stack, emit all unidentified values\n        // We need to do this before the new job, because the new job may require determined values from the flushed jobs.\n        if (lastDepthCheck && depth < this.lastDepth) {\n            // Check if we had any RDF lists that need to be terminated with an rdf:nil\n            const listPointer = this.parsingContext.listPointerStack[this.lastDepth];\n            if (listPointer) {\n                // Terminate the list if the had at least one value\n                if (listPointer.value) {\n                    this.emit('data', this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));\n                }\n                // Add the list id to the id stack, so it can be used higher up in the stack\n                listPointer.listId.listHead = true;\n                this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];\n                this.parsingContext.listPointerStack.splice(this.lastDepth, 1);\n            }\n            // Flush the buffer for lastDepth\n            // If the parent key is a special type of container, postpone flushing until that parent is handled.\n            if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {\n                this.parsingContext.pendingContainerFlushBuffers\n                    .push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });\n                flushStacks = false;\n            }\n            else {\n                await this.flushBuffer(this.lastDepth, this.lastKeys);\n            }\n        }\n        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);\n        const parentKey = await this.util.unaliasKeywordParent(keys, depth);\n        this.parsingContext.emittedStack[depth] = true;\n        let handleKey = true;\n        // Keywords inside @reverse is not allowed apart from @context\n        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === '@reverse' && key !== '@context') {\n            this.emit('error', new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));\n        }\n        // Skip further processing if one of the parent nodes are invalid.\n        // We use the validationStack to reuse validation results that were produced before with common key stacks.\n        let inProperty = false;\n        if (this.parsingContext.validationStack.length > 1) {\n            inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;\n        }\n        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys.length - 1; i++) {\n            const validationResult = this.parsingContext.validationStack[i]\n                || (this.parsingContext.validationStack[i] = await this.validateKey(keys.slice(0, i + 1), i, inProperty));\n            if (!validationResult.valid) {\n                this.parsingContext.emittedStack[depth] = false;\n                handleKey = false;\n                break;\n            }\n            else if (!inProperty && validationResult.property) {\n                inProperty = true;\n            }\n        }\n        // Skip further processing if this node is part of a literal\n        if (this.util.isLiteral(depth)) {\n            handleKey = false;\n        }\n        // Get handler\n        if (handleKey) {\n            for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n                const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);\n                if (testResult) {\n                    // Pass processing over to the handler\n                    await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);\n                    // Flag that this depth is processed\n                    if (entryHandler.isStackProcessor()) {\n                        this.parsingContext.processingStack[depth] = true;\n                    }\n                    break;\n                }\n            }\n        }\n        // Validate value indexes on the root.\n        if (depth === 0 && Array.isArray(value)) {\n            await this.util.validateValueIndexes(value);\n        }\n        // When we go up the stack, flush the old stack\n        if (flushStacks && depth < this.lastDepth) {\n            // Reset our stacks\n            this.flushStacks(this.lastDepth);\n        }\n        this.lastDepth = depth;\n        this.lastKeys = keys;\n        // Clear the keyword cache at this depth, and everything underneath.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);\n    }\n    /**\n     * Flush the processing stacks at the given depth.\n     * @param {number} depth A depth.\n     */\n    flushStacks(depth) {\n        this.parsingContext.processingStack.splice(depth, 1);\n        this.parsingContext.processingType.splice(depth, 1);\n        this.parsingContext.emittedStack.splice(depth, 1);\n        this.parsingContext.idStack.splice(depth, 1);\n        this.parsingContext.graphStack.splice(depth + 1, 1);\n        this.parsingContext.graphContainerTermStack.splice(depth, 1);\n        this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        this.parsingContext.validationStack.splice(depth - 1, 2);\n        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);\n        // TODO: just like the literal stack, splice all other stack until the end as well?\n    }\n    /**\n     * Flush buffers for the given depth.\n     *\n     * This should be called after the last entry at a given depth was processed.\n     *\n     * @param {number} depth A depth.\n     * @param {any[]} keys A stack of keys.\n     * @return {Promise<void>} A promise resolving if flushing is done.\n     */\n    async flushBuffer(depth, keys) {\n        let subjects = this.parsingContext.idStack[depth];\n        if (!subjects) {\n            subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];\n        }\n        // Flush values at this level\n        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];\n        if (valueBuffer) {\n            for (const subject of subjects) {\n                const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);\n                const graphs = (this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0)\n                    ? this.parsingContext.idStack[depth - depthOffsetGraph - 1]\n                    : [await this.util.getGraphContainerValue(keys, depth)];\n                if (graphs) {\n                    for (const graph of graphs) {\n                        // Flush values to stream if the graph @id is known\n                        this.parsingContext.emittedStack[depth] = true;\n                        for (const bufferedValue of valueBuffer) {\n                            if (bufferedValue.reverse) {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.object, bufferedValue.predicate, subject, graph));\n                            }\n                            else {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(subject, bufferedValue.predicate, bufferedValue.object, graph));\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Place the values in the graphs buffer if the graph @id is not yet known\n                    const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);\n                    for (const bufferedValue of valueBuffer) {\n                        if (bufferedValue.reverse) {\n                            subGraphBuffer.push({\n                                object: subject,\n                                predicate: bufferedValue.predicate,\n                                subject: bufferedValue.object,\n                            });\n                        }\n                        else {\n                            subGraphBuffer.push({\n                                object: bufferedValue.object,\n                                predicate: bufferedValue.predicate,\n                                subject,\n                            });\n                        }\n                    }\n                }\n            }\n            this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);\n            this.parsingContext.literalStack.splice(depth, 1);\n            this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        }\n        // Flush graphs at this level\n        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];\n        if (graphBuffer) {\n            for (const subject of subjects) {\n                // A @graph statement at the root without @id relates to the default graph,\n                // unless there are top-level properties,\n                // others relate to blank nodes.\n                const graph = depth === 1 && subject.termType === 'BlankNode'\n                    && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;\n                this.parsingContext.emittedStack[depth] = true;\n                for (const bufferedValue of graphBuffer) {\n                    this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));\n                }\n            }\n            this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);\n        }\n    }\n    /**\n     * Check if at least one {@link IEntryHandler} validates the entry to true.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth A depth.\n     * @param {boolean} inProperty If the current depth is part of a valid property node.\n     * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.\n     */\n    async validateKey(keys, depth, inProperty) {\n        for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n            if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {\n                return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };\n            }\n        }\n        return { valid: false, property: false };\n    }\n    /**\n     * Attach all required listeners to the JSON parser.\n     *\n     * This should only be called once.\n     */\n    attachJsonParserListeners() {\n        // Listen to json parser events\n        this.jsonParser.onValue = (value) => {\n            const depth = this.jsonParser.stack.length;\n            const keys = (new Array(depth + 1).fill(0)).map((v, i) => {\n                return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;\n            });\n            if (!this.isParsingContextInner(depth)) { // Don't parse inner nodes inside @context\n                const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);\n                if (!this.parsingContext.streamingProfile\n                    && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {\n                    // If an out-of-order context is allowed,\n                    // we have to buffer everything.\n                    // We store jobs for @context's and @type's separately,\n                    // because at the end, we have to process them first.\n                    // We also handle @type because these *could* introduce a type-scoped context.\n                    if (keys[depth] === '@context') {\n                        let jobs = this.contextJobs[depth];\n                        if (!jobs) {\n                            jobs = this.contextJobs[depth] = [];\n                        }\n                        jobs.push(valueJobCb);\n                    }\n                    else if (keys[depth] === '@type'\n                        || typeof keys[depth] === 'number' && keys[depth - 1] === '@type') { // Also capture @type with array values\n                        // Remove @type from keys, because we want it to apply to parent later on\n                        this.typeJobs.push({ job: valueJobCb, keys: keys.slice(0, keys.length - 1) });\n                    }\n                    else {\n                        this.contextAwaitingJobs.push({ job: valueJobCb, keys });\n                    }\n                }\n                else {\n                    // Make sure that our value jobs are chained synchronously\n                    this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);\n                }\n                // Execute all buffered jobs on deeper levels\n                if (!this.parsingContext.streamingProfile && depth === 0) {\n                    this.lastOnValueJob = this.lastOnValueJob\n                        .then(() => this.executeBufferedJobs());\n                }\n            }\n        };\n        this.jsonParser.onError = (error) => {\n            this.emit('error', error);\n        };\n    }\n    /**\n     * Check if the parser is currently parsing an element that is part of an @context entry.\n     * @param {number} depth A depth.\n     * @return {boolean} A boolean.\n     */\n    isParsingContextInner(depth) {\n        for (let i = depth; i > 0; i--) {\n            if (this.jsonParser.stack[i - 1].key === '@context') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute all buffered jobs.\n     * @return {Promise<void>} A promise resolving if all jobs are finished.\n     */\n    async executeBufferedJobs() {\n        // Handle context jobs\n        for (const jobs of this.contextJobs) {\n            if (jobs) {\n                for (const job of jobs) {\n                    await job();\n                }\n            }\n        }\n        // Clear the keyword cache.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(0);\n        // Handle non-context jobs\n        for (const job of this.contextAwaitingJobs) {\n            // Check if we have a type (with possible type-scoped context) that should be handled before.\n            // We check all possible parent nodes for the current job, from root to leaves.\n            if (this.typeJobs.length > 0) {\n                // First collect all applicable type jobs\n                const applicableTypeJobs = [];\n                const applicableTypeJobIds = [];\n                for (let i = 0; i < this.typeJobs.length; i++) {\n                    const typeJob = this.typeJobs[i];\n                    if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {\n                        applicableTypeJobs.push(typeJob);\n                        applicableTypeJobIds.push(i);\n                    }\n                }\n                // Next, sort the jobs from short to long key length (to ensure types higher up in the tree to be handled first)\n                const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);\n                // Finally, execute the jobs in order\n                for (const typeJob of sortedTypeJobs) {\n                    await typeJob.job();\n                }\n                // Remove the executed type jobs\n                // Sort first, so we can efficiently splice\n                const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();\n                for (const jobId of sortedApplicableTypeJobIds) {\n                    this.typeJobs.splice(jobId, 1);\n                }\n            }\n            await job.job();\n        }\n    }\n}\nexports.JsonLdParser = JsonLdParser;\nJsonLdParser.DEFAULT_PROCESSING_MODE = '1.1';\nJsonLdParser.ENTRY_HANDLERS = [\n    new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),\n    new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),\n    new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),\n    new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),\n    new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),\n    new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),\n    new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),\n    new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),\n    new EntryHandlerContainer_1.EntryHandlerContainer(),\n    new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),\n    new EntryHandlerPredicate_1.EntryHandlerPredicate(),\n    new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback(),\n];\n//# sourceMappingURL=JsonLdParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst ErrorCoded_1 = require(\"jsonld-context-parser/lib/ErrorCoded\");\nconst ContextTree_1 = require(\"./ContextTree\");\nconst JsonLdParser_1 = require(\"./JsonLdParser\");\n/**\n * Data holder for parsing information.\n */\nclass ParsingContext {\n    constructor(options) {\n        // Initialize settings\n        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });\n        this.streamingProfile = !!options.streamingProfile;\n        this.baseIRI = options.baseIRI;\n        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;\n        this.allowSubjectList = !!options.allowSubjectList;\n        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;\n        this.strictValues = !!options.strictValues;\n        this.validateValueIndexes = !!options.validateValueIndexes;\n        this.defaultGraph = options.defaultGraph;\n        this.rdfDirection = options.rdfDirection;\n        this.normalizeLanguageTags = options.normalizeLanguageTags;\n        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;\n        this.topLevelProperties = false;\n        this.activeProcessingMode = parseFloat(this.processingMode);\n        // Initialize stacks\n        this.processingStack = [];\n        this.processingType = [];\n        this.emittedStack = [];\n        this.idStack = [];\n        this.graphStack = [];\n        this.graphContainerTermStack = [];\n        this.listPointerStack = [];\n        this.contextTree = new ContextTree_1.ContextTree();\n        this.literalStack = [];\n        this.validationStack = [];\n        this.unaliasedKeywordCacheStack = [];\n        this.jsonLiteralStack = [];\n        this.unidentifiedValuesBuffer = [];\n        this.unidentifiedGraphsBuffer = [];\n        this.pendingContainerFlushBuffers = [];\n        this.parser = options.parser;\n        if (options.context) {\n            this.rootContext = this.parseContext(options.context);\n            this.rootContext.then((context) => this.validateContext(context));\n        }\n        else {\n            this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { '@base': this.baseIRI, '@__baseDocument': true } : {}));\n        }\n    }\n    /**\n     * Parse the given context with the configured options.\n     * @param {JsonLdContext} context A context to parse.\n     * @param {JsonLdContextNormalized} parentContext An optional parent context.\n     * @param {boolean} ignoreProtection If @protected term checks should be ignored.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.\n     */\n    async parseContext(context, parentContext, ignoreProtection) {\n        return this.contextParser.parse(context, {\n            baseIRI: this.baseIRI,\n            ignoreProtection,\n            normalizeLanguageTags: this.normalizeLanguageTags,\n            parentContext,\n            processingMode: this.activeProcessingMode,\n        });\n    }\n    /**\n     * Check if the given context is valid.\n     * If not, an error will be thrown.\n     * @param {JsonLdContextNormalized} context A context.\n     */\n    validateContext(context) {\n        const activeVersion = context.getContextRaw()['@version'];\n        if (activeVersion) {\n            if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);\n            }\n            else {\n                if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {\n                    throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                }\n                this.activeProcessingMode = activeVersion;\n            }\n        }\n    }\n    /**\n     * Get the context at the given path.\n     * @param {keys} keys The path of keys to get the context at.\n     * @param {number} offset The path offset, defaults to 1.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.\n     */\n    async getContext(keys, offset = 1) {\n        const keysOriginal = keys;\n        // Ignore array keys at the end\n        while (typeof keys[keys.length - 1] === 'number') {\n            keys = keys.slice(0, keys.length - 1);\n        }\n        // Handle offset on keys\n        if (offset) {\n            keys = keys.slice(0, -offset);\n        }\n        // Determine the closest context\n        const contextData = await this.getContextPropagationAware(keys);\n        const context = contextData.context;\n        // Process property-scoped contexts (high-to-low)\n        let contextRaw = context.getContextRaw();\n        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {\n            const key = keysOriginal[i];\n            const contextKeyEntry = contextRaw[key];\n            if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n                const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();\n                const propagate = !(key in scopedContext)\n                    || scopedContext[key]['@context']['@propagate']; // Propagation is true by default\n                if (propagate !== false || i === keysOriginal.length - 1 - offset) {\n                    contextRaw = scopedContext;\n                    // Clean up final context\n                    delete contextRaw['@propagate'];\n                    contextRaw[key] = Object.assign({}, contextRaw[key]);\n                    if ('@id' in contextKeyEntry) {\n                        contextRaw[key]['@id'] = contextKeyEntry['@id'];\n                    }\n                    delete contextRaw[key]['@context'];\n                    if (propagate !== false) {\n                        this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));\n                    }\n                }\n            }\n        }\n        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);\n    }\n    /**\n     * Get the context at the given path.\n     * Non-propagating contexts will be skipped,\n     * unless the context at that exact depth is retrieved.\n     *\n     * This ONLY takes into account context propagation logic,\n     * so this should usually not be called directly,\n     * call {@link #getContext} instead.\n     *\n     * @param keys The path of keys to get the context at.\n     * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.\n     */\n    async getContextPropagationAware(keys) {\n        const originalDepth = keys.length;\n        let contextData = null;\n        let hasApplicablePropertyScopedContext;\n        do {\n            hasApplicablePropertyScopedContext = false;\n            if (contextData && '@__propagateFallback' in contextData.context.getContextRaw()) {\n                // If a propagation fallback context has been set,\n                // fallback to that context and retry for the same depth.\n                contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()['@__propagateFallback']);\n            }\n            else {\n                if (contextData) {\n                    // If we had a previous iteration, jump to the parent of context depth.\n                    // We must do this because once we get here, last context had propagation disabled,\n                    // so we check its first parent instead.\n                    keys = keys.slice(0, contextData.depth - 1);\n                }\n                contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };\n            }\n            // Allow non-propagating contexts to propagate one level deeper\n            // if it defines a property-scoped context that is applicable for the current key.\n            // @see https://w3c.github.io/json-ld-api/tests/toRdf-manifest#tc012\n            const lastKey = keys[keys.length - 1];\n            if (lastKey in contextData.context.getContextRaw()) {\n                const lastKeyValue = contextData.context.getContextRaw()[lastKey];\n                if (lastKeyValue && typeof lastKeyValue === 'object' && '@context' in lastKeyValue) {\n                    hasApplicablePropertyScopedContext = true;\n                }\n            }\n        } while (contextData.depth > 0 // Root context has a special case\n            && contextData.context.getContextRaw()['@propagate'] === false // Stop loop if propagation is true\n            && contextData.depth !== originalDepth // Stop loop if requesting exact depth of non-propagating\n            && !hasApplicablePropertyScopedContext);\n        // Special case for root context that does not allow propagation.\n        // Fallback to empty context in that case.\n        if (contextData.depth === 0\n            && contextData.context.getContextRaw()['@propagate'] === false\n            && contextData.depth !== originalDepth) {\n            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});\n        }\n        return contextData;\n    }\n    /**\n     * Start a new job for parsing the given value.\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);\n    }\n    /**\n     * Flush the pending container flush buffers\n     * @return {boolean} If any pending buffers were flushed.\n     */\n    async handlePendingContainerFlushBuffers() {\n        if (this.pendingContainerFlushBuffers.length > 0) {\n            for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {\n                await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);\n                this.parser.flushStacks(pendingFlushBuffer.depth);\n            }\n            this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Emit the given quad into the output stream.\n     * @param {number} depth The depth the quad was generated at.\n     * @param {Quad} quad A quad to emit.\n     */\n    emitQuad(depth, quad) {\n        if (depth === 1) {\n            this.topLevelProperties = true;\n        }\n        this.parser.push(quad);\n    }\n    /**\n     * Emit the given error into the output stream.\n     * @param {Error} error An error to emit.\n     */\n    emitError(error) {\n        this.parser.emit('error', error);\n    }\n    /**\n     * Emit the given context into the output stream under the 'context' event.\n     * @param {JsonLdContext} context A context to emit.\n     */\n    emitContext(context) {\n        this.parser.emit('context', context);\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.\n     */\n    getUnidentifiedValueBufferSafe(depth) {\n        let buffer = this.unidentifiedValuesBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedValuesBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.\n     */\n    getUnidentifiedGraphBufferSafe(depth) {\n        let buffer = this.unidentifiedGraphsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedGraphsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * @return IExpandOptions The expand options for the active processing mode.\n     */\n    getExpandOptions() {\n        return ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];\n    }\n    /**\n     * Shift the stack at the given offset to the given depth.\n     *\n     * This will override anything in the stack at `depth`,\n     * and this will remove anything at `depth + depthOffset`\n     *\n     * @param depth The target depth.\n     * @param depthOffset The origin depth, relative to `depth`.\n     */\n    shiftStack(depth, depthOffset) {\n        // Copy the id stack value up one level so that the next job can access the id.\n        const deeperIdStack = this.idStack[depth + depthOffset];\n        if (deeperIdStack) {\n            this.idStack[depth] = deeperIdStack;\n            this.emittedStack[depth] = true;\n            delete this.idStack[depth + depthOffset];\n        }\n        // Shorten key stack\n        if (this.pendingContainerFlushBuffers.length) {\n            for (const buffer of this.pendingContainerFlushBuffers) {\n                if (buffer.depth >= depth + depthOffset) {\n                    buffer.depth -= depthOffset;\n                    buffer.keys.splice(depth, depthOffset);\n                }\n            }\n        }\n        // Splice stacks\n        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {\n            this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];\n            delete this.unidentifiedValuesBuffer[depth + depthOffset];\n        }\n        // TODO: also do the same for other stacks\n    }\n}\nexports.ParsingContext = ParsingContext;\nParsingContext.EXPAND_OPTIONS = {\n    1.0: {\n        allowPrefixForcing: false,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: false,\n    },\n    1.1: {\n        allowPrefixForcing: true,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: true,\n    },\n};\n//# sourceMappingURL=ParsingContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Utility functions and methods.\n */\nclass Util {\n    constructor(options) {\n        this.parsingContext = options.parsingContext;\n        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();\n        this.rdfFirst = this.dataFactory.namedNode(Util.RDF + 'first');\n        this.rdfRest = this.dataFactory.namedNode(Util.RDF + 'rest');\n        this.rdfNil = this.dataFactory.namedNode(Util.RDF + 'nil');\n        this.rdfType = this.dataFactory.namedNode(Util.RDF + 'type');\n        this.rdfJson = this.dataFactory.namedNode(Util.RDF + 'JSON');\n    }\n    /**\n     * Helper function to get the value of a context entry,\n     * or fallback to a certain value.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} contextKey A pre-defined JSON-LD key in context entries.\n     * @param {string} key A context entry key.\n     * @param {string} fallback A fallback value for when the given contextKey\n     *                          could not be found in the value with the given key.\n     * @return {string} The value of the given contextKey in the entry behind key in the given context,\n     *                  or the given fallback value.\n     */\n    static getContextValue(context, contextKey, key, fallback) {\n        const entry = context.getContextRaw()[key];\n        if (!entry) {\n            return fallback;\n        }\n        const type = entry[contextKey];\n        return type === undefined ? fallback : type;\n    }\n    /**\n     * Get the container type of the given key in the context.\n     *\n     * Should any context-scoping bugs should occur related to this in the future,\n     * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).\n     * This is because containers act 2 levels deep.\n     *\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The container type.\n     */\n    static getContextValueContainer(context, key) {\n        return Util.getContextValue(context, '@container', key, { '@set': true });\n    }\n    /**\n     * Get the value type of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueType(context, key) {\n        const valueType = Util.getContextValue(context, '@type', key, null);\n        if (valueType === '@none') {\n            return null;\n        }\n        return valueType;\n    }\n    /**\n     * Get the language of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueLanguage(context, key) {\n        return Util.getContextValue(context, '@language', key, context.getContextRaw()['@language'] || null);\n    }\n    /**\n     * Get the direction of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueDirection(context, key) {\n        return Util.getContextValue(context, '@direction', key, context.getContextRaw()['@direction'] || null);\n    }\n    /**\n     * Check if the given key in the context is a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {boolean} If the context value has a @reverse key.\n     */\n    static isContextValueReverse(context, key) {\n        return !!Util.getContextValue(context, '@reverse', key, null);\n    }\n    /**\n     * Get the @index of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The index.\n     */\n    static getContextValueIndex(context, key) {\n        return Util.getContextValue(context, '@index', key, context.getContextRaw()['@index'] || null);\n    }\n    /**\n     * Check if the given key refers to a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The property key.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property must be reversed.\n     */\n    static isPropertyReverse(context, key, parentKey) {\n        // '!==' is needed because reversed properties in a @reverse container should cancel each other out.\n        return parentKey === '@reverse' !== Util.isContextValueReverse(context, key);\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);\n    }\n    /**\n     * Check if the given first array (needle) is a prefix of the given second array (haystack).\n     * @param needle An array to check if it is a prefix.\n     * @param haystack An array to look in.\n     */\n    static isPrefixArray(needle, haystack) {\n        if (needle.length > haystack.length) {\n            return false;\n        }\n        for (let i = 0; i < needle.length; i++) {\n            if (needle[i] !== haystack[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Make sure that @id-@index pairs are equal over all array values.\n     * Reject otherwise.\n     * @param {any[]} value An array value.\n     * @return {Promise<void>} A promise rejecting if conflicts are present.\n     */\n    async validateValueIndexes(value) {\n        if (this.parsingContext.validateValueIndexes) {\n            const indexHashes = {};\n            for (const entry of value) {\n                if (entry && typeof entry === 'object') {\n                    const id = entry['@id'];\n                    const index = entry['@index'];\n                    if (id && index) {\n                        const existingIndexValue = indexHashes[id];\n                        if (existingIndexValue && existingIndexValue !== index) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);\n                        }\n                        indexHashes[id] = index;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert a given JSON value to an RDF term.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param value A JSON value.\n     * @param {number} depth The depth the value is at.\n     * @param {string[]} keys The path of keys.\n     * @return {Promise<RDF.Term[]>} An RDF term array.\n     */\n    async valueToTerm(context, key, value, depth, keys) {\n        // Skip further processing if we have an @type: @json\n        if (Util.getContextValueType(context, key) === '@json') {\n            return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];\n        }\n        const type = typeof value;\n        switch (type) {\n            case 'object':\n                // Skip if we have a null or undefined object\n                if (value === null || value === undefined) {\n                    return [];\n                }\n                // Special case for arrays\n                if (Array.isArray(value)) {\n                    // We handle arrays at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty context-based lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if ('@list' in Util.getContextValueContainer(context, key)) {\n                        if (value.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    await this.validateValueIndexes(value);\n                    return [];\n                }\n                // Handle property-scoped contexts\n                context = await this.getContextSelfOrPropertyScoped(context, key);\n                // Handle local context in the value\n                if ('@context' in value) {\n                    context = await this.parsingContext.parseContext(value['@context'], (await this.parsingContext.getContext(keys, 0)).getContextRaw());\n                }\n                // In all other cases, we have a hash\n                value = await this.unaliasKeywords(value, keys, depth, context); // Un-alias potential keywords in this hash\n                if ('@value' in value) {\n                    let val;\n                    let valueLanguage;\n                    let valueDirection;\n                    let valueType;\n                    let valueIndex; // We don't use the index, but we need to check its type for spec-compliance\n                    for (key in value) {\n                        const subValue = value[key];\n                        switch (key) {\n                            case '@value':\n                                val = subValue;\n                                break;\n                            case '@language':\n                                valueLanguage = subValue;\n                                break;\n                            case '@direction':\n                                valueDirection = subValue;\n                                break;\n                            case '@type':\n                                valueType = subValue;\n                                break;\n                            case '@index':\n                                valueIndex = subValue;\n                                break;\n                            default:\n                                throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                    }\n                    // Skip further processing if we have an @type: @json\n                    if (await this.unaliasKeyword(valueType, keys, depth, true, context) === '@json') {\n                        return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];\n                    }\n                    // Validate @value\n                    if (val === null) {\n                        return [];\n                    }\n                    if (typeof val === 'object') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);\n                    }\n                    // Validate @index\n                    if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== 'string') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);\n                    }\n                    // Validate @language and @direction\n                    if (valueLanguage) {\n                        if (typeof val !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {\n                            return [];\n                        }\n                        // Language tags are always normalized to lowercase in 1.0.\n                        if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1.0) {\n                            valueLanguage = valueLanguage.toLowerCase();\n                        }\n                    }\n                    if (valueDirection) {\n                        if (typeof val !== 'string') {\n                            throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {\n                            return [];\n                        }\n                    }\n                    // Check @language and @direction\n                    if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON\n                                .stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueLanguage) { // Check @language\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return [this.dataFactory.literal(val, valueLanguage)];\n                    }\n                    else if (valueDirection && this.parsingContext.rdfDirection) { // Check @direction\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueType) { // Validate @type\n                        if (typeof valueType !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        const typeTerm = this.createVocabOrBaseTerm(context, valueType);\n                        if (!typeTerm) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        if (typeTerm.termType !== 'NamedNode') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        return [this.dataFactory.literal(val, typeTerm)];\n                    }\n                    // We don't pass the context, because context-based things like @language should be ignored\n                    return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);\n                }\n                else if ('@set' in value) {\n                    // No other entries are allow in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    // No need to do anything here, this is handled at the deeper level.\n                    return [];\n                }\n                else if ('@list' in value) {\n                    // No other entries are allowed in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    const listValue = value[\"@list\"];\n                    // We handle lists at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty anonymous lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if (Array.isArray(listValue)) {\n                        if (listValue.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    else {\n                        // We only have a single list element here, so emit this directly as single element\n                        return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));\n                    }\n                }\n                else if ('@reverse' in value && typeof value['@reverse'] === 'boolean') {\n                    // We handle reverse properties at value level so we can emit earlier,\n                    // so this is handled already when we get here.\n                    return [];\n                }\n                else if ('@graph' in Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {\n                    // We are processing a graph container\n                    const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];\n                    return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];\n                }\n                else if (\"@id\" in value) {\n                    // Use deeper context if the value node contains other properties next to @id.\n                    if (Object.keys(value).length > 1) {\n                        context = await this.parsingContext.getContext(keys, 0);\n                    }\n                    // Handle local context in the value\n                    if ('@context' in value) {\n                        context = await this.parsingContext.parseContext(value['@context'], context.getContextRaw());\n                    }\n                    if (value[\"@type\"] === '@vocab') {\n                        return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value[\"@id\"]));\n                    }\n                    else {\n                        return this.nullableTermToArray(this.resourceToTerm(context, value[\"@id\"]));\n                    }\n                }\n                else {\n                    // Only make a blank node if at least one triple was emitted at the value's level.\n                    if (this.parsingContext.emittedStack[depth + 1]\n                        || (value && typeof value === 'object' && Object.keys(value).length === 0)) {\n                        return (this.parsingContext.idStack[depth + 1]\n                            || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]));\n                    }\n                    else {\n                        return [];\n                    }\n                }\n            case 'string':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));\n            case 'boolean':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(Util.XSD_BOOLEAN)));\n            case 'number':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? Util.XSD_INTEGER : Util.XSD_DOUBLE)));\n            default:\n                this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));\n                return [];\n        }\n    }\n    /**\n     * If the context defines a property-scoped context for the given key,\n     * that context will be returned.\n     * Otherwise, the given context will be returned as-is.\n     *\n     * This should be used for valueToTerm cases that are not objects.\n     * @param context A context.\n     * @param key A JSON key.\n     */\n    async getContextSelfOrPropertyScoped(context, key) {\n        const contextKeyEntry = context.getContextRaw()[key];\n        if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n            context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);\n        }\n        return context;\n    }\n    /**\n     * If the given term is null, return an empty array, otherwise return an array with the single given term.\n     * @param term A term.\n     */\n    nullableTermToArray(term) {\n        return term ? [term] : [];\n    }\n    /**\n     * Convert a given JSON key to an RDF predicate term,\n     * based on @vocab.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node.\n     */\n    predicateToTerm(context, key) {\n        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());\n        // Immediately return if the predicate was disabled in the context\n        if (!expanded) {\n            return null;\n        }\n        // Check if the predicate is a blank node\n        if (expanded[0] === '_' && expanded[1] === ':') {\n            if (this.parsingContext.produceGeneralizedRdf) {\n                return this.dataFactory.blankNode(expanded.substr(2));\n            }\n            else {\n                return null;\n            }\n        }\n        // Check if the predicate is a valid IRI\n        if (Util.isValidIri(expanded)) {\n            return this.dataFactory.namedNode(expanded);\n        }\n        else {\n            if (expanded && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term or blank node,\n     * based on @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    resourceToTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());\n        if (!Util.isValidIri(iri)) {\n            if (iri && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(iri);\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term.\n     * It will do this based on the @vocab,\n     * and fallback to @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    createVocabOrBaseTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const expandOptions = this.parsingContext.getExpandOptions();\n        let expanded = context.expandTerm(key, true, expandOptions);\n        if (expanded === key) {\n            expanded = context.expandTerm(key, false, expandOptions);\n        }\n        if (!Util.isValidIri(expanded)) {\n            if (expanded && this.parsingContext.strictValues && !expanded.startsWith('@')) {\n                this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(expanded);\n    }\n    /**\n     * Ensure that the given value becomes a string.\n     * @param {string | number} value A string or number.\n     * @param {NamedNode} datatype The intended datatype.\n     * @return {string} The returned string.\n     */\n    intToString(value, datatype) {\n        if (typeof value === 'number') {\n            if (Number.isFinite(value)) {\n                const isInteger = value % 1 === 0;\n                if (isInteger && (!datatype || datatype.value !== Util.XSD_DOUBLE)) {\n                    return Number(value).toString();\n                }\n                else {\n                    return value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n                }\n            }\n            else {\n                return value > 0 ? 'INF' : '-INF';\n            }\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Convert a given JSON string value to an RDF term.\n     * @param {number} depth The current stack depth.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param {string} value A JSON value.\n     * @param {NamedNode} defaultDatatype The default datatype for the given value.\n     * @return {RDF.Term} An RDF term or null.\n     */\n    stringValueToTerm(depth, context, key, value, defaultDatatype) {\n        // Check the datatype from the context\n        const contextType = Util.getContextValueType(context, key);\n        if (contextType) {\n            if (contextType === '@id') {\n                if (!defaultDatatype) {\n                    return this.resourceToTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else if (contextType === '@vocab') {\n                if (!defaultDatatype) {\n                    return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else {\n                defaultDatatype = this.dataFactory.namedNode(contextType);\n            }\n        }\n        // If we don't find such a datatype, check the language from the context\n        if (!defaultDatatype) {\n            const contextLanguage = Util.getContextValueLanguage(context, key);\n            const contextDirection = Util.getContextValueDirection(context, key);\n            if (contextDirection && this.parsingContext.rdfDirection) {\n                return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);\n            }\n            else {\n                return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);\n            }\n        }\n        // If all else fails, make a literal based on the default content type\n        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);\n    }\n    /**\n     * Create a literal for the given value with the given language and direction.\n     * Auxiliary quads may be emitted.\n     * @param {number} depth The current stack depth.\n     * @param {string} value A string value.\n     * @param {string} language A language tag.\n     * @param {string} direction A direction.\n     * @return {Term} An RDF term.\n     */\n    createLanguageDirectionLiteral(depth, value, language, direction) {\n        if (this.parsingContext.rdfDirection === 'i18n-datatype') {\n            // Create a datatyped literal, by encoding the language and direction into https://www.w3.org/ns/i18n#.\n            if (!language) {\n                language = '';\n            }\n            return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));\n        }\n        else {\n            // Reify the literal.\n            const valueNode = this.dataFactory.blankNode();\n            const graph = this.getDefaultGraph();\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'value'), this.dataFactory.literal(value), graph));\n            if (language) {\n                this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'language'), this.dataFactory.literal(language), graph));\n            }\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'direction'), this.dataFactory.literal(direction), graph));\n            return valueNode;\n        }\n    }\n    /**\n     * Stringify the given JSON object to a canonical JSON string.\n     * @param value Any valid JSON value.\n     * @return {string} A canonical JSON string.\n     */\n    valueToJsonString(value) {\n        return canonicalizeJson(value);\n    }\n    /**\n     * If the key is not a keyword, try to check if it is an alias for a keyword,\n     * and if so, un-alias it.\n     * @param {string} key A key, can be falsy.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth to\n     * @param {boolean} disableCache If the cache should be disabled\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<string>} A promise resolving to the key itself, or another key.\n     */\n    async unaliasKeyword(key, keys, depth, disableCache, context) {\n        // Numbers can not be an alias\n        if (Number.isInteger(key)) {\n            return key;\n        }\n        // Try to grab from cache if it was already un-aliased before.\n        if (!disableCache) {\n            const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];\n            if (cachedUnaliasedKeyword) {\n                return cachedUnaliasedKeyword;\n            }\n        }\n        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            context = context || await this.parsingContext.getContext(keys);\n            let unliased = context.getContextRaw()[key];\n            if (unliased && typeof unliased === 'object') {\n                unliased = unliased['@id'];\n            }\n            if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {\n                key = unliased;\n            }\n        }\n        return disableCache ? key : (this.parsingContext.unaliasedKeywordCacheStack[depth] = key);\n    }\n    /**\n     * Unalias the keyword of the parent.\n     * This adds a safety check if no parent exist.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<any>} A promise resolving to the parent key, or another key.\n     */\n    async unaliasKeywordParent(keys, depth) {\n        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);\n    }\n    /**\n     * Un-alias all keywords in the given hash.\n     * @param {{[p: string]: any}} hash A hash object.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth.\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.\n     */\n    async unaliasKeywords(hash, keys, depth, context) {\n        const newHash = {};\n        for (const key in hash) {\n            newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];\n        }\n        return newHash;\n    }\n    /**\n     * Check if we are processing a literal (including JSON literals) at the given depth.\n     * This will also check higher levels,\n     * because if a parent is a literal,\n     * then the deeper levels are definitely a literal as well.\n     * @param {number} depth The depth.\n     * @return {boolean} If we are processing a literal.\n     */\n    isLiteral(depth) {\n        for (let i = depth; i >= 0; i--) {\n            if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check how many parents should be skipped for checking the @graph for the given node.\n     *\n     * @param {number} depth The depth of the node.\n     * @param {any[]} keys An array of keys.\n     * @return {number} The graph depth offset.\n     */\n    async getDepthOffsetGraph(depth, keys) {\n        for (let i = depth - 1; i > 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@graph') {\n                // Skip further processing if we are already in an @graph-@id or @graph-@index container\n                const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i)).containers;\n                if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {\n                    return -1;\n                }\n                return depth - i - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if the given subject is of a valid type.\n     * This should be called when applying @reverse'd properties.\n     * @param {Term} subject A subject.\n     */\n    validateReverseSubject(subject) {\n        if (subject.termType === 'Literal') {\n            throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n        }\n    }\n    /**\n     * Get the default graph.\n     * @return {Term} An RDF term.\n     */\n    getDefaultGraph() {\n        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();\n    }\n    /**\n     * Get the current graph, while taking into account a graph that can be defined via @container: @graph.\n     * If not within a graph container, the default graph will be returned.\n     * @param keys The current keys.\n     * @param depth The current depth.\n     */\n    async getGraphContainerValue(keys, depth) {\n        // Default to default graph\n        let graph = this.getDefaultGraph();\n        // Check if we are in an @container: @graph.\n        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer\n            .getContainerHandler(this.parsingContext, keys, depth);\n        if ('@graph' in containers) {\n            // Get the graph from the stack.\n            const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);\n            const entry = this.parsingContext.graphContainerTermStack[depthContainer];\n            graph = entry ? entry[graphContainerIndex] : null;\n            // Set the graph in the stack if none has been set yet.\n            if (!graph) {\n                let graphId = null;\n                if ('@id' in containers) {\n                    const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);\n                    if (keyUnaliased !== null) {\n                        graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);\n                    }\n                }\n                if (!graphId) {\n                    graphId = this.dataFactory.blankNode();\n                }\n                if (!this.parsingContext.graphContainerTermStack[depthContainer]) {\n                    this.parsingContext.graphContainerTermStack[depthContainer] = {};\n                }\n                graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;\n            }\n        }\n        return graph;\n    }\n    /**\n     * Get the properties depth for retrieving properties.\n     *\n     * Typically, the properties depth will be identical to the given depth.\n     *\n     * The following exceptions apply:\n     * * When the parent is @reverse, the depth is decremented by one.\n     * * When @nest parents are found, the depth is decremented by the number of @nest parents.\n     * If in combination with the exceptions above an intermediary array is discovered,\n     * the depth is also decremented by this number of arrays.\n     *\n     * @param keys The current key chain.\n     * @param depth The current depth.\n     */\n    async getPropertiesDepth(keys, depth) {\n        let lastValidDepth = depth;\n        for (let i = depth - 1; i > 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                const parentKey = await this.unaliasKeyword(keys[i], keys, i);\n                if (parentKey === '@reverse') {\n                    return i;\n                }\n                else if (parentKey === '@nest') {\n                    lastValidDepth = i;\n                }\n                else {\n                    return lastValidDepth;\n                }\n            }\n        }\n        return lastValidDepth;\n    }\n    /**\n     * Get the key for the current container entry.\n     * @param key A key, can be falsy.\n     * @param keys The key chain.\n     * @param depth The current depth to get the key from.\n     * @return Promise resolving to the key.\n     *         Null will be returned for @none entries, with aliasing taken into account.\n     */\n    async getContainerKey(key, keys, depth) {\n        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);\n        return keyUnaliased === '@none' ? null : keyUnaliased;\n    }\n}\nexports.Util = Util;\nUtil.XSD = 'http://www.w3.org/2001/XMLSchema#';\nUtil.XSD_BOOLEAN = Util.XSD + 'boolean';\nUtil.XSD_INTEGER = Util.XSD + 'integer';\nUtil.XSD_DOUBLE = Util.XSD + 'double';\nUtil.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n//# sourceMappingURL=Util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIdentifier = void 0;\n/**\n * Container handler for @id.\n *\n * It assumes that the current key is the identifier of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerIdentifier {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        let id;\n        // First check if the child node already has a defined id.\n        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {\n            // Use the existing identifier\n            id = parsingContext.idStack[depth + 1][0];\n        }\n        else {\n            // Create the identifier\n            const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);\n            const maybeId = keyUnaliased !== null\n                ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth])\n                : util.dataFactory.blankNode();\n            // Do nothing if the id is invalid\n            if (!maybeId) {\n                parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n                return;\n            }\n            id = maybeId;\n            // Insert the id into the stack so that buffered children can make us of it.\n            parsingContext.idStack[depth + 1] = [id];\n        }\n        // Insert the id into the stack so that parents can make use of it.\n        // Insert it as an array because multiple id container entries may exist\n        let ids = parsingContext.idStack[depth];\n        if (!ids) {\n            ids = parsingContext.idStack[depth] = [];\n        }\n        // Only insert the term if it does not exist yet in the array.\n        if (!ids.some((term) => term.equals(id))) {\n            ids.push(id);\n        }\n        // Flush any pending flush buffers\n        if (!await parsingContext.handlePendingContainerFlushBuffers()) {\n            parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n        }\n    }\n}\nexports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;\n//# sourceMappingURL=ContainerHandlerIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIndex = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @index.\n *\n * This will ignore the current key and add this entry to the parent node.\n */\nclass ContainerHandlerIndex {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            const graphContainer = '@graph' in containers;\n            // Check if the container is a property-based container by checking if there is a valid @index.\n            const context = await parsingContext.getContext(keys);\n            const indexKey = keys[depth - 1];\n            const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);\n            if (indexPropertyRaw) {\n                // Validate the @index value\n                if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {\n                    throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                if (typeof indexPropertyRaw !== 'string') {\n                    throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // When @index is used, values must be node values, unless @type: @id is defined in the context\n                if (typeof value !== 'object') {\n                    // Error if we don't have @type: @id\n                    if (Util_1.Util.getContextValueType(context, indexKey) !== '@id') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                    }\n                    // Add an @id to the stack, so our expanded @index value can make use of it\n                    const id = util.resourceToTerm(context, value);\n                    if (id) {\n                        parsingContext.idStack[depth + 1] = [id];\n                    }\n                }\n                // Expand the @index value\n                const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);\n                if (indexProperty) {\n                    const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);\n                    if (graphContainer) {\n                        // When we're in a graph container, attach the index to the graph identifier\n                        const graphId = await util.getGraphContainerValue(keys, depth + 1);\n                        for (const indexValue of indexValues) {\n                            parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));\n                        }\n                    }\n                    else {\n                        // Otherwise, attach the index to the node identifier\n                        for (const indexValue of indexValues) {\n                            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false);\n                        }\n                    }\n                }\n            }\n            const depthOffset = graphContainer ? 2 : 1;\n            await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerIndex = ContainerHandlerIndex;\n//# sourceMappingURL=ContainerHandlerIndex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerLanguage = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Container handler for @language.\n *\n * It assumes that the current key is the language of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerLanguage {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        const language = await util.getContainerKey(keys[depth], keys, depth);\n        if (Array.isArray(value)) {\n            // No type-checking needed, will be handled on each value when this handler is called recursively.\n            value = value.map((subValue) => ({ '@value': subValue, '@language': language }));\n        }\n        else {\n            if (typeof value !== 'string') {\n                throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);\n            }\n            value = { '@value': value, '@language': language };\n        }\n        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerLanguage = ContainerHandlerLanguage;\n//# sourceMappingURL=ContainerHandlerLanguage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerType = void 0;\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @type.\n *\n * This will add this entry to the parent node, and use the current key as an rdf:type value.\n */\nclass ContainerHandlerType {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            if (typeof value === 'string') {\n                // Determine the @type of the container\n                const context = await parsingContext.getContext(keys);\n                const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);\n                // String values refer to node references\n                const id = containerTypeType === '@vocab'\n                    ? await util.createVocabOrBaseTerm(context, value)\n                    : await util.resourceToTerm(context, value);\n                if (id) {\n                    // Handle the value of this node as @id, which will also cause the predicate from above to be emitted.\n                    const subValue = { '@id': id.termType === 'NamedNode' ? id.value : value };\n                    await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);\n                    // Set the id in the stack so it can be used for the rdf:type handling later on\n                    parsingContext.idStack[depth + 1] = [id];\n                }\n            }\n            else {\n                // Other values are handled by handling them as a proper job\n                // Check needed for cases where entries don't have an explicit @id\n                const entryHasIdentifier = !!parsingContext.idStack[depth + 1];\n                // Handle the value of this node, which will also cause the predicate from above to be emitted.\n                if (!entryHasIdentifier) {\n                    delete parsingContext.idStack[depth]; // Force new (blank node) identifier\n                }\n                await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n                if (!entryHasIdentifier) {\n                    parsingContext.idStack[depth + 1] = parsingContext.idStack[depth]; // Copy the id to the child node, for @type\n                }\n            }\n            // Identify the type to emit.\n            const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);\n            const type = keyOriginal !== null\n                ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal)\n                : null;\n            if (type) {\n                // Push the type to the stack using the rdf:type predicate\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false);\n            }\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n    }\n}\nexports.ContainerHandlerType = ContainerHandlerType;\n//# sourceMappingURL=ContainerHandlerType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerArrayValue = void 0;\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of an array.\n */\nclass EntryHandlerArrayValue {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return typeof keys[depth] === 'number';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        let parentKey = await util.unaliasKeywordParent(keys, depth);\n        // Check if we have an anonymous list\n        if (parentKey === '@list') {\n            // Our value is part of an array\n            // Determine the list root key\n            let listRootKey = null;\n            let listRootDepth = 0;\n            for (let i = depth - 2; i > 0; i--) {\n                const keyOption = keys[i];\n                if (typeof keyOption === 'string' || typeof keyOption === 'number') {\n                    listRootDepth = i;\n                    listRootKey = keyOption;\n                    break;\n                }\n            }\n            if (listRootKey !== null) {\n                // Emit the given objects as list elements\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n            }\n        }\n        else if (parentKey === '@set') {\n            // Our value is part of a set, so we just add it to the parent-parent\n            await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);\n        }\n        else if (parentKey !== undefined && parentKey !== '@type') {\n            // Buffer our value using the parent key as predicate\n            // Determine the first parent key that is *not* an array key\n            // This is needed in case we have an @list container with nested arrays,\n            // where each of them should produce nested RDF lists.\n            for (let i = depth - 1; i > 0; i--) {\n                if (typeof keys[i] !== 'number') {\n                    parentKey = await util.unaliasKeyword(keys[i], keys, i);\n                    break;\n                }\n            }\n            // Check if the predicate is marked as an @list in the context\n            const parentContext = await parsingContext.getContext(keys.slice(0, -1));\n            if ('@list' in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {\n                // Our value is part of an array\n                // Emit the given objects as list elements\n                parsingContext.emittedStack[depth + 1] = true; // Ensure the creation of bnodes for empty nodes\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);\n                }\n            }\n            else {\n                // Copy the stack values up one level so that the next job can access them.\n                parsingContext.shiftStack(depth, 1);\n                // Execute the job one level higher\n                await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);\n                // Remove any defined contexts at this level to avoid it to propagate to the next array element.\n                parsingContext.contextTree.removeContext(keys.slice(0, -1));\n            }\n        }\n    }\n    async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {\n        // Buffer our value as an RDF list using the listRootKey as predicate\n        let listPointer = parsingContext.listPointerStack[depth];\n        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))['@value'] !== null) {\n            if (!listPointer || !listPointer.value) {\n                const linkTerm = util.dataFactory.blankNode();\n                listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };\n            }\n            else {\n                // rdf:rest links are always emitted before the next element,\n                // as the blank node identifier is only created at that point.\n                // Because of this reason, the final rdf:nil is emitted when the stack depth is decreased.\n                const newLinkTerm = util.dataFactory.blankNode();\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));\n                // Update the list pointer for the next element\n                listPointer.value = newLinkTerm;\n            }\n            // Emit a list element for the current value\n            // Omit rdf:first if the value is invalid\n            if (value) {\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));\n            }\n        }\n        else {\n            // A falsy list element if found.\n            // Mark it as an rdf:nil list until another valid list element comes in\n            if (!listPointer) {\n                listPointer = { listRootDepth, listId: util.rdfNil };\n            }\n        }\n        parsingContext.listPointerStack[depth] = listPointer;\n    }\n}\nexports.EntryHandlerArrayValue = EntryHandlerArrayValue;\n//# sourceMappingURL=EntryHandlerArrayValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerContainer = void 0;\nconst ContainerHandlerIdentifier_1 = require(\"../containerhandler/ContainerHandlerIdentifier\");\nconst ContainerHandlerIndex_1 = require(\"../containerhandler/ContainerHandlerIndex\");\nconst ContainerHandlerLanguage_1 = require(\"../containerhandler/ContainerHandlerLanguage\");\nconst ContainerHandlerType_1 = require(\"../containerhandler/ContainerHandlerType\");\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of a container type (like @index),\n * as specified by {@link IContainerHandler}.\n */\nclass EntryHandlerContainer {\n    /**\n     * Check fit the given container is a simple @graph container.\n     * Concretely, it will check if no @index or @id is active as well.\n     * @param containers A container hash.\n     */\n    static isSimpleGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length === 2) || Object.keys(containers).length === 1);\n    }\n    /**\n     * Check fit the given container is a complex @graph container.\n     * Concretely, it will check if @index or @id is active as well next to @graph.\n     * @param containers A container hash.\n     */\n    static isComplexGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length > 2)\n                || (!('@set' in containers) && Object.keys(containers).length > 1));\n    }\n    /**\n     * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.\n     * @param containers The applicable containers.\n     * @param depth The container depth.\n     * @param keys The array of keys.\n     * @return The graph index.\n     */\n    static getContainerGraphIndex(containers, depth, keys) {\n        let isSimpleGraphContainer = EntryHandlerContainer.isSimpleGraphContainer(containers);\n        let index = '';\n        for (let i = depth; i < keys.length; i++) {\n            if (!isSimpleGraphContainer || typeof keys[i] === 'number') {\n                index += ':' + keys[i];\n            }\n            // Only allow a second 'real' key if in a non-simple graph container.\n            if (!isSimpleGraphContainer && typeof keys[i] !== 'number') {\n                isSimpleGraphContainer = true;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the applicable container type at the given depth.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}\n     *          All applicable containers for the given depth,\n     *          the `depth` of the container root (can change when arrays are in the key chain),\n     *          and the `fallback` flag that indicates if the default container type was returned\n     *            (i.e., no dedicated container type is defined).\n     */\n    static async getContainerHandler(parsingContext, keys, depth) {\n        const fallback = {\n            containers: { '@set': true },\n            depth,\n            fallback: true,\n        };\n        // A flag that is enabled when @graph container should be tested in next iteration\n        let checkGraphContainer = false;\n        // Iterate from deeper to higher\n        const context = await parsingContext.getContext(keys, 2);\n        for (let i = depth - 1; i >= 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                // @graph containers without any other types are one level less deep, and require special handling\n                const containersSelf = Util_1.Util.getContextValue(context, '@container', keys[i], false);\n                if (containersSelf && EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {\n                    return {\n                        containers: containersSelf,\n                        depth: i + 1,\n                        fallback: false,\n                    };\n                }\n                const containersParent = Util_1.Util.getContextValue(context, '@container', keys[i - 1], false);\n                if (!containersParent) { // If we have the fallback container value\n                    if (checkGraphContainer) {\n                        // Return false if we were already expecting a @graph-@id of @graph-@index container\n                        return fallback;\n                    }\n                    // Check parent-parent, we may be in a @graph-@id of @graph-@index container, which have two levels\n                    checkGraphContainer = true;\n                }\n                else {\n                    // We had an invalid container next iteration, so we now have to check if we were in an @graph container\n                    const graphContainer = '@graph' in containersParent;\n                    // We're in a regular container\n                    for (const containerHandleName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n                        if (containersParent[containerHandleName]) {\n                            if (graphContainer) {\n                                // Only accept graph containers if their combined handlers can handle them.\n                                if (EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                                else {\n                                    return fallback;\n                                }\n                            }\n                            else {\n                                // Only accept if we were not expecting a @graph-@id of @graph-@index container\n                                if (checkGraphContainer) {\n                                    return fallback;\n                                }\n                                else {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    // Fail if no valid container handlers were found\n                    return fallback;\n                }\n            }\n        }\n        return fallback;\n    }\n    /**\n     * Check if we are handling a value at the given depth\n     * that is part of something that should be handled as a container,\n     * AND if this container should be buffered, so that it can be handled by a dedicated container handler.\n     *\n     * For instance, any container with @graph will NOT be buffered.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<boolean>} If we are in the scope of a container handler.\n     */\n    static async isBufferableContainerHandler(parsingContext, keys, depth) {\n        const handler = await EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);\n        return !handler.fallback && !('@graph' in handler.containers);\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return !!await this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);\n        for (const containerName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n            if (containers[containerName]) {\n                return {\n                    containers,\n                    handler: EntryHandlerContainer.CONTAINER_HANDLERS[containerName],\n                };\n            }\n        }\n        return null;\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);\n    }\n}\nexports.EntryHandlerContainer = EntryHandlerContainer;\nEntryHandlerContainer.CONTAINER_HANDLERS = {\n    '@id': new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),\n    '@index': new ContainerHandlerIndex_1.ContainerHandlerIndex(),\n    '@language': new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),\n    '@type': new ContainerHandlerType_1.ContainerHandlerType(),\n};\n//# sourceMappingURL=EntryHandlerContainer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerInvalidFallback = void 0;\n/**\n * A catch-all for properties, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerInvalidFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return true;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;\n//# sourceMappingURL=EntryHandlerInvalidFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerPredicate = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../Util\");\n/**\n * Interprets keys as predicates.\n * The most common case in JSON-LD processing.\n */\nclass EntryHandlerPredicate {\n    /**\n     * Handle the given predicate-object by either emitting it,\n     * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {Util} util A utility instance.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @param {Term} predicate The predicate.\n     * @param {Term} object The object.\n     * @param {boolean} reverse If the property is reversed.\n     * @return {Promise<void>} A promise resolving when handling is done.\n     */\n    static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse) {\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);\n        const depthPropertiesGraph = depth - depthOffsetGraph;\n        const subjects = parsingContext.idStack[depthProperties];\n        if (subjects) {\n            // Emit directly if the @id was already defined\n            for (const subject of subjects) {\n                // Check if we're in a @graph context\n                const atGraph = depthOffsetGraph >= 0;\n                if (atGraph) {\n                    const graphs = parsingContext.idStack[depthPropertiesGraph - 1];\n                    if (graphs) {\n                        for (const graph of graphs) {\n                            // Emit our quad if graph @id is known\n                            if (reverse) {\n                                util.validateReverseSubject(object);\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                            }\n                            else {\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                            }\n                        }\n                    }\n                    else {\n                        // Buffer our triple if graph @id is not known yet.\n                        if (reverse) {\n                            util.validateReverseSubject(object);\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject });\n                        }\n                        else {\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1)\n                                .push({ subject, predicate, object });\n                        }\n                    }\n                }\n                else {\n                    // Emit if no @graph was applicable\n                    const graph = await util.getGraphContainerValue(keys, depthProperties);\n                    if (reverse) {\n                        util.validateReverseSubject(object);\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                    }\n                    else {\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                    }\n                }\n            }\n        }\n        else {\n            // Buffer until our @id becomes known, or we go up the stack\n            if (reverse) {\n                util.validateReverseSubject(object);\n            }\n            parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse });\n        }\n    }\n    isPropertyHandler() {\n        return true;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = keys[depth];\n        if (key) {\n            const context = await parsingContext.getContext(keys);\n            if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {\n                // If this valid predicate is of type @json, mark it so in the stack so that no deeper handling of nodes occurs.\n                if (Util_1.Util.getContextValueType(context, key) === '@json') {\n                    parsingContext.jsonLiteralStack[depth + 1] = true;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return keys[depth];\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        const keyOriginal = keys[depth];\n        const context = await parsingContext.getContext(keys);\n        const predicate = await util.predicateToTerm(context, key);\n        if (predicate) {\n            const objects = await util.valueToTerm(context, key, value, depth, keys);\n            if (objects.length) {\n                for (let object of objects) {\n                    const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n                    if (value) {\n                        // Special case if our term was defined as an @list, but does not occur in an array,\n                        // In that case we just emit it as an RDF list with a single element.\n                        const listValueContainer = '@list' in Util_1.Util.getContextValueContainer(context, key);\n                        if (listValueContainer || value['@list']) {\n                            if (((listValueContainer && !Array.isArray(value) && !value['@list'])\n                                || (value['@list'] && !Array.isArray(value['@list'])))\n                                && object !== util.rdfNil) {\n                                const listPointer = util.dataFactory.blankNode();\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));\n                                object = listPointer;\n                            }\n                            // Lists are not allowed in @reverse'd properties\n                            if (reverse && !parsingContext.allowSubjectList) {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n                            }\n                        }\n                    }\n                    await EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse);\n                }\n            }\n        }\n    }\n}\nexports.EntryHandlerPredicate = EntryHandlerPredicate;\n//# sourceMappingURL=EntryHandlerPredicate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeyword = void 0;\n/**\n * An abstract keyword entry handler.\n */\nclass EntryHandlerKeyword {\n    constructor(keyword) {\n        this.keyword = keyword;\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return key === this.keyword;\n    }\n}\nexports.EntryHandlerKeyword = EntryHandlerKeyword;\n//# sourceMappingURL=EntryHandlerKeyword.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordGraph = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordGraph extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@graph');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // The current identifier identifies a graph for the deeper level.\n        parsingContext.graphStack[depth + 1] = true;\n    }\n}\nexports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;\n//# sourceMappingURL=EntryHandlerKeywordGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordNest = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @nest entries.\n */\nclass EntryHandlerKeywordNest extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@nest');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;\n//# sourceMappingURL=EntryHandlerKeywordNest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordType = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../../Util\");\nconst EntryHandlerPredicate_1 = require(\"../EntryHandlerPredicate\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordType extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@type');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keyOriginal = keys[depth];\n        // The current identifier identifies an rdf:type predicate.\n        // But we only emit it once the node closes,\n        // as it's possible that the @type is used to identify the datatype of a literal, which we ignore here.\n        const context = await parsingContext.getContext(keys);\n        const predicate = util.rdfType;\n        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n        // Handle multiple values if the value is an array\n        const elements = Array.isArray(value) ? value : [value];\n        for (const element of elements) {\n            if (typeof element !== 'string') {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));\n            }\n            const type = util.createVocabOrBaseTerm(context, element);\n            if (type) {\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse);\n            }\n        }\n        // Collect type-scoped contexts if they exist\n        let scopedContext = Promise.resolve(context);\n        let hasTypedScopedContext = false;\n        for (const element of elements.sort()) { // Spec requires lexicographical ordering\n            const typeContext = Util_1.Util.getContextValue(context, '@context', element, null);\n            if (typeContext) {\n                hasTypedScopedContext = true;\n                scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));\n            }\n        }\n        // Error if an out-of-order type-scoped context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType)\n            && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order type-scoped context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // If at least least one type-scoped context applies, set them in the tree.\n        if (hasTypedScopedContext) {\n            // Do not propagate by default\n            scopedContext = scopedContext.then((c) => {\n                if (!('@propagate' in c.getContextRaw())) {\n                    c.getContextRaw()['@propagate'] = false;\n                }\n                // Set the original context at this depth as a fallback\n                // This is needed when a context was already defined at the given depth,\n                // and this context needs to remain accessible from child nodes when propagation is disabled.\n                if (c.getContextRaw()['@propagate'] === false) {\n                    c.getContextRaw()['@__propagateFallback'] = context.getContextRaw();\n                }\n                return c;\n            });\n            // Set the new context in the context tree\n            parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);\n        }\n        // Flag that type has been processed at this depth\n        parsingContext.processingType[depth] = true;\n    }\n}\nexports.EntryHandlerKeywordType = EntryHandlerKeywordType;\n//# sourceMappingURL=EntryHandlerKeywordType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordValue = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @value entries.\n */\nclass EntryHandlerKeywordValue extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@value');\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        // If this is @value, mark it so in the stack so that no deeper handling of nodes occurs.\n        const key = keys[depth];\n        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {\n            parsingContext.literalStack[depth] = true;\n        }\n        return super.validate(parsingContext, util, keys, depth, inProperty);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === '@value';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // If the value is valid, indicate that we are processing a literal.\n        // The actual value will be determined at the parent level when the @value is part of an object,\n        // because we may want to take into account additional entries such as @language.\n        // See {@link Util.valueToTerm}\n        // Indicate that we are processing a literal, and that no later predicates should be parsed at this depth.\n        parsingContext.literalStack[depth] = true;\n        // Void any buffers that we may have accumulated up until now\n        delete parsingContext.unidentifiedValuesBuffer[depth];\n        delete parsingContext.unidentifiedGraphsBuffer[depth];\n        // Indicate that we have not emitted at this depth\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;\n//# sourceMappingURL=EntryHandlerKeywordValue.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/BlankNode\"), exports);\n__exportStar(require(\"./lib/DataFactory\"), exports);\n__exportStar(require(\"./lib/DefaultGraph\"), exports);\n__exportStar(require(\"./lib/Literal\"), exports);\n__exportStar(require(\"./lib/NamedNode\"), exports);\n__exportStar(require(\"./lib/Quad\"), exports);\n__exportStar(require(\"./lib/Variable\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n//# sourceMappingURL=BlankNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n//# sourceMappingURL=DefaultGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\nconst NamedNode_1 = require(\"./NamedNode\");\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n        }\n        else if (languageOrDatatype) {\n            this.language = '';\n            this.datatype = languageOrDatatype;\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language && other.datatype.equals(this.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n//# sourceMappingURL=Literal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n//# sourceMappingURL=NamedNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n//# sourceMappingURL=Quad.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n//# sourceMappingURL=Variable.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/Resolve\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeDotSegmentsOfPath = exports.removeDotSegments = exports.resolve = void 0;\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\nfunction resolve(relativeIRI, baseIRI) {\n    baseIRI = baseIRI || '';\n    const baseFragmentPos = baseIRI.indexOf('#');\n    // Ignore any fragments in the base IRI\n    if (baseFragmentPos > 0) {\n        baseIRI = baseIRI.substr(0, baseFragmentPos);\n    }\n    // Convert empty value directly to base IRI\n    if (!relativeIRI.length) {\n        // At this point, the baseIRI MUST be absolute, otherwise we error\n        if (baseIRI.indexOf(':') < 0) {\n            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n        }\n        return baseIRI;\n    }\n    // If the value starts with a query character, concat directly (but strip the existing query)\n    if (relativeIRI.startsWith('?')) {\n        const baseQueryPos = baseIRI.indexOf('?');\n        if (baseQueryPos > 0) {\n            baseIRI = baseIRI.substr(0, baseQueryPos);\n        }\n        return baseIRI + relativeIRI;\n    }\n    // If the value starts with a fragment character, concat directly\n    if (relativeIRI.startsWith('#')) {\n        return baseIRI + relativeIRI;\n    }\n    // Ignore baseIRI if it is empty\n    if (!baseIRI.length) {\n        const relativeColonPos = relativeIRI.indexOf(':');\n        if (relativeColonPos < 0) {\n            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);\n        }\n        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);\n    }\n    // Ignore baseIRI if the value is absolute\n    const valueColonPos = relativeIRI.indexOf(':');\n    if (valueColonPos >= 0) {\n        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // At this point, the baseIRI MUST be absolute, otherwise we error\n    const baseColonPos = baseIRI.indexOf(':');\n    if (baseColonPos < 0) {\n        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n    }\n    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);\n    // Inherit the baseIRI scheme if the value starts with '//'\n    if (relativeIRI.indexOf('//') === 0) {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n    let baseSlashAfterColonPos;\n    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n        // If there is no additional '/' after the '//'.\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n        if (baseSlashAfterColonPos < 0) {\n            // If something other than a '/' follows the '://', append the value after a '/',\n            // otherwise, prefix the value with only the baseIRI scheme.\n            if (baseIRI.length > baseColonPos + 3) {\n                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n            else {\n                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n        }\n    }\n    else {\n        // If there is not even a single '/' after the ':'\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);\n        if (baseSlashAfterColonPos < 0) {\n            // If we don't have a '/' after the ':',\n            // prefix the value with only the baseIRI scheme.\n            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n        }\n    }\n    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n    if (relativeIRI.indexOf('/') === 0) {\n        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n    }\n    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');\n    // Ignore everything after the last '/' in the baseIRI path\n    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);\n        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n        // This change is only allowed if there is something else following the path\n        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n            relativeIRI = relativeIRI.substr(1);\n        }\n    }\n    // Prefix the value with the baseIRI path where\n    relativeIRI = baseIRIPath + relativeIRI;\n    // Remove dot segment from the IRI\n    relativeIRI = removeDotSegments(relativeIRI);\n    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\nfunction removeDotSegments(path) {\n    // Prepare a buffer with segments between each '/.\n    // Each segment represents an array of characters.\n    const segmentBuffers = [];\n    let i = 0;\n    while (i < path.length) {\n        // Remove '/.' or '/..'\n        switch (path[i]) {\n            case '/':\n                if (path[i + 1] === '.') {\n                    if (path[i + 2] === '.') {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Go to parent directory,\n                        // so we remove a parent segment\n                        segmentBuffers.pop();\n                        // Ensure that we end with a slash if there is a trailing '/..'\n                        if (!path[i + 3]) {\n                            segmentBuffers.push([]);\n                        }\n                        i += 3;\n                    }\n                    else {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Ensure that we end with a slash if there is a trailing '/.'\n                        if (!path[i + 2]) {\n                            segmentBuffers.push([]);\n                        }\n                        // Go to the current directory,\n                        // so we do nothing\n                        i += 2;\n                    }\n                }\n                else {\n                    // Start a new segment\n                    segmentBuffers.push([]);\n                    i++;\n                }\n                break;\n            case '#':\n            case '?':\n                // Query and fragment string should be appended unchanged\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n                // Break the while loop\n                i = path.length;\n                break;\n            default:\n                // Not a special character, just append it to our buffer\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n                i++;\n                break;\n        }\n    }\n    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');\n}\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n    // Determine where we should start looking for the first '/' that indicates the start of the path\n    let searchOffset = colonPosition + 1;\n    if (colonPosition >= 0) {\n        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n            searchOffset = colonPosition + 3;\n        }\n    }\n    else {\n        if (iri[0] === '/' && iri[1] === '/') {\n            searchOffset = 2;\n        }\n    }\n    // Determine the path\n    const pathSeparator = iri.indexOf('/', searchOffset);\n    if (pathSeparator < 0) {\n        return iri;\n    }\n    const base = iri.substr(0, pathSeparator);\n    const path = iri.substr(pathSeparator);\n    // Remove dot segments from the path\n    return base + removeDotSegments(path);\n}\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n    return !character || character === '#' || character === '?' || character === '/';\n}\n//# sourceMappingURL=Resolve.js.map"],"names":["Sink","ParserStream","Parser","constructor","options","super","module","exports","rdf","JsonLdParser","Transform","relativeIriProtocol","termCleanup","factory","term","termType","value","startsWith","namedNode","slice","length","quadCleanup","cleanup","quad","subject","predicate","object","graph","input","baseIRI","context","parser","dataFactory","streamingProfile","pipe","transform","objectMode","encoding","callback","on","Object","entries","forEach","prefix","iri","emit","err","destroy","serialize","toJSON","JSON","stringify","Array","isArray","reduce","t","cv","ci","comma","undefined","keys","sort","self","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","isDataView","obj","DataView","prototype","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","indexOf","toString","call","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","done","Headers","headers","this","map","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","i","fromCharCode","join","bufferClone","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","get","type","rejected","Error","then","text","decode","json","parse","oldValue","has","hasOwnProperty","thisArg","push","values","methods","normalizeMethod","method","upcased","toUpperCase","Request","url","credentials","mode","signal","referrer","form","trim","split","bytes","replace","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","key","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","DOMException","message","stack","create","fetch","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","defineProperty","COMPATIBLE_ENCODING_PATTERN","WS_TRIM_PATTERN","WS_CHAR_PATTERN","WS_FOLD_PATTERN","DELIMITER_PATTERN","WS_DELIMITER_PATTERN","TOKEN_PATTERN","STATE","IDLE","URI","ATTR","hasWhitespace","skipWhitespace","offset","needsQuotes","shallowCompareObjects","object1","object2","every","Link","refs","rel","links","attr","link","setUnique","some","ref","state","expandRelations","end","uri","attrValue","isSingleOccurenceAttr","parseExtendedValue","formatAttribute","isCompatibleEncoding","isTokenAttr","escapeQuotes","rels","assign","exec","language","formatExtendedAttribute","data","encodedValue","Buffer","isBuffer","encodeURIComponent","item","__createBinding","o","m","k","k2","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","__exportStar","p","defaultExpandOptions","ContextParser","relative_to_absolute_iri_1","ErrorCoded_1","FetchDocumentLoader_1","JsonLdContextNormalized_1","Util_1","canonicalizeJson","documentLoader","FetchDocumentLoader","documentCache","validateContext","skipValidation","expandContentTypeToBase","remoteContextsDepthLimit","redirectSchemaOrgHttps","static","strictRange","errorCode","ErrorCoded","Util","REGEX_LANGUAGE_TAG","strictValues","ERROR_CODES","INVALID_BASE_DIRECTION","REGEX_DIRECTION_TAG","idifyReverseTerms","isValidKeyword","INVALID_IRI_MAPPING","isPotentialKeyword","expandPrefixedTerms","contextRaw","getContextRaw","EXPAND_KEYS_BLACKLIST","isReservedInternalKeyword","keyValue","ALIAS_DOMAIN_BLACKLIST","KEYWORD_REDEFINITION","ALIAS_RANGE_BLACKLIST","getContextValueId","INVALID_KEYWORD_ALIAS","INVALID_TERM_DEFINITION","isPrefixValue","changed","expandTerm","id","canAddIdEntry","isValidIri","newId","normalize","processingMode","normalizeLanguageTags","containersToHash","newValue","containerValue","applyScopedProtected","isTermProtected","validateKeywordRedefinitions","contextBefore","contextAfter","expandOptions","isPrefix","isSimpleTermDefinitionPrefix","valueBefore","valueAfter","PROTECTED_TERM_REDEFINITION","validate","valueType","substr","INVALID_VOCAB_MAPPING","INVALID_BASE_IRI","validateLanguage","INVALID_DEFAULT_LANGUAGE","INVALID_VERSION_VALUE","validateDirection","INVALID_CONTEXT_ENTRY","INVALID_PROPAGATE_VALUE","getPrefix","CYCLIC_IRI_MAPPING","isValidIriWeak","JsonLdContextNormalized","isCompactIri","objectKey","objectValue","INVALID_TYPE_MAPPING","INVALID_REVERSE_PROPERTY","CONTAINERS_1_0","INVALID_CONTAINER_MAPPING","CONTAINERS","INVALID_LANGUAGE_MAPPING","INVALID_PREFIX_VALUE","INVALID_NEST_VALUE","applyBaseEntry","inheritFromParent","parentContext","external","normalizeContextIri","contextIri","_a","async","ignoreScopedContexts","ignoreProtection","ignoreRemoteScopedContexts","INVALID_SCOPED_CONTEXT","minimalProcessing","parentContextInitial","DEFAULT_PROCESSING_MODE","remoteContexts","CONTEXT_OVERFLOW","hasProtectedTerms","INVALID_CONTEXT_NULLIFICATION","overriddenLoad","getOverriddenLoad","parsedStringContext","load","contextIris","contexts","all","subContext","reducedContexts","accContextPromise","contextEntry","accContext","newContext","importContext","INVALID_IMPORT_VALUE","loadImportContext","newContextWrapped","parseInnerContexts","INVALID_LOCAL_CONTEXT","cached","document","LOADING_REMOTE_CONTEXT_FAILED","INVALID_REMOTE_CONTEXT","RECURSIVE_CONTEXT_INCLUSION","importContextIri","allowPrefixForcing","allowPrefixNonGenDelims","allowVocabRelativeToBase","code","http_link_header_1","fetcher","accept","mediaType","colonPos","alternateUrl","linkHeader","LOADING_DOCUMENT_FAILED","ContextParser_1","expandVocab","contextValue","validIriMapping","vocab","vocabRelative","base","potentialKeyword","contextPrefixValue","compactIri","shortestPrefixing","suffix","separatorPos","charAt","isPrefixIriEndingWithGenDelim","keyword","KEYWORD_REGEX","prefixIri","ENDS_WITH_GEN_DELIM","Boolean","IRI_REGEX","IRI_REGEX_WEAK","VALID_KEYWORDS","ContextTree","subTrees","getContext","head","tail","subTree","depth","setContext","removeContext","path","jsonld_context_parser_1","stream_1","EntryHandlerArrayValue_1","EntryHandlerContainer_1","EntryHandlerInvalidFallback_1","EntryHandlerPredicate_1","EntryHandlerKeywordContext_1","EntryHandlerKeywordGraph_1","EntryHandlerKeywordId_1","EntryHandlerKeywordIncluded_1","EntryHandlerKeywordNest_1","EntryHandlerKeywordType_1","EntryHandlerKeywordUnknownFallback_1","EntryHandlerKeywordValue_1","ParsingContext_1","readableObjectMode","parsingContext","ParsingContext","util","jsonParser","contextJobs","typeJobs","contextAwaitingJobs","lastDepth","lastKeys","lastOnValueJob","attachJsonParserListeners","endsWith","MULTIPLE_CONTEXT_LINK_HEADERS","ignoreMissingContextLinkHeader","contentType","match","import","stream","output","PassThrough","parsed","_transform","chunk","write","lastDepthCheck","flushStacks","listPointer","listPointerStack","rdfRest","rdfNil","getDefaultGraph","listId","listHead","idStack","listRootDepth","splice","EntryHandlerContainer","isBufferableContainerHandler","pendingContainerFlushBuffers","flushBuffer","unaliasKeyword","parentKey","unaliasKeywordParent","emittedStack","handleKey","INVALID_REVERSE_PROPERTY_MAP","inProperty","validationStack","property","Math","max","validationResult","validateKey","valid","isLiteral","entryHandler","ENTRY_HANDLERS","testResult","handle","isStackProcessor","processingStack","validateValueIndexes","unaliasedKeywordCacheStack","processingType","graphStack","graphContainerTermStack","jsonLiteralStack","literalStack","subjects","blankNode","valueBuffer","unidentifiedValuesBuffer","depthOffsetGraph","getDepthOffsetGraph","graphs","getGraphContainerValue","bufferedValue","reverse","emitQuad","subGraphBuffer","getUnidentifiedGraphBufferSafe","graphBuffer","unidentifiedGraphsBuffer","topLevelProperties","isPropertyHandler","onValue","fill","v","isParsingContextInner","valueJobCb","newOnValueJob","contextTree","jobs","job","executeBufferedJobs","onError","applicableTypeJobs","applicableTypeJobIds","typeJob","isPrefixArray","sortedTypeJobs","job1","job2","sortedApplicableTypeJobIds","jobId","EntryHandlerArrayValue","EntryHandlerKeywordContext","EntryHandlerKeywordId","EntryHandlerKeywordIncluded","EntryHandlerKeywordGraph","EntryHandlerKeywordNest","EntryHandlerKeywordType","EntryHandlerKeywordValue","EntryHandlerKeywordUnknownFallback","EntryHandlerPredicate","EntryHandlerInvalidFallback","ContextTree_1","JsonLdParser_1","contextParser","skipContextValidation","produceGeneralizedRdf","allowSubjectList","defaultGraph","rdfDirection","streamingProfileAllowOutOfOrderPlainType","activeProcessingMode","parseFloat","rootContext","parseContext","activeVersion","PROCESSING_MODE_CONFLICT","keysOriginal","contextData","getContextPropagationAware","contextKeyEntry","scopedContext","propagate","originalDepth","hasApplicablePropertyScopedContext","lastKey","lastKeyValue","pendingFlushBuffer","emitError","emitContext","getUnidentifiedValueBufferSafe","getExpandOptions","EXPAND_OPTIONS","shiftStack","depthOffset","deeperIdStack","rdf_data_factory_1","DataFactory","rdfFirst","RDF","rdfType","rdfJson","contextKey","fallback","entry","getContextValue","isContextValueReverse","needle","haystack","indexHashes","index","existingIndexValue","CONFLICTING_INDEXES","getContextValueType","literal","valueToJsonString","getContextValueContainer","getContextSelfOrPropertyScoped","unaliasKeywords","val","valueLanguage","valueDirection","valueIndex","subValue","INVALID_VALUE_OBJECT","INVALID_VALUE_OBJECT_VALUE","INVALID_INDEX_VALUE","INVALID_LANGUAGE_TAGGED_VALUE","INVALID_LANGUAGE_TAGGED_STRING","nullableTermToArray","createLanguageDirectionLiteral","INVALID_TYPED_VALUE","typeTerm","createVocabOrBaseTerm","valueToTerm","INVALID_SET_OR_LIST_OBJECT","listValue","graphContainerEntries","resourceToTerm","stringValueToTerm","XSD_BOOLEAN","XSD_INTEGER","XSD_DOUBLE","predicateToTerm","expanded","intToString","datatype","Number","isFinite","isInteger","toExponential","defaultDatatype","contextType","contextLanguage","getContextValueLanguage","contextDirection","getContextValueDirection","direction","valueNode","disableCache","cachedUnaliasedKeyword","unliased","hash","newHash","containers","getContainerHandler","isComplexGraphContainer","validateReverseSubject","INVALID_REVERSE_PROPERTY_VALUE","depthContainer","graphContainerIndex","getContainerGraphIndex","graphId","keyUnaliased","getContainerKey","lastValidDepth","XSD","ContainerHandlerIdentifier","canCombineWithGraph","maybeId","ids","equals","handlePendingContainerFlushBuffers","ContainerHandlerIndex","graphContainer","indexKey","indexPropertyRaw","getContextValueIndex","indexProperty","indexValues","indexValue","handlePredicateObject","ContainerHandlerLanguage","INVALID_LANGUAGE_MAP_VALUE","ContainerHandlerType","containerTypeType","entryHasIdentifier","keyOriginal","listRootKey","keyOption","handleListElement","valueOriginal","listRootKeys","newLinkTerm","linkTerm","ContainerHandlerIdentifier_1","ContainerHandlerIndex_1","ContainerHandlerLanguage_1","ContainerHandlerType_1","isSimpleGraphContainer","checkGraphContainer","containersSelf","containersParent","containerHandleName","CONTAINER_HANDLERS","handler","containerName","depthProperties","getPropertiesDepth","depthPropertiesGraph","atGraph","objects","isPropertyReverse","listValueContainer","EntryHandlerKeyword","EntryHandlerKeyword_1","INVALID_STREAMING_KEY_ORDER","INVALID_ID_VALUE","COLLIDING_KEYWORDS","INVALID_INCLUDED_VALUE","valueUnliased","elements","element","INVALID_TYPE_VALUE","hasTypedScopedContext","typeContext","c","keywordType","VALID_KEYWORDS_TYPES","INVALID_REVERSE_VALUE","BlankNode","other","BlankNode_1","DefaultGraph_1","Literal_1","NamedNode_1","Quad_1","Variable_1","dataFactoryCounter","blankNodeCounter","blankNodePrefix","NamedNode","languageOrDatatype","Literal","variable","Variable","DefaultGraph","INSTANCE","Quad","fromTerm","original","XSD_STRING","fromQuad","resetBlankNodeCounter","RDF_LANGUAGE_STRING","relativeIRI","baseFragmentPos","baseQueryPos","relativeColonPos","removeDotSegmentsOfPath","valueColonPos","baseColonPos","baseIRIScheme","baseSlashAfterColonPos","removeDotSegments","baseIRIPath","baseIRILastSlashPos","lastIndexOf","segmentBuffers","isCharacterAllowedAfterRelativePathSegment","pop","colonPosition","searchOffset","pathSeparator","character"],"sourceRoot":""}