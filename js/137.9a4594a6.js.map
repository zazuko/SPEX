{"version":3,"file":"js/137.9a4594a6.js","mappings":"0GAAA,MAAMA,EAAmB,EAAQ,OAC3BC,EAAO,EAAQ,OAErB,MAAMC,UAAmBD,EACvBE,cACEC,MAAMJ,EACR,EAGFK,EAAOC,QAAUJ,C,wBCTjB,MAAMK,EAAiB,wBACjBC,EAAqB,EAAQ,OAEnC,MAAMR,UAAyBQ,EAC7BL,YAAaM,GACXL,MAAMK,EAAO,CACXC,IAAKC,GAAQJ,EAAeI,GAAQ,MAExC,EAGFN,EAAOC,QAAUN,C,oBCXjB,MAAMC,EACJE,YAAaS,EAAMC,GACjBC,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,CACjB,CAEAE,OAAQN,EAAOI,GACb,MAAMG,EAAS,IAAIF,KAAKF,KAAKH,EAAOQ,OAAOC,OAAO,CAAC,EAAGJ,KAAKD,QAASA,IAYpE,OAVAJ,EAAMU,GAAG,OAAO,KACTH,EAAOI,UACVJ,EAAOK,KAAK,MACd,IAGFZ,EAAMU,GAAG,SAAUG,IACjBN,EAAOK,KAAK,QAASC,EAAG,IAGnBN,CACT,EAGFX,EAAOC,QAAUL,C,wBCvBjB,MAAMU,EAAO,EAAQ,OACfY,EAAO,EAAQ,MAErBlB,EAAOC,QAAU,CACfC,eAAgBI,EAChBa,eAAgBD,E,oBCLlB,SAASE,EAAWA,GAClB,MAAO,KAAOA,EAAUC,KAC1B,CAEArB,EAAOC,QAAUmB,C,mBCJjB,SAASE,EAAcA,GACrB,MAAO,EACT,CAEAtB,EAAOC,QAAUqB,C,wBCJjB,MAAMC,EAAY,EAAQ,OAEpBC,EAAa,IAAIC,OAAO,eACxBC,EAAgB,IAAID,OAAO,cAAe,KAE1CE,EAAmB,CACvB,IAAK,MACL,KAAM,OACN,KAAM,MACN,KAAM,OAGR,SAASC,EAAeC,GACtB,OAAOF,EAAiBE,EAC1B,CAEA,SAASC,EAAaT,GACpB,OAAIG,EAAWO,KAAKV,GACXA,EAAMW,QAAQN,EAAeE,GAG/BP,CACT,CAEA,SAASY,EAASA,GAChB,MAAMC,EAAeJ,EAAYG,EAAQZ,OAEzC,MAA+B,4CAA3BY,EAAQE,SAASd,MACZ,IAAMa,EAAe,IAGC,0DAA3BD,EAAQE,SAASd,MACZ,IAAMa,EAAe,KAAOD,EAAQG,SAGtC,IAAMF,EAAe,MAAQX,EAAUU,EAAQE,SACxD,CAEAnC,EAAOC,QAAUgC,C,oBCtCjB,SAASV,EAAWA,GAClB,MAAO,IAAMA,EAAUF,MAAQ,GACjC,CAEArB,EAAOC,QAAUsB,C,wBCJjB,MAAML,EAAO,EAAQ,MAErB,SAASZ,EAAMA,GACb,MAAM+B,EAAgBnB,EAAKZ,EAAKgC,SAC1BC,EAAkBrB,EAAKZ,EAAKkC,WAC5BC,EAAevB,EAAKZ,EAAKoC,QACzBC,EAAczB,EAAKZ,EAAKsC,OAE9B,MAAO,GAAGP,KAAiBE,KAAmBE,KAAgBE,EAAcA,EAAc,IAAM,KAClG,CAEA3C,EAAOC,QAAUK,C,uBCXjB,MAAMc,EAAY,EAAQ,OACpBE,EAAe,EAAQ,MACvBW,EAAU,EAAQ,OAClBV,EAAY,EAAQ,OACpBsB,EAAW,EAAQ,OAEzB,SAAS3B,EAAMA,GACb,OAAQA,EAAK4B,UACX,IAAK,YACH,OAAO1B,EAAUF,GACnB,IAAK,eACH,OAAOI,EAAaJ,GACtB,IAAK,UACH,OAAOe,EAAQf,GACjB,IAAK,YACH,OAAOK,EAAUL,GACnB,IAAK,WACH,OAAO2B,EAAS3B,GAClB,QACE,OAEN,CAEAlB,EAAOC,QAAUiB,C,oBCvBjB,SAAS2B,EAAUA,GACjB,MAAO,IAAMA,EAASxB,KACxB,CAEArB,EAAOC,QAAU4C,C","sources":["webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/serializer-ntriples/index.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/serializer-ntriples/lib/SerializerStream.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/sink/index.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/to-ntriples/index.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/to-ntriples/lib/blankNode.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/to-ntriples/lib/defaultGraph.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/to-ntriples/lib/literal.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/to-ntriples/lib/namedNode.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/to-ntriples/lib/quad.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/to-ntriples/lib/term.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/to-ntriples/lib/variable.js"],"sourcesContent":["const SerializerStream = require('./lib/SerializerStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Serializer extends Sink {\n  constructor () {\n    super(SerializerStream)\n  }\n}\n\nmodule.exports = Serializer\n","const quadToNTriples = require('@rdfjs/to-ntriples').quadToNTriples\nconst ReadableToReadable = require('readable-to-readable')\n\nclass SerializerStream extends ReadableToReadable {\n  constructor (input) {\n    super(input, {\n      map: quad => quadToNTriples(quad) + '\\n'\n    })\n  }\n}\n\nmodule.exports = SerializerStream\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","const quad = require('./lib/quad')\nconst term = require('./lib/term')\n\nmodule.exports = {\n  quadToNTriples: quad,\n  termToNTriples: term\n}\n","function blankNode (blankNode) {\n  return '_:' + blankNode.value // TODO: escape special chars\n}\n\nmodule.exports = blankNode\n","function defaultGraph (defaultGraph) {\n  return ''\n}\n\nmodule.exports = defaultGraph\n","const namedNode = require('./namedNode')\n\nconst echarRegEx = new RegExp('[\"\\\\\\\\\\n\\r]') // eslint-disable-line no-control-regex\nconst echarRegExAll = new RegExp('[\"\\\\\\\\\\n\\r]', 'g') // eslint-disable-line no-control-regex\n\nconst echarReplacement = {\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r'\n}\n\nfunction echarReplacer (char) {\n  return echarReplacement[char]\n}\n\nfunction escapeValue (value) {\n  if (echarRegEx.test(value)) {\n    return value.replace(echarRegExAll, echarReplacer)\n  }\n\n  return value\n}\n\nfunction literal (literal) {\n  const escapedValue = escapeValue(literal.value)\n\n  if (literal.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\n    return '\"' + escapedValue + '\"'\n  }\n\n  if (literal.datatype.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString') {\n    return '\"' + escapedValue + '\"@' + literal.language\n  }\n\n  return '\"' + escapedValue + '\"^^' + namedNode(literal.datatype)\n}\n\nmodule.exports = literal\n","function namedNode (namedNode) {\n  return '<' + namedNode.value + '>' // TODO: escape special chars\n}\n\nmodule.exports = namedNode\n","const term = require('./term')\n\nfunction quad (quad) {\n  const subjectString = term(quad.subject)\n  const predicateString = term(quad.predicate)\n  const objectString = term(quad.object)\n  const graphString = term(quad.graph)\n\n  return `${subjectString} ${predicateString} ${objectString} ${graphString ? graphString + ' ' : ''}.`\n}\n\nmodule.exports = quad\n","const blankNode = require('./blankNode')\nconst defaultGraph = require('./defaultGraph')\nconst literal = require('./literal')\nconst namedNode = require('./namedNode')\nconst variable = require('./variable')\n\nfunction term (term) {\n  switch (term.termType) {\n    case 'BlankNode':\n      return blankNode(term)\n    case 'DefaultGraph':\n      return defaultGraph(term)\n    case 'Literal':\n      return literal(term)\n    case 'NamedNode':\n      return namedNode(term)\n    case 'Variable':\n      return variable(term)\n    default:\n      return undefined\n  }\n}\n\nmodule.exports = term\n","function variable (variable) {\n  return '?' + variable.value // TODO: escape special chars\n}\n\nmodule.exports = variable\n"],"names":["SerializerStream","Sink","Serializer","constructor","super","module","exports","quadToNTriples","ReadableToReadable","input","map","quad","Impl","options","this","import","output","Object","assign","on","readable","emit","err","term","termToNTriples","blankNode","value","defaultGraph","namedNode","echarRegEx","RegExp","echarRegExAll","echarReplacement","echarReplacer","char","escapeValue","test","replace","literal","escapedValue","datatype","language","subjectString","subject","predicateString","predicate","objectString","object","graphString","graph","variable","termType"],"sourceRoot":""}