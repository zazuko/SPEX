{"version":3,"file":"js/833.8d60a10a.js","mappings":"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","sources":["webpack://@zazuko/spex/./node_modules/@graphy/content.ttl.write/main.js"],"sourcesContent":["\n\n\n// queueMicrotask shim\n{\n\t// not defined or not a function\n\tif('function' !== typeof queueMicrotask) {\n\t\t// create resolved promise\n\t\tlet dp_resolve = Promise.resolve();\n\n\t\t// try to redefine\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tqueueMicrotask = fk => dp_resolve.then(fk)\n\t\t\t\t.catch(e_callback => setTimeout(() => {\n\t\t\t\t\tthrow e_callback;\n\t\t\t\t}, 0));\n\t\t}\n\t\t// oh well, at least we tried\n\t\tcatch(e_define) {}\n\t}\n}\n\n\n\nconst factory = require('@graphy/core.data.factory');\nconst Writable = require('@graphy/core.class.writable');\n\n// eslint-disable-next-line no-misleading-character-class\nconst RT_PREFIXED_NAME_NAMESPACE_VALID = /^([A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}]([A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_\\-0-9\\xb7\\u{0300}-\\u{036f}\\u{203f}-\\u{2040}.]*[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_\\-0-9\\xb7\\u{0300}-\\u{036f}\\u{203f}-\\u{2040}])?)?$/u;\nconst N_MAX_STRING_BUFFER = 1 << 12;\n\nconst XC_DIRECTIVES_TYPE_SPARQL = 0b001;\nconst XC_DIRECTIVES_CASE_PASCAL = 0b010;\nconst XC_DIRECTIVES_CASE_UPPER = 0b100;\n\n\n\nclass Turtle_Writer extends Writable {\n\tconstructor(gc_writer={}) {\n\t\tsuper(gc_writer);\n\n\t\tlet {\n\t\t\tprefixes: h_prefixes={},\n\t\t\tlists: gc_lists=null,\n\t\t\tdebug: b_debug=false,\n\t\t\tstyle: gc_style=null,\n\t\t} = gc_writer;\n\n\t\tObject.assign(this, {\n\t\t\t_b_debug: b_debug,\n\t\t\t_s_indent: '\\t',\n\t\t\t_b_simplify_default_graph: false,\n\t\t\t_xc_directives: 0,\n\t\t\t_s_token_prefix: '@prefix',\n\t\t});\n\n\n\t\t// style config\n\t\tif(gc_style) {\n\t\t\t// indent\n\t\t\tif(gc_style.indent) {\n\t\t\t\tthis._s_indent = gc_style.indent.replace(/[^\\s]/g, '');\n\t\t\t}\n\n\t\t\t// use sparql directives\n\t\t\tlet z_directives = gc_style.directives || gc_style.directives;\n\t\t\tif(z_directives) {\n\t\t\t\tswitch(z_directives) {\n\t\t\t\t\tcase 'sparql': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL;\n\t\t\t\t\t\tthis._s_token_prefix = 'prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'Sparql': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL | XC_DIRECTIVES_CASE_PASCAL;\n\t\t\t\t\t\tthis._s_token_prefix = 'Prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'SPARQL': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL | XC_DIRECTIVES_CASE_UPPER;\n\t\t\t\t\t\tthis._s_token_prefix = 'PREFIX';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'turtle': {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'Turtle': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_CASE_PASCAL;\n\t\t\t\t\t\tthis._s_token_prefix = '@Prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'TURTLE': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_CASE_UPPER;\n\t\t\t\t\t\tthis._s_token_prefix = '@PREFIX';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tthrow new Error(`Value not understood for 'directives' option: ${z_directives}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t// custom list keys\n\t\tif(gc_lists) {\n\t\t\t// serialize list object\n\t\t\tthis._serialize_list_object = function(a_list, n_nest_level) {\n\t\t\t\t// transcode list object\n\t\t\t\tlet hc2_transcoded = this._transcode_list(a_list);\n\n\t\t\t\t// serialize object\n\t\t\t\treturn this._encode_objects(hc2_transcoded, n_nest_level);\n\t\t\t};\n\t\t}\n\n\t\t// serialize initial prefix mappings\n\t\tlet s_token_prefix = this._s_token_prefix;\n\t\tlet s_prefix_eol = (this._xc_directives & XC_DIRECTIVES_TYPE_SPARQL)? '\\n': ' .\\n';\n\t\tlet s_prefixes = '';\n\t\ttry {\n\t\t\t// each user-defined prefix\n\t\t\tfor(let s_prefix_id in h_prefixes) {\n\t\t\t\t// invalid prefix id\n\t\t\t\tif(!RT_PREFIXED_NAME_NAMESPACE_VALID.test(s_prefix_id)) {\n\t\t\t\t\tthrow new Error(`Invlalid prefix id for text/turtle RDF serialization format: '${s_prefix_id}'`);\n\t\t\t\t}\n\n\t\t\t\t// append to string\n\t\t\t\ts_prefixes += `${s_token_prefix} ${s_prefix_id}: ${factory.namedNode(h_prefixes[s_prefix_id]).verbose()}${s_prefix_eol}`;\n\t\t\t}\n\t\t}\n\t\t// serialization error\n\t\tcatch(e_serialize) {\n\t\t\tqueueMicrotask(() => {\n\t\t\t\tthis.emit('error', e_serialize);\n\t\t\t});\n\t\t}\n\n\t\t// push prefixes\n\t\tif(s_prefixes) this.push(s_prefixes);\n\t}\n\n\t// serialize prefixes\n\t_serialize_prefixes(h_prefixes) {\n\t\t// build prefixes string\n\t\tlet s_prefixes = (2 === this._xc_state)? '\\n\\n': '';\n\n\t\t// update state\n\t\tthis._xc_state = 0;\n\n\t\t// clone prefixes\n\t\tthis._h_prefixes = {...this._h_prefixes};\n\n\t\t// ref prefix token\n\t\tlet s_token_prefix = this._s_token_prefix;\n\n\t\t// prep eol string\n\t\tlet s_prefix_eol = (this._xc_directives & XC_DIRECTIVES_TYPE_SPARQL)? '\\n': ' .\\n';\n\n\t\t// each user-defined prefix\n\t\tfor(let s_prefix_id in h_prefixes) {\n\t\t\t// invalid prefix id\n\t\t\tif(!RT_PREFIXED_NAME_NAMESPACE_VALID.test(s_prefix_id)) {\n\t\t\t\tthrow new Error(`Invlalid prefix id for text/turtle RDF serialization format: '${s_prefix_id}'`);\n\t\t\t}\n\n\t\t\t// append to string\n\t\t\ts_prefixes += `${s_token_prefix} ${s_prefix_id}: ${factory.namedNode(h_prefixes[s_prefix_id]).verbose()}${s_prefix_eol}`;\n\n\t\t\t// set prefix\n\t\t\tthis._h_prefixes[s_prefix_id] = h_prefixes[s_prefix_id];\n\t\t}\n\n\t\t// recache\n\t\tfactory.cache_prefixes(this._h_prefixes);\n\n\t\t// return prefix string\n\t\treturn s_prefixes;\n\t}\n\n\n\n\t// serialize c3 hash\n\t_serialize_c3(hc3_triples) {\n\t\tlet {\n\t\t\t_h_prefixes: h_prefixes,\n\t\t\t_s_indent: s_indent,\n\n\t\t} = this;\n\t\t// break line if non-data state\n\t\tlet s_write = 2 !== this._xc_state? '\\n': '';\n\t\t// update state\n\t\tthis._xc_state = 2;\n\n\t\t// triple delimiter\n\t\tlet s_delim_triples = '';\n\t\t// subject exit listener\n\t\tlet f_exit_subject = null;\n\t\t// each subject\n\t\tfor(let sc1_subject in hc3_triples) {\n\t\t\t// directive\n\t\t\tif('`' === sc1_subject[0]) {\n\t\t\t\tlet g_apply = this._apply_directive(sc1_subject, hc3_triples[sc1_subject]);\n\t\t\t\t// write data\n\t\t\t\tif(g_apply.write) {\n\t\t\t\t\ts_write += s_delim_triples+g_apply.write;\n\t\t\t\t\t// do not break next line\n\t\t\t\t\ts_delim_triples = '';\n\t\t\t\t}\n\t\t\t\t// save exit listener\n\t\t\t\tif(g_apply.exit) f_exit_subject = g_apply.exit;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// position before subject\n\t\t\tlet i_triples = s_write.length;\n\t\t\t// serialize subject\n\t\t\ts_write += s_delim_triples+factory.c1_node(sc1_subject, h_prefixes).terse(h_prefixes)+' ';\n\t\t\t// pair indent & terminator\n\t\t\tlet s_indent_pairs = '';\n\t\t\tlet s_term_pairs = '';\n\t\t\t// ref pairs\n\t\t\tlet hc2_pairs = hc3_triples[sc1_subject];\n\t\t\t// position before pairs\n\t\t\tlet i_pairs = s_write.length;\n\t\t\t// were objects written?\n\t\t\tlet b_empty = true;\n\t\t\t// predicate exit listener\n\t\t\tlet f_exit_predicate = null;\n\t\t\t// each predicate\n\t\t\tfor(let sc1_predicate in hc2_pairs) {\n\t\t\t\t// directive\n\t\t\t\tif('`' === sc1_predicate[0]) {\n\t\t\t\t\t// apply directive\n\t\t\t\t\tlet g_apply = this._apply_directive(sc1_predicate, hc2_pairs[sc1_predicate]);\n\t\t\t\t\t// write data\n\t\t\t\t\tif(g_apply.write) {\n\t\t\t\t\t\t// break line\n\t\t\t\t\t\ts_write += (s_indent_pairs? s_term_pairs: '\\n')+s_indent+g_apply.write;\n\t\t\t\t\t\t// pair already terminated\n\t\t\t\t\t\ts_term_pairs = '';\n\t\t\t\t\t\t// indent next pair\n\t\t\t\t\t\ts_indent_pairs = s_indent;\n\t\t\t\t\t}\n\t\t\t\t\t// save exit listener\n\t\t\t\t\tif(g_apply.exit) f_exit_predicate = g_apply.exit;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// ref objects\n\t\t\t\tlet z_objects = hc2_pairs[sc1_predicate];\n\t\t\t\t// serialize objects\n\t\t\t\tlet st_objects = this._encode_objects(z_objects);\n\t\t\t\t// no objects; skip pair\n\t\t\t\tif(!st_objects) continue;\n\t\t\t\t// not empty\n\t\t\t\tb_empty = false;\n\t\t\t\t// cannot use blank node in predicate position\n\t\t\t\tif('_' === sc1_predicate[0] && ':' === sc1_predicate[1]) {\n\t\t\t\t\tthrow new Error(`Cannot use blank node in predicate position of c3 hash; subject:'${sc1_subject}', predicate:'${sc1_predicate}'`);\n\t\t\t\t}\n\t\t\t\t// create predicate\n\t\t\t\tlet kt_predicate = factory.c1_named_node(sc1_predicate, h_prefixes);\n\t\t\t\t// tersify rdf:type\n\t\t\t\tlet st_predicate = kt_predicate.isRdfTypeAlias? 'a': kt_predicate.terse(h_prefixes);\n\t\t\t\t// serialize predicate and object(s)\n\t\t\t\ts_write += s_term_pairs+s_indent_pairs+st_predicate+' '+st_objects;\n\t\t\t\t// update state\n\t\t\t\tthis._xc_state = 2;\n\t\t\t\t\t// // string buffer became too large\n\t\t\t\t\t// if(s_write.length >= N_MAX_STRING_BUFFER) {\n\t\t\t\t\t// \tdebugger;\n\t\t\t\t\t// }\n\t\t\t\t// terminate next pair\n\t\t\t\ts_term_pairs = ' ;\\n';\n\t\t\t\t// indent next pair\n\t\t\t\ts_indent_pairs = s_indent;\n\t\t\t\t// call exit predicate listener\n\t\t\t\tif(f_exit_predicate) f_exit_predicate();\n\t\t\t}\n\t\t\t// empty triples; cut out\n\t\t\tif(b_empty) {\n\t\t\t\ts_write = s_write.slice(0, i_triples)+s_write.slice(i_pairs);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// delimit triple(s)\n\t\t\ts_delim_triples = '\\n';\n\t\t\t// close triple\n\t\t\ts_write += `${s_term_pairs? ' ': s_indent_pairs}.\\n`; //\n\t\t\t// call exit subject listener\n\t\t\tif(f_exit_subject) f_exit_subject();\n\t\t}\n\n\t\ts_write += '\\n';\n\t\treturn s_write;\n\t}\n\n\n\t// write objects\n\t_encode_objects(z_objects, n_nest_level=1) {\n\t\tlet {\n\t\t\t_h_prefixes: h_prefixes,\n\t\t\t_s_indent: s_indent,\n\t\t\t_hm_coercions: hm_coercions,\n\t\t} = this;\n\n\t\t// deduce object value type\n\t\tswitch(typeof z_objects) {\n\t\t\t// concise-term string\n\t\t\tcase 'string': return factory.c1(z_objects, h_prefixes).terse(h_prefixes);\n\n\t\t\t// numeric type\n\t\t\tcase 'number': return factory.number(z_objects).terse(h_prefixes);\n\n\t\t\t// boolean type\n\t\t\tcase 'boolean': return factory.boolean(z_objects).terse(h_prefixes);\n\n\t\t\t// object\n\t\t\tcase 'object': {\n\t\t\t\t// null; reject\n\t\t\t\tif(null === z_objects) throw new Error('Refusing to serialize null value given as an object of quad');\n\n\t\t\t\t// array, list of objects\n\t\t\t\tif(Array.isArray(z_objects) || z_objects instanceof Set) {\n\t\t\t\t\tlet s_write = '';\n\n\t\t\t\t\t// object terminator\n\t\t\t\t\tlet s_term_object = '';\n\n\t\t\t\t\t// each object\n\t\t\t\t\tfor(let z_item of z_objects) {\n\t\t\t\t\t\t// item is an array; serialize list\n\t\t\t\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\t\t\t\ts_write += s_term_object + this._serialize_list_object(z_item, n_nest_level);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// non-array\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// recurse on item\n\t\t\t\t\t\t\ts_write += s_term_object + this._encode_objects(z_item, n_nest_level);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// terminate next object\n\t\t\t\t\t\ts_term_object = ', ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn s_write;\n\t\t\t\t}\n\t\t\t\t// plain object, blank node\n\t\t\t\telse if(Object === z_objects.constructor) {\n\t\t\t\t\t// open blank node block\n\t\t\t\t\tlet s_write = '[';\n\n\t\t\t\t\t// whether the block is empty\n\t\t\t\t\tlet b_empty = true;\n\n\t\t\t\t\t// object exit listener\n\t\t\t\t\tlet f_exit_object = null;\n\n\t\t\t\t\t// each pair\n\t\t\t\t\tfor(let sc1_predicate in z_objects) {\n\t\t\t\t\t\t// block is not empty\n\t\t\t\t\t\tb_empty = false;\n\n\t\t\t\t\t\t// terminate previous pair\n\t\t\t\t\t\ts_write += '\\n'+s_indent.repeat(1+n_nest_level);\n\n\t\t\t\t\t\t// directive; serialize it\n\t\t\t\t\t\tif('`' === sc1_predicate[0]) {\n\t\t\t\t\t\t\tlet g_apply = this._apply_directive(sc1_predicate, z_objects[sc1_predicate]);\n\n\t\t\t\t\t\t\t// write data\n\t\t\t\t\t\t\tif(g_apply.write) s_write += g_apply.write;\n\n\t\t\t\t\t\t\t// save exit listener\n\t\t\t\t\t\t\tif(g_apply.exit) f_exit_object = g_apply.exit;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// write predicate and object(s)\n\t\t\t\t\t\ts_write += factory.c1(sc1_predicate, h_prefixes).terse(h_prefixes) + ' '\n\t\t\t\t\t\t\t+ this._encode_objects(z_objects[sc1_predicate], n_nest_level+1) +' ;';\n\t\t\t\t\t}\n\n\t\t\t\t\t// close blank node block\n\t\t\t\t\ts_write += (b_empty? '': '\\n'+s_indent.repeat(n_nest_level))+']';\n\n\t\t\t\t\t// call exit object listener\n\t\t\t\t\tif(f_exit_object) f_exit_object();\n\n\t\t\t\t\t// serialize current predicate to blank node\n\t\t\t\t\treturn s_write;\n\t\t\t\t}\n\t\t\t\t// coercable instance\n\t\t\t\telse if(hm_coercions.has(z_objects.constructor)) {\n\t\t\t\t\t// convert javascript object to term object\n\t\t\t\t\tlet kt_converted = hm_coercions.get(z_objects.constructor).apply(this, [z_objects, n_nest_level]);\n\n\t\t\t\t\t// serialize\n\t\t\t\t\treturn kt_converted.terse(h_prefixes);\n\t\t\t\t}\n\t\t\t\t// graphy term\n\t\t\t\telse if(z_objects.isGraphyTerm) {\n\t\t\t\t\treturn z_objects.terse(h_prefixes);\n\t\t\t\t}\n\t\t\t\t// RDFJS term\n\t\t\t\telse if(z_objects.termType) {\n\t\t\t\t\treturn factory.from.term(z_objects).terse(h_prefixes);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// fallthrough: other\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`Bad type for RDF object: [${typeof z_objects}] ${z_objects? z_objects.constructor: z_objects}`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// serialize collection object\n\t_serialize_collection_object(a_collection, n_nest_level) {\n\t\tlet s_indent = this._s_indent;\n\n\t\t// open collection block\n\t\tlet s_write = '(';\n\n\t\t// each item\n\t\tfor(let z_item of a_collection) {\n\t\t\tlet s_objects = '';\n\n\t\t\t// item is array; serialize as sub-collection\n\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\ts_objects = this._serialize_collection_object(z_item, n_nest_level+1);\n\t\t\t}\n\t\t\t// non-array item\n\t\t\telse {\n\t\t\t\ts_objects = this._encode_objects(z_item, n_nest_level+1);\n\t\t\t}\n\n\t\t\t// serialize collection\n\t\t\ts_write += '\\n'+s_indent.repeat(1+n_nest_level)+s_objects;\n\t\t}\n\n\t\t// break line if anything was written (including comments)\n\t\tif(a_collection.length) s_write += '\\n'+s_indent.repeat(n_nest_level);\n\n\t\t// close collection block\n\t\ts_write += ')';\n\n\t\treturn s_write;\n\t}\n\n\t// rdfjs quad\n\t_serialize_quad(g_quad) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet kq_quad = factory.from.quad(g_quad);\n\n\n\t\t// serialize quad\n\t\tthis._s_push += (2 !== this._xc_state? '\\n': '')\n\t\t\t\t\t\t+kq_quad.subject.terse(h_prefixes)+' '\n\t\t\t+kq_quad.predicate.terse(h_prefixes)+' '\n\t\t\t+kq_quad.object.terse(h_prefixes)+' .\\n\\n';\n\n\n\t\t// update state\n\t\tthis._xc_state = 2;\n\t}\n}\n\nObject.assign(Turtle_Writer.prototype, {\n\tanonymous_blank_nodes: true,\n\t_serialize_c3r: Turtle_Writer.prototype._serialize_c3,\n\t_serialize_c4r: Turtle_Writer.prototype._serialize_c4,\n\t_serialize_comment: Writable.prototype._serialize_hash_comment,\n\t_serialize_list_object: Turtle_Writer.prototype._serialize_collection_object,\n});\n\nmodule.exports = function(gc_writer) {\n\treturn new Turtle_Writer(gc_writer);\n};\n"],"names":["queueMicrotask","dp_resolve","Promise","resolve","fk","then","catch","e_callback","setTimeout","e_define","factory","Writable","RT_PREFIXED_NAME_NAMESPACE_VALID","XC_DIRECTIVES_TYPE_SPARQL","XC_DIRECTIVES_CASE_PASCAL","XC_DIRECTIVES_CASE_UPPER","Turtle_Writer","constructor","gc_writer","super","prefixes","h_prefixes","lists","gc_lists","debug","b_debug","style","gc_style","Object","assign","this","_b_debug","_s_indent","_b_simplify_default_graph","_xc_directives","_s_token_prefix","indent","replace","z_directives","directives","Error","_serialize_list_object","a_list","n_nest_level","hc2_transcoded","_transcode_list","_encode_objects","s_token_prefix","s_prefix_eol","s_prefixes","s_prefix_id","test","namedNode","verbose","e_serialize","emit","push","_serialize_prefixes","_xc_state","_h_prefixes","cache_prefixes","_serialize_c3","hc3_triples","s_indent","s_write","s_delim_triples","f_exit_subject","sc1_subject","g_apply","_apply_directive","write","exit","i_triples","length","c1_node","terse","s_indent_pairs","s_term_pairs","hc2_pairs","i_pairs","b_empty","f_exit_predicate","sc1_predicate","z_objects","st_objects","kt_predicate","c1_named_node","st_predicate","isRdfTypeAlias","slice","_hm_coercions","hm_coercions","c1","number","boolean","Array","isArray","Set","s_term_object","z_item","f_exit_object","repeat","has","kt_converted","get","apply","isGraphyTerm","termType","from","term","_serialize_collection_object","a_collection","s_objects","_serialize_quad","g_quad","kq_quad","quad","_s_push","subject","predicate","object","prototype","anonymous_blank_nodes","_serialize_c3r","_serialize_c4r","_serialize_c4","_serialize_comment","_serialize_hash_comment","module","exports"],"sourceRoot":""}