{"version":3,"file":"js/976.67e32a1d.js","mappings":"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","sources":["webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/index.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/lib/BlankNode.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/lib/DataFactory.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/lib/DefaultGraph.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/lib/Literal.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/lib/NamedNode.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/lib/Quad.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/lib/Variable.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/data-model/lib/fromTerm.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/parser-n3/index.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/parser-n3/lib/ParserStream.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/node_modules/@rdfjs/sink/index.js"],"sourcesContent":["const DataFactory = require('./lib/DataFactory.js')\n\nmodule.exports = DataFactory\n","class BlankNode {\n  constructor (id) {\n    this.value = id || ('b' + (++BlankNode.nextId))\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n","const BlankNode = require('./BlankNode.js')\nconst DefaultGraph = require('./DefaultGraph.js')\nconst fromTermRaw = require('./fromTerm.js')\nconst Literal = require('./Literal.js')\nconst NamedNode = require('./NamedNode.js')\nconst Quad = require('./Quad.js')\nconst Variable = require('./Variable.js')\n\nfunction namedNode (value) {\n  return new NamedNode(value)\n}\n\nfunction blankNode (value) {\n  return new BlankNode(value)\n}\n\nfunction literal (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nfunction variable (value) {\n  return new Variable(value)\n}\n\nfunction defaultGraph () {\n  return DataFactory.defaultGraphInstance\n}\n\nfunction triple (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nfunction quad (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nfunction fromTerm (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nfunction fromQuad (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n}\n\nmodule.exports = DataFactory\n","class DefaultGraph {\n  equals (other) {\n    return !!other && other.termType === this.termType\n  }\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\nDefaultGraph.prototype.value = ''\n\nmodule.exports = DefaultGraph\n","const NamedNode = require('./NamedNode.js')\n\nclass Literal {\n  constructor (value, language, datatype) {\n    this.value = value\n    this.datatype = Literal.stringDatatype\n    this.language = ''\n\n    if (language) {\n      this.language = language\n      this.datatype = Literal.langStringDatatype\n    } else if (datatype) {\n      this.datatype = datatype\n    }\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value &&\n      other.language === this.language && other.datatype.equals(this.datatype)\n  }\n}\n\nLiteral.prototype.termType = 'Literal'\n\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n","class NamedNode {\n  constructor (iri) {\n    this.value = iri\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n","const DefaultGraph = require('./DefaultGraph.js')\n\nclass Quad {\n  constructor (subject, predicate, object, graph) {\n    this.subject = subject\n    this.predicate = predicate\n    this.object = object\n\n    if (graph) {\n      this.graph = graph\n    } else {\n      this.graph = new DefaultGraph()\n    }\n  }\n\n  equals (other) {\n    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n    return !!other && (other.termType === 'Quad' || !other.termType) &&\n      other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n      other.object.equals(this.object) && other.graph.equals(this.graph)\n  }\n}\n\nQuad.prototype.termType = 'Quad'\nQuad.prototype.value = ''\n\nmodule.exports = Quad\n","class Variable {\n  constructor (name) {\n    this.value = name\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n","function fromTerm (original) {\n  if (!original) {\n    return null\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value)\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph()\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value)\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject)\n    const predicate = this.fromTerm(original.predicate)\n    const object = this.fromTerm(original.object)\n    const graph = this.fromTerm(original.graph)\n\n    return this.quad(subject, predicate, object, graph)\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value)\n  }\n\n  throw new Error(`unknown termType ${original.termType}`)\n}\n\nmodule.exports = fromTerm\n","const ParserStream = require('./lib/ParserStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const N3 = require('n3')\nconst rdf = require('@rdfjs/data-model')\nconst { finished } = require('readable-stream')\nconst ReadableToReadable = require('readable-to-readable')\n\nclass ParserStream extends ReadableToReadable {\n  constructor (input, { baseIRI = '', factory = rdf } = {}) {\n    const parser = new N3.StreamParser({ baseIRI, factory })\n\n    super(parser, { objectMode: true })\n\n    parser.on('prefix', (prefix, term) => {\n      this.emit('prefix', prefix, term)\n    })\n\n    parser.on('error', err => {\n      this.destroy(err)\n    })\n\n    finished(this, () => {\n      parser.end()\n    })\n\n    input.pipe(parser)\n  }\n}\n\nmodule.exports = ParserStream\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n"],"names":["DataFactory","module","exports","BlankNode","constructor","id","this","value","nextId","equals","other","termType","prototype","DefaultGraph","fromTermRaw","Literal","NamedNode","Quad","Variable","namedNode","blankNode","literal","languageOrDatatype","indexOf","variable","defaultGraph","defaultGraphInstance","triple","subject","predicate","object","quad","graph","fromTerm","original","call","fromQuad","language","datatype","stringDatatype","langStringDatatype","iri","name","Error","ParserStream","Sink","Parser","options","super","N3","rdf","finished","ReadableToReadable","input","baseIRI","factory","parser","StreamParser","objectMode","on","prefix","term","emit","err","destroy","end","pipe","Impl","import","output","Object","assign","readable"],"sourceRoot":""}