{"version":3,"file":"js/951.a337d1a6.js","mappings":"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","sources":["webpack://@zazuko/spex/./src/views/ShaclEditor.vue","webpack://@zazuko/spex/./src/views/ShaclEditor.vue?a28c","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/parsers.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/serializers.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/formats-common/index.js","webpack://@zazuko/spex/./node_modules/@rdf-esm/sink-map/index.js"],"sourcesContent":["<template>\n  <Splitpanes class=\"default-theme\">\n    <Pane size=\"40\">\n      <h2 class=\"font-bold text-lg px-4 py-2 bg-gray-200\">SHACL editor</h2>\n      <rdf-editor class=\"w-full h-full overflow-hidden\" :format=\"format\" :value=\"shacl\" ref=\"shaclEditor\" />\n      <div class=\"field\">\n        <label class=\"label\" for=\"format\">Format</label>\n        <div class=\"select\">\n          <select id=\"format\" v-model=\"format\">\n            <option v-for=\"format in formats\" :key=\"format\" :value=\"format\">\n              {{ format }}\n            </option>\n          </select>\n        </div>\n      </div>\n      <button class=\"button is-primary\" @click=\"loadShacl\">\n        <RefreshIcon class=\"icon\" />\n        <span>Update</span>\n      </button>\n    </Pane>\n    <Pane>\n      <Splitpanes horizontal>\n        <Pane>\n          <div class=\"flex-grow flex flex-col\">\n            <h2 class=\"font-bold text-lg px-4 py-2 bg-gray-200\">Representation</h2>\n\n            <GraphLayout\n              :nodes=\"datamodel.tables\"\n              :links=\"links\"\n              :active-links=\"activeLinks\"\n            >\n              <template v-slot:node=\"{ node }\">\n                <ResourceCard :resource=\"node\" :active-links=\"activeLinks\" />\n              </template>\n            </GraphLayout>\n\n            <div class=\"section\" v-if=\"error\">\n              <div class=\"message is-danger\">\n                <div class=\"message-body\">\n                  Error loading data: {{ error }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </Pane>\n      </Splitpanes>\n    </Pane>\n  </Splitpanes>\n</template>\n\n<script>\nimport { RefreshIcon } from '@heroicons/vue/solid'\nimport { shrink as _shrink } from '@zazuko/rdf-vocabularies/shrink'\nimport { GraphLayout } from '@zazuko/vue-graph-layout'\nimport { Splitpanes, Pane } from 'splitpanes'\nimport 'splitpanes/dist/splitpanes.css'\nimport '@rdfjs-elements/rdf-editor'\nimport { parsers } from '@rdf-esm/formats-common'\nimport RDF from 'rdf-ext'\nimport { tablesFromSHACL } from '@/shacl'\nimport { rdf, sh } from '@/namespace'\nimport ResourceCard from '@/components/ResourceCard.vue'\n\nconst formats = [...parsers.keys()]\n\nconst initialEditorContent = `\n@prefix sh: <http://www.w3.org/ns/shacl#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n`\n\nexport default {\n  components: {\n    GraphLayout,\n    Splitpanes,\n    Pane,\n    RefreshIcon,\n    ResourceCard,\n  },\n\n  data () {\n    return {\n      format: 'text/turtle',\n      formats,\n      shacl: initialEditorContent,\n      datamodel: {\n        tables: [],\n        viewports: [],\n        isIntrospected: false,\n      },\n      error: null,\n      activeLinks: [],\n    }\n  },\n\n  computed: {\n    links () {\n      const tables = this.datamodel.tables\n      const tableIds = new Set(tables.map(({ id }) => id))\n      return tables\n        .flatMap(table => table.properties.map((property) => ({ ...property, table })))\n        .reduce((acc, property) => {\n          property.values.forEach((value) => {\n            const source = property.table.id\n            const target = value.id\n            if (tableIds.has(target)) {\n              acc.push({ source, target, sourceProperty: property.id, label: property.name })\n            }\n          })\n\n          return acc\n        }, [])\n    },\n  },\n\n  methods: {\n    async loadShacl () {\n      const editor = this.$refs.shaclEditor\n\n      this.error = null\n      this.datamodel.tables = []\n\n      const shrink = (uri) => _shrink(uri) || uri\n\n      try {\n        const quads = await editor.quads\n        const dataset = RDF.dataset(quads)\n        const shapes = RDF.clownface({ dataset }).has(rdf.type, sh.NodeShape)\n        this.datamodel.tables = tablesFromSHACL(shapes, shrink)\n      } catch (e) {\n        this.error = e.toString()\n      }\n    }\n  }\n}\n</script>\n","import { render } from \"./ShaclEditor.vue?vue&type=template&id=1f3d97d4\"\nimport script from \"./ShaclEditor.vue?vue&type=script&lang=js\"\nexport * from \"./ShaclEditor.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/SPEX/SPEX/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export async function jsonLdParser () {\n  const JsonLdParser = (await import('@rdfjs/parser-jsonld')).default\n\n  return new JsonLdParser()\n}\n\nexport async function n3Parser () {\n  const N3Parser = (await import('@rdfjs/parser-n3')).default\n  return new N3Parser()\n}\n\nexport async function rdfXmlParser () {\n  const module = await import('rdfxml-streaming-parser')\n\n  let RdfXmlParser\n  if (module.default) {\n    RdfXmlParser = module.default.RdfXmlParser\n  } else {\n    RdfXmlParser = module.RdfXmlParser\n  }\n\n  return new RdfXmlParser()\n}\n","export async function jsonLdSerializer () {\n  const JsonLdSerializer = (await import('@rdfjs/serializer-jsonld')).default\n\n  return new JsonLdSerializer({ encoding: 'string' })\n}\n\nexport async function nTriplesSerializer () {\n  const NTriplesSerializer = (await import('@rdfjs/serializer-ntriples')).default\n\n  return new NTriplesSerializer()\n}\n","import {\n  jsonLdParser,\n  n3Parser,\n  rdfXmlParser\n} from './parsers.js'\nimport {\n  jsonLdSerializer,\n  nTriplesSerializer\n} from './serializers.js'\nimport { SinkMap } from '@rdf-esm/sink-map'\n\nconst parserMap = new SinkMap()\nconst serializerMap = new SinkMap()\n\nparserMap.set('application/ld+json', jsonLdParser)\nparserMap.set('application/trig', n3Parser)\nparserMap.set('application/n-quads', n3Parser)\nparserMap.set('application/n-triples', n3Parser)\nparserMap.set('text/n3', n3Parser)\nparserMap.set('text/turtle', n3Parser)\nparserMap.set('application/rdf+xml', rdfXmlParser)\n\nserializerMap.set('application/ld+json', jsonLdSerializer)\nserializerMap.set('application/n-quads', nTriplesSerializer)\nserializerMap.set('application/n-triples', nTriplesSerializer)\nserializerMap.set('text/n3', nTriplesSerializer)\nserializerMap.set('text/turtle', nTriplesSerializer)\n\nexport const parsers = parserMap\nexport const serializers = serializerMap\n","import stream from 'readable-stream'\n\nclass SinkMap extends Map {\n  import (key, input, options) {\n    const sink = this.get(key)\n\n    if (!sink) {\n      return null\n    }\n\n    if (typeof sink === 'function') {\n      const passThrough = new stream.PassThrough({ objectMode: true })\n      Promise.resolve().then(async () => {\n        const sinkInstance = await sink()\n        this.set(key, sinkInstance)\n\n        const origStream = sinkInstance.import(input, options)\n        origStream.on('prefix', (prefix, ns) => {\n          passThrough.emit('prefix', prefix, ns)\n        })\n        origStream.on('error', err => {\n          passThrough.emit('error', err)\n          passThrough.emit('end')\n        })\n\n        origStream.pipe(passThrough)\n      })\n\n      return passThrough\n    }\n\n    return sink.import(input, options)\n  }\n}\n\nexport { SinkMap }\n"],"names":["_createElementVNode","class","for","_createBlock","_component_Splitpanes","_createVNode","_component_Pane","size","_hoisted_1","_component_rdf_editor","format","$data","value","ref","_hoisted_2","_hoisted_3","_hoisted_4","id","_createElementBlock","_Fragment","key","onClick","$options","_component_RefreshIcon","_hoisted_6","horizontal","_hoisted_7","_hoisted_8","_component_GraphLayout","nodes","tables","links","node","_component_ResourceCard","resource","_hoisted_9","_hoisted_10","_hoisted_11","formats","parsers","initialEditorContent","components","GraphLayout","Splitpanes","Pane","RefreshIcon","ResourceCard","data","shacl","datamodel","viewports","isIntrospected","error","activeLinks","computed","this","tableIds","Set","map","flatMap","table","properties","property","reduce","acc","values","forEach","source","target","has","push","sourceProperty","label","name","methods","async","editor","$refs","shaclEditor","shrink","uri","_shrink","quads","dataset","RDF","shapes","rdf","sh","tablesFromSHACL","e","toString","__exports__","render","jsonLdParser","JsonLdParser","default","n3Parser","N3Parser","rdfXmlParser","module","RdfXmlParser","jsonLdSerializer","JsonLdSerializer","encoding","nTriplesSerializer","NTriplesSerializer","parserMap","serializerMap","set","serializers","SinkMap","Map","import","input","options","sink","get","passThrough","objectMode","Promise","resolve","then","sinkInstance","origStream","on","prefix","ns","emit","err","pipe"],"sourceRoot":""}