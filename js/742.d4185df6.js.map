{"version":3,"file":"js/742.d4185df6.js","mappings":"qNAIA,MAAMA,EACJC,YAAaC,GAAO,QAAEC,EAAU,GAAE,QAAEC,EAAU,OAAQC,GAAS,CAAC,GAC9D,MAAMC,EAAe,CACnBC,UAAWH,EAAQG,UAAUC,KAAKJ,GAClCK,aAAcL,EAAQK,aAAaD,KAAKJ,GACxCM,QAASN,EAAQM,QAAQF,KAAKJ,GAC9BO,UAAWP,EAAQO,UAAUH,KAAKJ,GAClCQ,KAAMR,EAAQQ,KAAKJ,KAAKJ,IAGpBS,EAAS,IAAI,IAAa,CAAEV,UAASC,QAASE,KAAiBD,IAIrE,OAFAH,EAAMY,KAAKD,IAEJ,OAAWA,EACpB,EAGF,QCnBA,MAAME,UAAe,IACnBd,YAAae,GACXC,MAAM,EAAcD,EACtB,EAGF,O,sBCTA,MAAME,EACJjB,YAAakB,EAAMH,GACjBI,KAAKD,KAAOA,EACZC,KAAKJ,QAAUA,CACjB,CAEAK,OAAQnB,EAAOc,GACb,MAAMM,EAAS,IAAIF,KAAKD,KAAKjB,EAAO,IAAKkB,KAAKJ,WAAYA,IAY1D,OAVAd,EAAMqB,GAAG,OAAO,KACTD,EAAOE,UACVF,EAAOG,KAAK,MACd,IAGFvB,EAAMqB,GAAG,SAASG,IAChBJ,EAAOG,KAAK,QAASC,EAAG,IAGnBJ,CACT,EAGF,K,sBCvBA,MAAMK,EAAY,IAAIC,IAAI,CAAC,SAAU,iBAAkB,aAEvD,SAASJ,EAAUK,GACjB,OAAO,IAAIC,MAAMD,EAAQ,CACvBE,IAAKC,EAAQC,GACX,OAAIN,EAAUI,IAAIE,IAIXC,QAAQH,OAAOI,UACxB,EACAC,IAAKJ,EAAQC,GACX,GAAIN,EAAUI,IAAIE,GAChB,OAGF,MAAMI,EAASH,QAAQE,OAAOD,WAE9B,OAAIE,GAAiC,oBAAhBA,EAAO7B,KACnB6B,EAAO7B,KAAKwB,GAGdK,CACT,EACAC,IAAKN,EAAQC,EAAKM,GAChB,IAAIZ,EAAUI,IAAIE,GAIlB,OAAOC,QAAQI,OAAOH,UACxB,GAEJ,CAEA,K","sources":["webpack://@zazuko/spex/./node_modules/@rdfjs/parser-n3/lib/ParserStream.js","webpack://@zazuko/spex/./node_modules/@rdfjs/parser-n3/index.js","webpack://@zazuko/spex/./node_modules/@rdfjs/sink/index.js","webpack://@zazuko/spex/./node_modules/duplex-to/readable.js"],"sourcesContent":["import rdf from '@rdfjs/data-model'\nimport toReadable from 'duplex-to/readable.js'\nimport { StreamParser } from 'n3'\n\nclass ParserStream {\n  constructor (input, { baseIRI = '', factory = rdf, ...rest } = {}) {\n    const boundFactory = {\n      blankNode: factory.blankNode.bind(factory),\n      defaultGraph: factory.defaultGraph.bind(factory),\n      literal: factory.literal.bind(factory),\n      namedNode: factory.namedNode.bind(factory),\n      quad: factory.quad.bind(factory)\n    }\n\n    const parser = new StreamParser({ baseIRI, factory: boundFactory, ...rest })\n\n    input.pipe(parser)\n\n    return toReadable(parser)\n  }\n}\n\nexport default ParserStream\n","import Sink from '@rdfjs/sink'\nimport ParserStream from './lib/ParserStream.js'\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nexport default Parser\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, { ...this.options, ...options })\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', err => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nexport default Sink\n","const blackList = new Set(['_write', '_writableState', 'writable'])\n\nfunction readable (duplex) {\n  return new Proxy(duplex, {\n    has (target, key) {\n      if (blackList.has(key)) {\n        return false\n      }\n\n      return Reflect.has(...arguments)\n    },\n    get (target, key) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      const result = Reflect.get(...arguments)\n\n      if (result && typeof result.bind === 'function') {\n        return result.bind(target)\n      }\n\n      return result\n    },\n    set (target, key, value) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      return Reflect.set(...arguments)\n    }\n  })\n}\n\nexport default readable\n"],"names":["ParserStream","constructor","input","baseIRI","factory","rest","boundFactory","blankNode","bind","defaultGraph","literal","namedNode","quad","parser","pipe","Parser","options","super","Sink","Impl","this","import","output","on","readable","emit","err","blackList","Set","duplex","Proxy","has","target","key","Reflect","arguments","get","result","set","value"],"sourceRoot":""}