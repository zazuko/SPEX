import{M as j,N as T,T as L,O as z,Q as D,U as E,V as G,W as V,X as Z,Y as H,Z as X,$ as Y,a0 as J,a1 as ee,a2 as te}from"./index-DMvFg8bE.js";function ie(o){return!!o&&o.termType==="NamedNode"}function se(o){return!!o&&o.termType==="BlankNode"}function re(o){return!!o&&o.termType==="Literal"}function ne(o){return!!o&&o.termType==="Variable"}function O(o){return!!o&&o.termType==="DefaultGraph"}function ae(o){return O(o.graph)}function ue(o,e){return C({"":o.value||o},e)("")}function C(o,e){const t=Object.create(null);for(const s in o)i(s,o[s]);e=e||j;function i(s,r){if(typeof r=="string"){const n=Object.create(null);t[s]=a=>n[a]||(n[a]=e.namedNode(r+a))}else if(!(s in t))throw new Error(`Unknown prefix: ${s}`);return t[s]}return i}const oe=Object.freeze(Object.defineProperty({__proto__:null,inDefaultGraph:ae,isBlankNode:se,isDefaultGraph:O,isLiteral:re,isNamedNode:ie,isVariable:ne,prefix:ue,prefixes:C},Symbol.toStringTag,{value:"Module"})),N=j.defaultGraph(),{rdf:le,xsd:w}=T,F=/["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,A=/["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,de={"\\":"\\\\",'"':'\\"',"	":"\\t","\n":"\\n","\r":"\\r","\b":"\\b","\f":"\\f"};class $ extends L{equals(e){return e===this}}class S{constructor(e,t){if(this._prefixRegex=/$0^/,e&&typeof e.write!="function"&&(t=e,e=null),t=t||{},this._lists=t.lists,e)this._outputStream=e,this._endStream=t.end===void 0?!0:!!t.end;else{let i="";this._outputStream={write(s,r,n){i+=s,n&&n()},end:s=>{s&&s(null,i)}},this._endStream=!0}this._subject=null,/triple|quad/i.test(t.format)?(this._lineMode=!0,this._writeQuad=this._writeQuadLine):(this._lineMode=!1,this._graph=N,this._prefixIRIs=Object.create(null),t.prefixes&&this.addPrefixes(t.prefixes),t.baseIRI&&(this._baseMatcher=new RegExp(`^${q(t.baseIRI)}${t.baseIRI.endsWith("/")?"":"[#?]"}`),this._baseLength=t.baseIRI.length))}get _inDefaultGraph(){return N.equals(this._graph)}_write(e,t){this._outputStream.write(e,"utf8",t)}_writeQuad(e,t,i,s,r){try{s.equals(this._graph)||(this._write((this._subject===null?"":this._inDefaultGraph?`.
`:`
}
`)+(N.equals(s)?"":`${this._encodeIriOrBlank(s)} {
`)),this._graph=s,this._subject=null),e.equals(this._subject)?t.equals(this._predicate)?this._write(`, ${this._encodeObject(i)}`,r):this._write(`;
    ${this._encodePredicate(this._predicate=t)} ${this._encodeObject(i)}`,r):this._write(`${(this._subject===null?"":`.
`)+this._encodeSubject(this._subject=e)} ${this._encodePredicate(this._predicate=t)} ${this._encodeObject(i)}`,r)}catch(n){r&&r(n)}}_writeQuadLine(e,t,i,s,r){delete this._prefixMatch,this._write(this.quadToString(e,t,i,s),r)}quadToString(e,t,i,s){return`${this._encodeSubject(e)} ${this._encodeIriOrBlank(t)} ${this._encodeObject(i)}${s&&s.value?` ${this._encodeIriOrBlank(s)} .
`:` .
`}`}quadsToString(e){let t="";for(const i of e)t+=this.quadToString(i.subject,i.predicate,i.object,i.graph);return t}_encodeSubject(e){return e.termType==="Quad"?this._encodeQuad(e):this._encodeIriOrBlank(e)}_encodeIriOrBlank(e){if(e.termType!=="NamedNode")return this._lists&&e.value in this._lists&&(e=this.list(this._lists[e.value])),"id"in e?e.id:`_:${e.value}`;let t=e.value;this._baseMatcher&&this._baseMatcher.test(t)&&(t=t.substr(this._baseLength)),F.test(t)&&(t=t.replace(A,M));const i=this._prefixRegex.exec(t);return i?i[1]?this._prefixIRIs[i[1]]+i[2]:t:`<${t}>`}_encodeLiteral(e){let t=e.value;if(F.test(t)&&(t=t.replace(A,M)),e.language)return`"${t}"@${e.language}`;if(this._lineMode){if(e.datatype.value===w.string)return`"${t}"`}else switch(e.datatype.value){case w.string:return`"${t}"`;case w.boolean:if(t==="true"||t==="false")return t;break;case w.integer:if(/^[+-]?\d+$/.test(t))return t;break;case w.decimal:if(/^[+-]?\d*\.\d+$/.test(t))return t;break;case w.double:if(/^[+-]?(?:\d+\.\d*|\.?\d+)[eE][+-]?\d+$/.test(t))return t;break}return`"${t}"^^${this._encodeIriOrBlank(e.datatype)}`}_encodePredicate(e){return e.value===le.type?"a":this._encodeIriOrBlank(e)}_encodeObject(e){switch(e.termType){case"Quad":return this._encodeQuad(e);case"Literal":return this._encodeLiteral(e);default:return this._encodeIriOrBlank(e)}}_encodeQuad({subject:e,predicate:t,object:i,graph:s}){return`<<${this._encodeSubject(e)} ${this._encodePredicate(t)} ${this._encodeObject(i)}${O(s)?"":` ${this._encodeIriOrBlank(s)}`}>>`}_blockedWrite(){throw new Error("Cannot write because the writer has been closed.")}addQuad(e,t,i,s,r){i===void 0?this._writeQuad(e.subject,e.predicate,e.object,e.graph,t):typeof s=="function"?this._writeQuad(e,t,i,N,s):this._writeQuad(e,t,i,s||N,r)}addQuads(e){for(let t=0;t<e.length;t++)this.addQuad(e[t])}addPrefix(e,t,i){const s={};s[e]=t,this.addPrefixes(s,i)}addPrefixes(e,t){if(!this._prefixIRIs)return t&&t();let i=!1;for(let s in e){let r=e[s];typeof r!="string"&&(r=r.value),i=!0,this._subject!==null&&(this._write(this._inDefaultGraph?`.
`:`
}
`),this._subject=null,this._graph=""),this._prefixIRIs[r]=s+=":",this._write(`@prefix ${s} <${r}>.
`)}if(i){let s="",r="";for(const n in this._prefixIRIs)s+=s?`|${n}`:n,r+=(r?"|":"")+this._prefixIRIs[n];s=q(s),this._prefixRegex=new RegExp(`^(?:${r})[^/]*$|^(${s})([_a-zA-Z0-9][\\-_a-zA-Z0-9]*)$`)}this._write(i?`
`:"",t)}blank(e,t){let i=e,s,r;switch(e===void 0?i=[]:e.termType?i=[{predicate:e,object:t}]:"length"in e||(i=[e]),r=i.length){case 0:return new $("[]");case 1:if(s=i[0],!(s.object instanceof $))return new $(`[ ${this._encodePredicate(s.predicate)} ${this._encodeObject(s.object)} ]`);default:let n="[";for(let a=0;a<r;a++)s=i[a],s.predicate.equals(e)?n+=`, ${this._encodeObject(s.object)}`:(n+=`${(a?`;
  `:`
  `)+this._encodePredicate(s.predicate)} ${this._encodeObject(s.object)}`,e=s.predicate);return new $(`${n}
]`)}}list(e){const t=e&&e.length||0,i=new Array(t);for(let s=0;s<t;s++)i[s]=this._encodeObject(e[s]);return new $(`(${i.join(" ")})`)}end(e){this._subject!==null&&(this._write(this._inDefaultGraph?`.
`:`
}
`),this._subject=null),this._write=this._blockedWrite;let t=e&&((i,s)=>{t=null,e(i,s)});if(this._endStream)try{return this._outputStream.end(t)}catch{}t&&t()}}function M(o){let e=de[o];return e===void 0&&(o.length===1?(e=o.charCodeAt(0).toString(16),e="\\u0000".substr(0,6-e.length)+e):(e=((o.charCodeAt(0)-55296)*1024+o.charCodeAt(1)+9216).toString(16),e="\\U00000000".substr(0,10-e.length)+e)),e}function q(o){return o.replace(/[\]\/\(\)\*\+\?\.\\\$]/g,"\\$&")}const R=Symbol("iter");function Q(o,e,t=4){if(t===0)return Object.assign(o,e);for(const i in e)o[i]=Q(o[i]||Object.create(null),e[i],t-1);return o}function W(o,e,t=4){let i=!1;for(const s in o)if(s in e){const r=t===0?null:W(o[s],e[s],t-1);if(r!==!1)i=i||Object.create(null),i[s]=r;else if(t===3)return!1}return i}function k(o,e,t=4){let i=!1;for(const s in o)if(!(s in e))i=i||Object.create(null),i[s]=t===0?null:Q({},o[s],t-1);else if(t!==0){const r=k(o[s],e[s],t-1);if(r!==!1)i=i||Object.create(null),i[s]=r;else if(t===3)return!1}return i}class U{constructor(e={}){this._id=1,this._ids=Object.create(null),this._ids[""]=1,this._entities=Object.create(null),this._entities[1]="",this._blankNodeIndex=0,this._factory=e.factory||j}_termFromId(e){if(e[0]==="."){const t=this._entities,i=e.split(".");return this._factory.quad(this._termFromId(t[i[1]]),this._termFromId(t[i[2]]),this._termFromId(t[i[3]]),i[4]&&this._termFromId(t[i[4]]))}return D(e,this._factory)}_termToNumericId(e){if(e.termType==="Quad"){const t=this._termToNumericId(e.subject),i=this._termToNumericId(e.predicate),s=this._termToNumericId(e.object);let r;return t&&i&&s&&(O(e.graph)||(r=this._termToNumericId(e.graph)))&&this._ids[r?`.${t}.${i}.${s}.${r}`:`.${t}.${i}.${s}`]}return this._ids[E(e)]}_termToNewNumericId(e){const t=e&&e.termType==="Quad"?`.${this._termToNewNumericId(e.subject)}.${this._termToNewNumericId(e.predicate)}.${this._termToNewNumericId(e.object)}${O(e.graph)?"":`.${this._termToNewNumericId(e.graph)}`}`:E(e);return this._ids[t]||(this._ids[this._entities[++this._id]=t]=this._id)}createBlankNode(e){let t,i;if(e)for(t=e=`_:${e}`,i=1;this._ids[t];)t=e+i++;else do t=`_:b${this._blankNodeIndex++}`;while(this._ids[t]);return this._ids[t]=++this._id,this._entities[this._id]=t,this._factory.blankNode(t.substr(2))}}class p{constructor(e,t){this._size=0,this._graphs=Object.create(null),!t&&e&&!e[0]&&(t=e,e=null),t=t||{},this._factory=t.factory||j,this._entityIndex=t.entityIndex||new U({factory:this._factory}),this._entities=this._entityIndex._entities,this._termFromId=this._entityIndex._termFromId.bind(this._entityIndex),this._termToNumericId=this._entityIndex._termToNumericId.bind(this._entityIndex),this._termToNewNumericId=this._entityIndex._termToNewNumericId.bind(this._entityIndex),e&&this.addQuads(e)}get size(){let e=this._size;if(e!==null)return e;e=0;const t=this._graphs;let i,s;for(const r in t)for(const n in i=t[r].subjects)for(const a in s=i[n])e+=Object.keys(s[a]).length;return this._size=e}_addToIndex(e,t,i,s){const r=e[t]||(e[t]={}),n=r[i]||(r[i]={}),a=s in n;return a||(n[s]=null),!a}_removeFromIndex(e,t,i,s){const r=e[t],n=r[i];delete n[s];for(const a in n)return;delete r[i];for(const a in r)return;delete e[t]}*_findInIndex(e,t,i,s,r,n,a,u){let l,d,c;const f=this._entities,h=this._termFromId(f[u]),m={subject:null,predicate:null,object:null};t&&((l=e,e={})[t]=l[t]);for(const _ in e)if(d=e[_]){m[r]=this._termFromId(f[_]),i&&((l=d,d={})[i]=l[i]);for(const I in d)if(c=d[I]){m[n]=this._termFromId(f[I]);const g=s?s in c?[s]:[]:Object.keys(c);for(let v=0;v<g.length;v++)m[a]=this._termFromId(f[g[v]]),yield this._factory.quad(m.subject,m.predicate,m.object,h)}}}_loop(e,t){for(const i in e)t(i)}_loopByKey0(e,t,i){let s,r;if(s=e[t])for(r in s)i(r)}_loopByKey1(e,t,i){let s,r;for(s in e)r=e[s],r[t]&&i(s)}_loopBy2Keys(e,t,i,s){let r,n,a;if((r=e[t])&&(n=r[i]))for(a in n)s(a)}_countInIndex(e,t,i,s){let r=0,n,a,u;t&&((n=e,e={})[t]=n[t]);for(const l in e)if(a=e[l]){i&&((n=a,a={})[i]=n[i]);for(const d in a)(u=a[d])&&(s?s in u&&r++:r+=Object.keys(u).length)}return r}_getGraphs(e){return e=e===""?1:e&&(this._termToNumericId(e)||-1),typeof e!="number"?this._graphs:{[e]:this._graphs[e]}}_uniqueEntities(e){const t=Object.create(null);return i=>{i in t||(t[i]=!0,e(this._termFromId(this._entities[i],this._factory)))}}add(e){return this.addQuad(e),this}addQuad(e,t,i,s){t||(s=e.graph,i=e.object,t=e.predicate,e=e.subject),s=s?this._termToNewNumericId(s):1;let r=this._graphs[s];return r||(r=this._graphs[s]={subjects:{},predicates:{},objects:{}},Object.freeze(r)),e=this._termToNewNumericId(e),t=this._termToNewNumericId(t),i=this._termToNewNumericId(i),this._addToIndex(r.subjects,e,t,i)?(this._addToIndex(r.predicates,t,i,e),this._addToIndex(r.objects,i,e,t),this._size=null,!0):!1}addQuads(e){for(let t=0;t<e.length;t++)this.addQuad(e[t])}delete(e){return this.removeQuad(e),this}has(e,t,i,s){return e&&e.subject&&({subject:e,predicate:t,object:i,graph:s}=e),!this.readQuads(e,t,i,s).next().done}import(e){return e.on("data",t=>{this.addQuad(t)}),e}removeQuad(e,t,i,s){t||({subject:e,predicate:t,object:i,graph:s}=e),s=s?this._termToNumericId(s):1;const r=this._graphs;let n,a,u;if(!(e=e&&this._termToNumericId(e))||!(t=t&&this._termToNumericId(t))||!(i=i&&this._termToNumericId(i))||!(n=r[s])||!(a=n.subjects[e])||!(u=a[t])||!(i in u))return!1;this._removeFromIndex(n.subjects,e,t,i),this._removeFromIndex(n.predicates,t,i,e),this._removeFromIndex(n.objects,i,e,t),this._size!==null&&this._size--;for(e in n.subjects)return!0;return delete r[s],!0}removeQuads(e){for(let t=0;t<e.length;t++)this.removeQuad(e[t])}remove(e){return e.on("data",t=>{this.removeQuad(t)}),e}removeMatches(e,t,i,s){const r=new z.Readable({objectMode:!0}),n=this.readQuads(e,t,i,s);return r._read=a=>{for(;--a>=0;){const{done:u,value:l}=n.next();if(u){r.push(null);return}r.push(l)}},this.remove(r)}deleteGraph(e){return this.removeMatches(null,null,null,e)}getQuads(e,t,i,s){return[...this.readQuads(e,t,i,s)]}*readQuads(e,t,i,s){const r=this._getGraphs(s);let n,a,u,l;if(!(e&&!(a=this._termToNumericId(e))||t&&!(u=this._termToNumericId(t))||i&&!(l=this._termToNumericId(i))))for(const d in r)(n=r[d])&&(a?l?yield*this._findInIndex(n.objects,l,a,u,"object","subject","predicate",d):yield*this._findInIndex(n.subjects,a,u,null,"subject","predicate","object",d):u?yield*this._findInIndex(n.predicates,u,l,null,"predicate","object","subject",d):l?yield*this._findInIndex(n.objects,l,null,null,"object","subject","predicate",d):yield*this._findInIndex(n.subjects,null,null,null,"subject","predicate","object",d))}match(e,t,i,s){return new x(this,e,t,i,s,{entityIndex:this._entityIndex})}countQuads(e,t,i,s){const r=this._getGraphs(s);let n=0,a,u,l,d;if(e&&!(u=this._termToNumericId(e))||t&&!(l=this._termToNumericId(t))||i&&!(d=this._termToNumericId(i)))return 0;for(const c in r)(a=r[c])&&(e?i?n+=this._countInIndex(a.objects,d,u,l):n+=this._countInIndex(a.subjects,u,l,d):t?n+=this._countInIndex(a.predicates,l,d,u):n+=this._countInIndex(a.objects,d,u,l));return n}forEach(e,t,i,s,r){this.some(n=>(e(n,this),!1),t,i,s,r)}every(e,t,i,s,r){return!this.some(n=>!e(n,this),t,i,s,r)}some(e,t,i,s,r){for(const n of this.readQuads(t,i,s,r))if(e(n))return!0;return!1}getSubjects(e,t,i){const s=[];return this.forSubjects(r=>{s.push(r)},e,t,i),s}forSubjects(e,t,i,s){const r=this._getGraphs(s);let n,a,u;if(e=this._uniqueEntities(e),!(t&&!(a=this._termToNumericId(t))||i&&!(u=this._termToNumericId(i))))for(s in r)(n=r[s])&&(a?u?this._loopBy2Keys(n.predicates,a,u,e):this._loopByKey1(n.subjects,a,e):u?this._loopByKey0(n.objects,u,e):this._loop(n.subjects,e))}getPredicates(e,t,i){const s=[];return this.forPredicates(r=>{s.push(r)},e,t,i),s}forPredicates(e,t,i,s){const r=this._getGraphs(s);let n,a,u;if(e=this._uniqueEntities(e),!(t&&!(a=this._termToNumericId(t))||i&&!(u=this._termToNumericId(i))))for(s in r)(n=r[s])&&(a?u?this._loopBy2Keys(n.objects,u,a,e):this._loopByKey0(n.subjects,a,e):u?this._loopByKey1(n.predicates,u,e):this._loop(n.predicates,e))}getObjects(e,t,i){const s=[];return this.forObjects(r=>{s.push(r)},e,t,i),s}forObjects(e,t,i,s){const r=this._getGraphs(s);let n,a,u;if(e=this._uniqueEntities(e),!(t&&!(a=this._termToNumericId(t))||i&&!(u=this._termToNumericId(i))))for(s in r)(n=r[s])&&(a?u?this._loopBy2Keys(n.subjects,a,u,e):this._loopByKey1(n.objects,a,e):u?this._loopByKey0(n.predicates,u,e):this._loop(n.objects,e))}getGraphs(e,t,i){const s=[];return this.forGraphs(r=>{s.push(r)},e,t,i),s}forGraphs(e,t,i,s){for(const r in this._graphs)this.some(n=>(e(n.graph),!0),t,i,s,this._termFromId(this._entities[r]))}createBlankNode(e){return this._entityIndex.createBlankNode(e)}extractLists({remove:e=!1,ignoreErrors:t=!1}={}){const i={},s=t?()=>!0:(a,u)=>{throw new Error(`${a.value} ${u}`)},r=this.getQuads(null,T.rdf.rest,T.rdf.nil,null),n=e?[...r]:[];return r.forEach(a=>{const u=[];let l=!1,d,c;const f=a.graph;let h=a.subject;for(;h&&!l;){const m=this.getQuads(null,null,h,null),_=this.getQuads(h,null,null,null);let I,g=null,v=null,P=null;for(let y=0;y<_.length&&!l;y++)I=_[y],I.graph.equals(f)?d?l=s(h,"has non-list arcs out"):I.predicate.value===T.rdf.first?g?l=s(h,"has multiple rdf:first arcs"):n.push(g=I):I.predicate.value===T.rdf.rest?v?l=s(h,"has multiple rdf:rest arcs"):n.push(v=I):m.length?l=s(h,"can't be subject and object"):(d=I,c="subject"):l=s(h,"not confined to single graph");for(let y=0;y<m.length&&!l;++y)I=m[y],d?l=s(h,"can't have coreferences"):I.predicate.value===T.rdf.rest?P?l=s(h,"has incoming rdf:rest arcs"):P=I:(d=I,c="object");g?u.unshift(g.object):l=s(h,"has no list head"),h=P&&P.subject}l?e=!1:d&&(i[d[c].value]=u)}),e&&this.removeQuads(n),i}addAll(e){if(e instanceof x&&(e=e.filtered),Array.isArray(e))this.addQuads(e);else if(e instanceof p&&e._entityIndex===this._entityIndex)e._size!==0&&(this._graphs=Q(this._graphs,e._graphs),this._size=null);else for(const t of e)this.add(t);return this}contains(e){if(e instanceof x&&(e=e.filtered),e===this)return!0;if(!(e instanceof p)||this._entityIndex!==e._entityIndex)return e.every(l=>this.has(l));const t=this._graphs,i=e._graphs;let s,r,n,a,u;for(const l in i){if(!(s=t[l]))return!1;s=s.subjects;for(const d in r=i[l].subjects){if(!(n=s[d]))return!1;for(const c in a=r[d]){if(!(u=n[c]))return!1;for(const f in a[c])if(!(f in u))return!1}}}return!0}deleteMatches(e,t,i,s){for(const r of this.match(e,t,i,s))this.removeQuad(r);return this}difference(e){if(e&&e instanceof x&&(e=e.filtered),e===this)return new p({entityIndex:this._entityIndex});if(e instanceof p&&e._entityIndex===this._entityIndex){const t=new p({entityIndex:this._entityIndex}),i=k(this._graphs,e._graphs);return i&&(t._graphs=i,t._size=null),t}return this.filter(t=>!e.has(t))}equals(e){return e instanceof x&&(e=e.filtered),e===this||this.size===e.size&&this.contains(e)}filter(e){const t=new p({entityIndex:this._entityIndex});for(const i of this)e(i,this)&&t.add(i);return t}intersection(e){if(e instanceof x&&(e=e.filtered),e===this){const t=new p({entityIndex:this._entityIndex});return t._graphs=Q(Object.create(null),this._graphs),t._size=this._size,t}else if(e instanceof p&&this._entityIndex===e._entityIndex){const t=new p({entityIndex:this._entityIndex}),i=W(e._graphs,this._graphs);return i&&(t._graphs=i,t._size=null),t}return this.filter(t=>e.has(t))}map(e){const t=new p({entityIndex:this._entityIndex});for(const i of this)t.add(e(i,this));return t}reduce(e,t){const i=this.readQuads();let s=t===void 0?i.next().value:t;for(const r of i)s=e(s,r,this);return s}toArray(){return this.getQuads()}toCanonical(){throw new Error("not implemented")}toStream(){return this.match()}toString(){return new S().quadsToString(this)}union(e){const t=new p({entityIndex:this._entityIndex});return t._graphs=Q(Object.create(null),this._graphs),t._size=this._size,t.addAll(e),t}*[Symbol.iterator](){yield*this.readQuads()}}function b(o,e,t=0){const i=e[t];if(i&&!(i in o))return!1;let s=!1;for(const r in i?{[i]:o[i]}:o){const n=t===2?null:b(o[r],e,t+1);n!==!1&&(s=s||Object.create(null),s[r]=n)}return s}class x extends z.Readable{constructor(e,t,i,s,r,n){super({objectMode:!0}),Object.assign(this,{n3Store:e,subject:t,predicate:i,object:s,graph:r,options:n})}get filtered(){if(!this._filtered){const{n3Store:e,graph:t,object:i,predicate:s,subject:r}=this,n=this._filtered=new p({factory:e._factory,entityIndex:this.options.entityIndex});let a,u,l;if(r&&!(a=n._termToNumericId(r))||s&&!(u=n._termToNumericId(s))||i&&!(l=n._termToNumericId(i)))return n;const d=e._getGraphs(t);for(const c in d){let f,h,m,_;(_=d[c])&&(!a&&u?(h=b(_.predicates,[u,l,a]))&&(f=b(_.subjects,[a,u,l]),m=b(_.objects,[l,a,u])):l?(m=b(_.objects,[l,a,u]))&&(f=b(_.subjects,[a,u,l]),h=b(_.predicates,[u,l,a])):(f=b(_.subjects,[a,u,l]))&&(h=b(_.predicates,[u,l,a]),m=b(_.objects,[l,a,u])),f&&(n._graphs[c]={subjects:f,predicates:h,objects:m}))}n._size=null}return this._filtered}get size(){return this.filtered.size}_read(e){e>0&&!this[R]&&(this[R]=this[Symbol.iterator]());const t=this[R];for(;--e>=0;){const{done:i,value:s}=t.next();if(i){this.push(null);return}this.push(s)}}addAll(e){return this.filtered.addAll(e)}contains(e){return this.filtered.contains(e)}deleteMatches(e,t,i,s){return this.filtered.deleteMatches(e,t,i,s)}difference(e){return this.filtered.difference(e)}equals(e){return this.filtered.equals(e)}every(e,t,i,s,r){return this.filtered.every(e,t,i,s,r)}filter(e){return this.filtered.filter(e)}forEach(e,t,i,s,r){return this.filtered.forEach(e,t,i,s,r)}import(e){return this.filtered.import(e)}intersection(e){return this.filtered.intersection(e)}map(e){return this.filtered.map(e)}some(e,t,i,s,r){return this.filtered.some(e,t,i,s,r)}toCanonical(){return this.filtered.toCanonical()}toStream(){return this._filtered?this._filtered.toStream():this.n3Store.match(this.subject,this.predicate,this.object,this.graph)}union(e){return this._filtered?this._filtered.union(e):this.n3Store.match(this.subject,this.predicate,this.object,this.graph).addAll(e)}toArray(){return this._filtered?this._filtered.toArray():this.n3Store.getQuads(this.subject,this.predicate,this.object,this.graph)}reduce(e,t){return this.filtered.reduce(e,t)}toString(){return new S().quadsToString(this)}add(e){return this.filtered.add(e)}delete(e){return this.filtered.delete(e)}has(e){return this.filtered.has(e)}match(e,t,i,s){return new x(this.filtered,e,t,i,s,this.options)}*[Symbol.iterator](){yield*this._filtered||this.n3Store.readQuads(this.subject,this.predicate,this.object,this.graph)}}class he{dataset(e){return new p(e)}}function ce(o){const e=[];for(const{subject:t,object:i}of o.match(null,j.namedNode("http://www.w3.org/2000/10/swap/log#implies"),null,j.defaultGraph())){const s=[...o.match(null,null,null,t)],r=[...o.match(null,null,null,i)];e.push({premise:s,conclusion:r})}return e}class fe{constructor(e){this._store=e}_add(e,t,i,s,r){this._store._addToIndex(s.subjects,e,t,i)&&(this._store._addToIndex(s.predicates,t,i,e),this._store._addToIndex(s.objects,i,e,t),r())}_evaluatePremise(e,t,i,s=0){let r,n,a,u,l;const[d,c,f]=e.premise[s].value,h=t[e.premise[s].content],m=!(a=d.value);for(a in m?h:{[a]:h[a]})if(u=h[a]){m&&(d.value=Number(a)),r=!(a=c.value);for(a in r?u:{[a]:u[a]})if(l=u[a]){r&&(c.value=Number(a)),n=!(a=f.value);for(a in n?l:{[a]:l[a]})n&&(f.value=Number(a)),s===e.premise.length-1?e.conclusion.forEach(_=>{this._add(_.subject.value,_.predicate.value,_.object.value,t,()=>{i(_)})}):this._evaluatePremise(e,t,i,s+1);n&&(f.value=null)}r&&(c.value=null)}m&&(d.value=null)}_evaluateRules(e,t,i){for(let s=0;s<e.length;s++)this._evaluatePremise(e[s],t,i)}_reasonGraphNaive(e,t){const i=[];function s(a){a.next&&a.next.forEach(u=>{i.push([a.subject.value,a.predicate.value,a.object.value,u])})}const r=a=>{a.forEach(u=>{this._add(u.subject.value,u.predicate.value,u.object.value,t,()=>{s(u)})})};this._evaluateRules(e,t,s);let n;for(;(n=i.pop())!==void 0;){const[a,u,l,d]=n,c=d.basePremise.subject.value;c||(d.basePremise.subject.value=a);const f=d.basePremise.predicate.value;f||(d.basePremise.predicate.value=u);const h=d.basePremise.object.value;h||(d.basePremise.object.value=l),d.premise.length===0?r(d.conclusion):this._evaluatePremise(d,t,s),c||(d.basePremise.subject.value=null),f||(d.basePremise.predicate.value=null),h||(d.basePremise.object.value=null)}}_createRule({premise:e,conclusion:t}){const i={},s=n=>n.termType==="Variable"?i[n.value]=i[n.value]||{}:{value:this._store._termToNewNumericId(n)},r=n=>({subject:s(n.subject),predicate:s(n.predicate),object:s(n.object)});return{premise:e.map(n=>r(n)),conclusion:t.map(n=>r(n)),variables:Object.values(i)}}reason(e){Array.isArray(e)||(e=ce(e)),e=e.map(i=>this._createRule(i));for(const i of e)for(const s of e)for(let r=0;r<s.premise.length;r++){const n=s.premise[r];for(const a of i.conclusion){if(B(n.subject,a.subject)&&B(n.predicate,a.predicate)&&B(n.object,a.object)){const u=new Set,l=[];n.subject.value=n.subject.value||1,n.object.value=n.object.value||1,n.predicate.value=n.predicate.value||1;for(let d=0;d<s.premise.length;d++)d!==r&&l.push(K(s.premise[d],u));(a.next=a.next||[]).push({premise:l,conclusion:s.conclusion,basePremise:n})}s.variables.forEach(u=>{u.value=null})}}for(const i of e){const s=new Set;i.premise=i.premise.map(r=>K(r,s))}const t=this._store._getGraphs();for(const i in t)this._reasonGraphNaive(e,t[i]);this._store._size=null}}function K({subject:o,predicate:e,object:t},i){const s=o.value||i.has(o)||(i.add(o),!1),r=e.value||i.has(e)||(i.add(e),!1),n=t.value||i.has(t)||(i.add(t),!1);return!s&&r?{content:"predicates",value:[e,t,o]}:n?{content:"objects",value:[t,o,e]}:{content:"subjects",value:[o,e,t]}}function B(o,e){return o.value===null&&(o.value=e.value),o.value===e.value}class _e extends z.Transform{constructor(e){super({encoding:"utf8",writableObjectMode:!0});const t=this._writer=new S({write:(i,s,r)=>{this.push(i),r&&r()},end:i=>{this.push(null),i&&i()}},e);this._transform=(i,s,r)=>{t.addQuad(i,r)},this._flush=i=>{t.end(i)}}import(e){return e.on("data",t=>{this.write(t)}),e.on("end",()=>{this.end()}),e.on("error",t=>{this.emit("error",t)}),e.on("prefix",(t,i)=>{this._writer.addPrefix(t,i)}),this}}const pe={Lexer:te,Parser:ee,Writer:S,Store:p,StoreFactory:he,EntityIndex:U,StreamParser:J,StreamWriter:_e,Util:oe,Reasoner:fe,DataFactory:j,Term:L,NamedNode:Y,Literal:X,BlankNode:H,Variable:Z,DefaultGraph:V,Quad:G,Triple:G,termFromId:D,termToId:E};export{H as BlankNode,j as DataFactory,V as DefaultGraph,U as EntityIndex,te as Lexer,X as Literal,Y as NamedNode,ee as Parser,G as Quad,fe as Reasoner,p as Store,he as StoreFactory,J as StreamParser,_e as StreamWriter,L as Term,G as Triple,oe as Util,Z as Variable,S as Writer,pe as default,ce as getRulesFromDataset,D as termFromId,E as termToId};
